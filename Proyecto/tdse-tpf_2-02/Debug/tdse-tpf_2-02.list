
tdse-tpf_2-02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004144  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000460  08004250  08004250  00005250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046b0  080046b0  000060a8  2**0
                  CONTENTS
  4 .ARM          00000008  080046b0  080046b0  000056b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080046b8  080046b8  000060a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046b8  080046b8  000056b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080046bc  080046bc  000056bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a8  20000000  080046c0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000318  200000a8  08004768  000060a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003c0  08004768  000063c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000060a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000084bd  00000000  00000000  000060d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fb6  00000000  00000000  0000e58e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000820  00000000  00000000  00010548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000060f  00000000  00000000  00010d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000187d1  00000000  00000000  00011377  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e01a  00000000  00000000  00029b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083926  00000000  00000000  00037b62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bb488  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b00  00000000  00000000  000bb4cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000bdfcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000a8 	.word	0x200000a8
 8000128:	00000000 	.word	0x00000000
 800012c:	08004238 	.word	0x08004238

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000ac 	.word	0x200000ac
 8000148:	08004238 	.word	0x08004238

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	initialise_monitor_handles();
 8000160:	f002 feb4 	bl	8002ecc <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000164:	f000 fac4 	bl	80006f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000168:	f000 f809 	bl	800017e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016c:	f000 f876 	bl	800025c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000170:	f000 f846 	bl	8000200 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

	/* Application Init */
	app_init();
 8000174:	f001 fe78 	bl	8001e68 <app_init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  /* Application Update */
	  app_update();
 8000178:	f001 ff42 	bl	8002000 <app_update>
 800017c:	e7fc      	b.n	8000178 <main+0x1c>

0800017e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800017e:	b580      	push	{r7, lr}
 8000180:	b090      	sub	sp, #64	@ 0x40
 8000182:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000184:	f107 0318 	add.w	r3, r7, #24
 8000188:	2228      	movs	r2, #40	@ 0x28
 800018a:	2100      	movs	r1, #0
 800018c:	4618      	mov	r0, r3
 800018e:	f003 f922 	bl	80033d6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000192:	1d3b      	adds	r3, r7, #4
 8000194:	2200      	movs	r2, #0
 8000196:	601a      	str	r2, [r3, #0]
 8000198:	605a      	str	r2, [r3, #4]
 800019a:	609a      	str	r2, [r3, #8]
 800019c:	60da      	str	r2, [r3, #12]
 800019e:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001a0:	2302      	movs	r3, #2
 80001a2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001a4:	2301      	movs	r3, #1
 80001a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001a8:	2310      	movs	r3, #16
 80001aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001ac:	2302      	movs	r3, #2
 80001ae:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80001b0:	2300      	movs	r3, #0
 80001b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80001b4:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 80001b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001ba:	f107 0318 	add.w	r3, r7, #24
 80001be:	4618      	mov	r0, r3
 80001c0:	f001 fa56 	bl	8001670 <HAL_RCC_OscConfig>
 80001c4:	4603      	mov	r3, r0
 80001c6:	2b00      	cmp	r3, #0
 80001c8:	d001      	beq.n	80001ce <SystemClock_Config+0x50>
  {
    Error_Handler();
 80001ca:	f000 f8cb 	bl	8000364 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001ce:	230f      	movs	r3, #15
 80001d0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001d2:	2302      	movs	r3, #2
 80001d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001d6:	2300      	movs	r3, #0
 80001d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80001de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001e0:	2300      	movs	r3, #0
 80001e2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001e4:	1d3b      	adds	r3, r7, #4
 80001e6:	2102      	movs	r1, #2
 80001e8:	4618      	mov	r0, r3
 80001ea:	f001 fcc3 	bl	8001b74 <HAL_RCC_ClockConfig>
 80001ee:	4603      	mov	r3, r0
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d001      	beq.n	80001f8 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80001f4:	f000 f8b6 	bl	8000364 <Error_Handler>
  }
}
 80001f8:	bf00      	nop
 80001fa:	3740      	adds	r7, #64	@ 0x40
 80001fc:	46bd      	mov	sp, r7
 80001fe:	bd80      	pop	{r7, pc}

08000200 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000204:	4b12      	ldr	r3, [pc, #72]	@ (8000250 <MX_I2C1_Init+0x50>)
 8000206:	4a13      	ldr	r2, [pc, #76]	@ (8000254 <MX_I2C1_Init+0x54>)
 8000208:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800020a:	4b11      	ldr	r3, [pc, #68]	@ (8000250 <MX_I2C1_Init+0x50>)
 800020c:	4a12      	ldr	r2, [pc, #72]	@ (8000258 <MX_I2C1_Init+0x58>)
 800020e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000210:	4b0f      	ldr	r3, [pc, #60]	@ (8000250 <MX_I2C1_Init+0x50>)
 8000212:	2200      	movs	r2, #0
 8000214:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000216:	4b0e      	ldr	r3, [pc, #56]	@ (8000250 <MX_I2C1_Init+0x50>)
 8000218:	2200      	movs	r2, #0
 800021a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800021c:	4b0c      	ldr	r3, [pc, #48]	@ (8000250 <MX_I2C1_Init+0x50>)
 800021e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000222:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000224:	4b0a      	ldr	r3, [pc, #40]	@ (8000250 <MX_I2C1_Init+0x50>)
 8000226:	2200      	movs	r2, #0
 8000228:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800022a:	4b09      	ldr	r3, [pc, #36]	@ (8000250 <MX_I2C1_Init+0x50>)
 800022c:	2200      	movs	r2, #0
 800022e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000230:	4b07      	ldr	r3, [pc, #28]	@ (8000250 <MX_I2C1_Init+0x50>)
 8000232:	2200      	movs	r2, #0
 8000234:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000236:	4b06      	ldr	r3, [pc, #24]	@ (8000250 <MX_I2C1_Init+0x50>)
 8000238:	2200      	movs	r2, #0
 800023a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800023c:	4804      	ldr	r0, [pc, #16]	@ (8000250 <MX_I2C1_Init+0x50>)
 800023e:	f000 fd7b 	bl	8000d38 <HAL_I2C_Init>
 8000242:	4603      	mov	r3, r0
 8000244:	2b00      	cmp	r3, #0
 8000246:	d001      	beq.n	800024c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000248:	f000 f88c 	bl	8000364 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800024c:	bf00      	nop
 800024e:	bd80      	pop	{r7, pc}
 8000250:	200000c4 	.word	0x200000c4
 8000254:	40005400 	.word	0x40005400
 8000258:	000186a0 	.word	0x000186a0

0800025c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b088      	sub	sp, #32
 8000260:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000262:	f107 0310 	add.w	r3, r7, #16
 8000266:	2200      	movs	r2, #0
 8000268:	601a      	str	r2, [r3, #0]
 800026a:	605a      	str	r2, [r3, #4]
 800026c:	609a      	str	r2, [r3, #8]
 800026e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000270:	4b38      	ldr	r3, [pc, #224]	@ (8000354 <MX_GPIO_Init+0xf8>)
 8000272:	699b      	ldr	r3, [r3, #24]
 8000274:	4a37      	ldr	r2, [pc, #220]	@ (8000354 <MX_GPIO_Init+0xf8>)
 8000276:	f043 0310 	orr.w	r3, r3, #16
 800027a:	6193      	str	r3, [r2, #24]
 800027c:	4b35      	ldr	r3, [pc, #212]	@ (8000354 <MX_GPIO_Init+0xf8>)
 800027e:	699b      	ldr	r3, [r3, #24]
 8000280:	f003 0310 	and.w	r3, r3, #16
 8000284:	60fb      	str	r3, [r7, #12]
 8000286:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000288:	4b32      	ldr	r3, [pc, #200]	@ (8000354 <MX_GPIO_Init+0xf8>)
 800028a:	699b      	ldr	r3, [r3, #24]
 800028c:	4a31      	ldr	r2, [pc, #196]	@ (8000354 <MX_GPIO_Init+0xf8>)
 800028e:	f043 0320 	orr.w	r3, r3, #32
 8000292:	6193      	str	r3, [r2, #24]
 8000294:	4b2f      	ldr	r3, [pc, #188]	@ (8000354 <MX_GPIO_Init+0xf8>)
 8000296:	699b      	ldr	r3, [r3, #24]
 8000298:	f003 0320 	and.w	r3, r3, #32
 800029c:	60bb      	str	r3, [r7, #8]
 800029e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002a0:	4b2c      	ldr	r3, [pc, #176]	@ (8000354 <MX_GPIO_Init+0xf8>)
 80002a2:	699b      	ldr	r3, [r3, #24]
 80002a4:	4a2b      	ldr	r2, [pc, #172]	@ (8000354 <MX_GPIO_Init+0xf8>)
 80002a6:	f043 0304 	orr.w	r3, r3, #4
 80002aa:	6193      	str	r3, [r2, #24]
 80002ac:	4b29      	ldr	r3, [pc, #164]	@ (8000354 <MX_GPIO_Init+0xf8>)
 80002ae:	699b      	ldr	r3, [r3, #24]
 80002b0:	f003 0304 	and.w	r3, r3, #4
 80002b4:	607b      	str	r3, [r7, #4]
 80002b6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002b8:	4b26      	ldr	r3, [pc, #152]	@ (8000354 <MX_GPIO_Init+0xf8>)
 80002ba:	699b      	ldr	r3, [r3, #24]
 80002bc:	4a25      	ldr	r2, [pc, #148]	@ (8000354 <MX_GPIO_Init+0xf8>)
 80002be:	f043 0308 	orr.w	r3, r3, #8
 80002c2:	6193      	str	r3, [r2, #24]
 80002c4:	4b23      	ldr	r3, [pc, #140]	@ (8000354 <MX_GPIO_Init+0xf8>)
 80002c6:	699b      	ldr	r3, [r3, #24]
 80002c8:	f003 0308 	and.w	r3, r3, #8
 80002cc:	603b      	str	r3, [r7, #0]
 80002ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, R4_Pin|R3_Pin|R2_Pin|R1_Pin, GPIO_PIN_RESET);
 80002d0:	2200      	movs	r2, #0
 80002d2:	21f0      	movs	r1, #240	@ 0xf0
 80002d4:	4820      	ldr	r0, [pc, #128]	@ (8000358 <MX_GPIO_Init+0xfc>)
 80002d6:	f000 fd16 	bl	8000d06 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|BUZ_Pin, GPIO_PIN_RESET);
 80002da:	2200      	movs	r2, #0
 80002dc:	2107      	movs	r1, #7
 80002de:	481f      	ldr	r0, [pc, #124]	@ (800035c <MX_GPIO_Init+0x100>)
 80002e0:	f000 fd11 	bl	8000d06 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 80002e4:	2301      	movs	r3, #1
 80002e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002e8:	2300      	movs	r3, #0
 80002ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80002ec:	2301      	movs	r3, #1
 80002ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 80002f0:	f107 0310 	add.w	r3, r7, #16
 80002f4:	4619      	mov	r1, r3
 80002f6:	481a      	ldr	r0, [pc, #104]	@ (8000360 <MX_GPIO_Init+0x104>)
 80002f8:	f000 fb6a 	bl	80009d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : C4_Pin C3_Pin C2_Pin C1_Pin */
  GPIO_InitStruct.Pin = C4_Pin|C3_Pin|C2_Pin|C1_Pin;
 80002fc:	230f      	movs	r3, #15
 80002fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000300:	2300      	movs	r3, #0
 8000302:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000304:	2301      	movs	r3, #1
 8000306:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000308:	f107 0310 	add.w	r3, r7, #16
 800030c:	4619      	mov	r1, r3
 800030e:	4812      	ldr	r0, [pc, #72]	@ (8000358 <MX_GPIO_Init+0xfc>)
 8000310:	f000 fb5e 	bl	80009d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : R4_Pin R3_Pin R2_Pin R1_Pin */
  GPIO_InitStruct.Pin = R4_Pin|R3_Pin|R2_Pin|R1_Pin;
 8000314:	23f0      	movs	r3, #240	@ 0xf0
 8000316:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000318:	2301      	movs	r3, #1
 800031a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800031c:	2300      	movs	r3, #0
 800031e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000320:	2302      	movs	r3, #2
 8000322:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000324:	f107 0310 	add.w	r3, r7, #16
 8000328:	4619      	mov	r1, r3
 800032a:	480b      	ldr	r0, [pc, #44]	@ (8000358 <MX_GPIO_Init+0xfc>)
 800032c:	f000 fb50 	bl	80009d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin BUZ_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|BUZ_Pin;
 8000330:	2307      	movs	r3, #7
 8000332:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000334:	2301      	movs	r3, #1
 8000336:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000338:	2300      	movs	r3, #0
 800033a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800033c:	2302      	movs	r3, #2
 800033e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000340:	f107 0310 	add.w	r3, r7, #16
 8000344:	4619      	mov	r1, r3
 8000346:	4805      	ldr	r0, [pc, #20]	@ (800035c <MX_GPIO_Init+0x100>)
 8000348:	f000 fb42 	bl	80009d0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800034c:	bf00      	nop
 800034e:	3720      	adds	r7, #32
 8000350:	46bd      	mov	sp, r7
 8000352:	bd80      	pop	{r7, pc}
 8000354:	40021000 	.word	0x40021000
 8000358:	40010800 	.word	0x40010800
 800035c:	40010c00 	.word	0x40010c00
 8000360:	40011000 	.word	0x40011000

08000364 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000364:	b480      	push	{r7}
 8000366:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000368:	b672      	cpsid	i
}
 800036a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800036c:	bf00      	nop
 800036e:	e7fd      	b.n	800036c <Error_Handler+0x8>

08000370 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000370:	b480      	push	{r7}
 8000372:	b085      	sub	sp, #20
 8000374:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000376:	4b15      	ldr	r3, [pc, #84]	@ (80003cc <HAL_MspInit+0x5c>)
 8000378:	699b      	ldr	r3, [r3, #24]
 800037a:	4a14      	ldr	r2, [pc, #80]	@ (80003cc <HAL_MspInit+0x5c>)
 800037c:	f043 0301 	orr.w	r3, r3, #1
 8000380:	6193      	str	r3, [r2, #24]
 8000382:	4b12      	ldr	r3, [pc, #72]	@ (80003cc <HAL_MspInit+0x5c>)
 8000384:	699b      	ldr	r3, [r3, #24]
 8000386:	f003 0301 	and.w	r3, r3, #1
 800038a:	60bb      	str	r3, [r7, #8]
 800038c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800038e:	4b0f      	ldr	r3, [pc, #60]	@ (80003cc <HAL_MspInit+0x5c>)
 8000390:	69db      	ldr	r3, [r3, #28]
 8000392:	4a0e      	ldr	r2, [pc, #56]	@ (80003cc <HAL_MspInit+0x5c>)
 8000394:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000398:	61d3      	str	r3, [r2, #28]
 800039a:	4b0c      	ldr	r3, [pc, #48]	@ (80003cc <HAL_MspInit+0x5c>)
 800039c:	69db      	ldr	r3, [r3, #28]
 800039e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80003a2:	607b      	str	r3, [r7, #4]
 80003a4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003a6:	4b0a      	ldr	r3, [pc, #40]	@ (80003d0 <HAL_MspInit+0x60>)
 80003a8:	685b      	ldr	r3, [r3, #4]
 80003aa:	60fb      	str	r3, [r7, #12]
 80003ac:	68fb      	ldr	r3, [r7, #12]
 80003ae:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80003b2:	60fb      	str	r3, [r7, #12]
 80003b4:	68fb      	ldr	r3, [r7, #12]
 80003b6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80003ba:	60fb      	str	r3, [r7, #12]
 80003bc:	4a04      	ldr	r2, [pc, #16]	@ (80003d0 <HAL_MspInit+0x60>)
 80003be:	68fb      	ldr	r3, [r7, #12]
 80003c0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003c2:	bf00      	nop
 80003c4:	3714      	adds	r7, #20
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bc80      	pop	{r7}
 80003ca:	4770      	bx	lr
 80003cc:	40021000 	.word	0x40021000
 80003d0:	40010000 	.word	0x40010000

080003d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b088      	sub	sp, #32
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003dc:	f107 0310 	add.w	r3, r7, #16
 80003e0:	2200      	movs	r2, #0
 80003e2:	601a      	str	r2, [r3, #0]
 80003e4:	605a      	str	r2, [r3, #4]
 80003e6:	609a      	str	r2, [r3, #8]
 80003e8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	4a15      	ldr	r2, [pc, #84]	@ (8000444 <HAL_I2C_MspInit+0x70>)
 80003f0:	4293      	cmp	r3, r2
 80003f2:	d123      	bne.n	800043c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80003f4:	4b14      	ldr	r3, [pc, #80]	@ (8000448 <HAL_I2C_MspInit+0x74>)
 80003f6:	699b      	ldr	r3, [r3, #24]
 80003f8:	4a13      	ldr	r2, [pc, #76]	@ (8000448 <HAL_I2C_MspInit+0x74>)
 80003fa:	f043 0308 	orr.w	r3, r3, #8
 80003fe:	6193      	str	r3, [r2, #24]
 8000400:	4b11      	ldr	r3, [pc, #68]	@ (8000448 <HAL_I2C_MspInit+0x74>)
 8000402:	699b      	ldr	r3, [r3, #24]
 8000404:	f003 0308 	and.w	r3, r3, #8
 8000408:	60fb      	str	r3, [r7, #12]
 800040a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800040c:	23c0      	movs	r3, #192	@ 0xc0
 800040e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000410:	2312      	movs	r3, #18
 8000412:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000414:	2303      	movs	r3, #3
 8000416:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000418:	f107 0310 	add.w	r3, r7, #16
 800041c:	4619      	mov	r1, r3
 800041e:	480b      	ldr	r0, [pc, #44]	@ (800044c <HAL_I2C_MspInit+0x78>)
 8000420:	f000 fad6 	bl	80009d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000424:	4b08      	ldr	r3, [pc, #32]	@ (8000448 <HAL_I2C_MspInit+0x74>)
 8000426:	69db      	ldr	r3, [r3, #28]
 8000428:	4a07      	ldr	r2, [pc, #28]	@ (8000448 <HAL_I2C_MspInit+0x74>)
 800042a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800042e:	61d3      	str	r3, [r2, #28]
 8000430:	4b05      	ldr	r3, [pc, #20]	@ (8000448 <HAL_I2C_MspInit+0x74>)
 8000432:	69db      	ldr	r3, [r3, #28]
 8000434:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000438:	60bb      	str	r3, [r7, #8]
 800043a:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800043c:	bf00      	nop
 800043e:	3720      	adds	r7, #32
 8000440:	46bd      	mov	sp, r7
 8000442:	bd80      	pop	{r7, pc}
 8000444:	40005400 	.word	0x40005400
 8000448:	40021000 	.word	0x40021000
 800044c:	40010c00 	.word	0x40010c00

08000450 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000450:	b480      	push	{r7}
 8000452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000454:	bf00      	nop
 8000456:	e7fd      	b.n	8000454 <NMI_Handler+0x4>

08000458 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000458:	b480      	push	{r7}
 800045a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800045c:	bf00      	nop
 800045e:	e7fd      	b.n	800045c <HardFault_Handler+0x4>

08000460 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000460:	b480      	push	{r7}
 8000462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000464:	bf00      	nop
 8000466:	e7fd      	b.n	8000464 <MemManage_Handler+0x4>

08000468 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000468:	b480      	push	{r7}
 800046a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800046c:	bf00      	nop
 800046e:	e7fd      	b.n	800046c <BusFault_Handler+0x4>

08000470 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000470:	b480      	push	{r7}
 8000472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000474:	bf00      	nop
 8000476:	e7fd      	b.n	8000474 <UsageFault_Handler+0x4>

08000478 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800047c:	bf00      	nop
 800047e:	46bd      	mov	sp, r7
 8000480:	bc80      	pop	{r7}
 8000482:	4770      	bx	lr

08000484 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000488:	bf00      	nop
 800048a:	46bd      	mov	sp, r7
 800048c:	bc80      	pop	{r7}
 800048e:	4770      	bx	lr

08000490 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000494:	bf00      	nop
 8000496:	46bd      	mov	sp, r7
 8000498:	bc80      	pop	{r7}
 800049a:	4770      	bx	lr

0800049c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004a0:	f000 f96c 	bl	800077c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  	HAL_SYSTICK_IRQHandler();
 80004a4:	f000 fa8d 	bl	80009c2 <HAL_SYSTICK_IRQHandler>

  /* USER CODE END SysTick_IRQn 1 */
}
 80004a8:	bf00      	nop
 80004aa:	bd80      	pop	{r7, pc}

080004ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b086      	sub	sp, #24
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80004b4:	4a14      	ldr	r2, [pc, #80]	@ (8000508 <_sbrk+0x5c>)
 80004b6:	4b15      	ldr	r3, [pc, #84]	@ (800050c <_sbrk+0x60>)
 80004b8:	1ad3      	subs	r3, r2, r3
 80004ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004bc:	697b      	ldr	r3, [r7, #20]
 80004be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004c0:	4b13      	ldr	r3, [pc, #76]	@ (8000510 <_sbrk+0x64>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d102      	bne.n	80004ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80004c8:	4b11      	ldr	r3, [pc, #68]	@ (8000510 <_sbrk+0x64>)
 80004ca:	4a12      	ldr	r2, [pc, #72]	@ (8000514 <_sbrk+0x68>)
 80004cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80004ce:	4b10      	ldr	r3, [pc, #64]	@ (8000510 <_sbrk+0x64>)
 80004d0:	681a      	ldr	r2, [r3, #0]
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	4413      	add	r3, r2
 80004d6:	693a      	ldr	r2, [r7, #16]
 80004d8:	429a      	cmp	r2, r3
 80004da:	d207      	bcs.n	80004ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80004dc:	f002 ffca 	bl	8003474 <__errno>
 80004e0:	4603      	mov	r3, r0
 80004e2:	220c      	movs	r2, #12
 80004e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80004e6:	f04f 33ff 	mov.w	r3, #4294967295
 80004ea:	e009      	b.n	8000500 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80004ec:	4b08      	ldr	r3, [pc, #32]	@ (8000510 <_sbrk+0x64>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80004f2:	4b07      	ldr	r3, [pc, #28]	@ (8000510 <_sbrk+0x64>)
 80004f4:	681a      	ldr	r2, [r3, #0]
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	4413      	add	r3, r2
 80004fa:	4a05      	ldr	r2, [pc, #20]	@ (8000510 <_sbrk+0x64>)
 80004fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80004fe:	68fb      	ldr	r3, [r7, #12]
}
 8000500:	4618      	mov	r0, r3
 8000502:	3718      	adds	r7, #24
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}
 8000508:	20005000 	.word	0x20005000
 800050c:	00000400 	.word	0x00000400
 8000510:	20000118 	.word	0x20000118
 8000514:	200003c0 	.word	0x200003c0

08000518 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800051c:	bf00      	nop
 800051e:	46bd      	mov	sp, r7
 8000520:	bc80      	pop	{r7}
 8000522:	4770      	bx	lr

08000524 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000524:	f7ff fff8 	bl	8000518 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000528:	480b      	ldr	r0, [pc, #44]	@ (8000558 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800052a:	490c      	ldr	r1, [pc, #48]	@ (800055c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800052c:	4a0c      	ldr	r2, [pc, #48]	@ (8000560 <LoopFillZerobss+0x16>)
  movs r3, #0
 800052e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000530:	e002      	b.n	8000538 <LoopCopyDataInit>

08000532 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000532:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000534:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000536:	3304      	adds	r3, #4

08000538 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000538:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800053a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800053c:	d3f9      	bcc.n	8000532 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800053e:	4a09      	ldr	r2, [pc, #36]	@ (8000564 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000540:	4c09      	ldr	r4, [pc, #36]	@ (8000568 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000542:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000544:	e001      	b.n	800054a <LoopFillZerobss>

08000546 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000546:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000548:	3204      	adds	r2, #4

0800054a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800054a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800054c:	d3fb      	bcc.n	8000546 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800054e:	f002 ff97 	bl	8003480 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000552:	f7ff fe03 	bl	800015c <main>
  bx lr
 8000556:	4770      	bx	lr
  ldr r0, =_sdata
 8000558:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800055c:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 8000560:	080046c0 	.word	0x080046c0
  ldr r2, =_sbss
 8000564:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8000568:	200003c0 	.word	0x200003c0

0800056c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800056c:	e7fe      	b.n	800056c <ADC1_2_IRQHandler>

0800056e <lcd_send_cmd>:
 * @param  lcd: Pointer to the LCD handle
 * @param  cmd: Command byte to send
 * @retval None
 */
void lcd_send_cmd(I2C_LCD_HandleTypeDef *lcd, char cmd)
{
 800056e:	b580      	push	{r7, lr}
 8000570:	b086      	sub	sp, #24
 8000572:	af02      	add	r7, sp, #8
 8000574:	6078      	str	r0, [r7, #4]
 8000576:	460b      	mov	r3, r1
 8000578:	70fb      	strb	r3, [r7, #3]
    char upper_nibble, lower_nibble;
    uint8_t data_t[4];

    upper_nibble = (cmd & 0xF0);            // Extract upper nibble
 800057a:	78fb      	ldrb	r3, [r7, #3]
 800057c:	f023 030f 	bic.w	r3, r3, #15
 8000580:	73fb      	strb	r3, [r7, #15]
    lower_nibble = ((cmd << 4) & 0xF0);     // Extract lower nibble
 8000582:	78fb      	ldrb	r3, [r7, #3]
 8000584:	011b      	lsls	r3, r3, #4
 8000586:	73bb      	strb	r3, [r7, #14]
    
    data_t[0] = upper_nibble | 0x0C;  // en=1, rs=0
 8000588:	7bfb      	ldrb	r3, [r7, #15]
 800058a:	f043 030c 	orr.w	r3, r3, #12
 800058e:	b2db      	uxtb	r3, r3
 8000590:	723b      	strb	r3, [r7, #8]
    data_t[1] = upper_nibble | 0x08;  // en=0, rs=0
 8000592:	7bfb      	ldrb	r3, [r7, #15]
 8000594:	f043 0308 	orr.w	r3, r3, #8
 8000598:	b2db      	uxtb	r3, r3
 800059a:	727b      	strb	r3, [r7, #9]
    data_t[2] = lower_nibble | 0x0C;  // en=1, rs=0
 800059c:	7bbb      	ldrb	r3, [r7, #14]
 800059e:	f043 030c 	orr.w	r3, r3, #12
 80005a2:	b2db      	uxtb	r3, r3
 80005a4:	72bb      	strb	r3, [r7, #10]
    data_t[3] = lower_nibble | 0x08;  // en=0, rs=0
 80005a6:	7bbb      	ldrb	r3, [r7, #14]
 80005a8:	f043 0308 	orr.w	r3, r3, #8
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	72fb      	strb	r3, [r7, #11]

    HAL_I2C_Master_Transmit(lcd->hi2c, lcd->address, data_t, 4, 100);
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	6818      	ldr	r0, [r3, #0]
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	791b      	ldrb	r3, [r3, #4]
 80005b8:	4619      	mov	r1, r3
 80005ba:	f107 0208 	add.w	r2, r7, #8
 80005be:	2364      	movs	r3, #100	@ 0x64
 80005c0:	9300      	str	r3, [sp, #0]
 80005c2:	2304      	movs	r3, #4
 80005c4:	f000 fcfc 	bl	8000fc0 <HAL_I2C_Master_Transmit>
}
 80005c8:	bf00      	nop
 80005ca:	3710      	adds	r7, #16
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}

080005d0 <lcd_send_data>:
 * @param  lcd: Pointer to the LCD handle
 * @param  data: Data byte to send
 * @retval None
 */
void lcd_send_data(I2C_LCD_HandleTypeDef *lcd, char data)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b086      	sub	sp, #24
 80005d4:	af02      	add	r7, sp, #8
 80005d6:	6078      	str	r0, [r7, #4]
 80005d8:	460b      	mov	r3, r1
 80005da:	70fb      	strb	r3, [r7, #3]
    char upper_nibble, lower_nibble;
    uint8_t data_t[4];

    upper_nibble = (data & 0xF0);            // Extract upper nibble
 80005dc:	78fb      	ldrb	r3, [r7, #3]
 80005de:	f023 030f 	bic.w	r3, r3, #15
 80005e2:	73fb      	strb	r3, [r7, #15]
    lower_nibble = ((data << 4) & 0xF0);     // Extract lower nibble
 80005e4:	78fb      	ldrb	r3, [r7, #3]
 80005e6:	011b      	lsls	r3, r3, #4
 80005e8:	73bb      	strb	r3, [r7, #14]
    
    data_t[0] = upper_nibble | 0x0D;  // en=1, rs=1
 80005ea:	7bfb      	ldrb	r3, [r7, #15]
 80005ec:	f043 030d 	orr.w	r3, r3, #13
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	723b      	strb	r3, [r7, #8]
    data_t[1] = upper_nibble | 0x09;  // en=0, rs=1
 80005f4:	7bfb      	ldrb	r3, [r7, #15]
 80005f6:	f043 0309 	orr.w	r3, r3, #9
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	727b      	strb	r3, [r7, #9]
    data_t[2] = lower_nibble | 0x0D;  // en=1, rs=1
 80005fe:	7bbb      	ldrb	r3, [r7, #14]
 8000600:	f043 030d 	orr.w	r3, r3, #13
 8000604:	b2db      	uxtb	r3, r3
 8000606:	72bb      	strb	r3, [r7, #10]
    data_t[3] = lower_nibble | 0x09;  // en=0, rs=1
 8000608:	7bbb      	ldrb	r3, [r7, #14]
 800060a:	f043 0309 	orr.w	r3, r3, #9
 800060e:	b2db      	uxtb	r3, r3
 8000610:	72fb      	strb	r3, [r7, #11]

    HAL_I2C_Master_Transmit(lcd->hi2c, lcd->address, data_t, 4, 100);
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	6818      	ldr	r0, [r3, #0]
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	791b      	ldrb	r3, [r3, #4]
 800061a:	4619      	mov	r1, r3
 800061c:	f107 0208 	add.w	r2, r7, #8
 8000620:	2364      	movs	r3, #100	@ 0x64
 8000622:	9300      	str	r3, [sp, #0]
 8000624:	2304      	movs	r3, #4
 8000626:	f000 fccb 	bl	8000fc0 <HAL_I2C_Master_Transmit>
}
 800062a:	bf00      	nop
 800062c:	3710      	adds	r7, #16
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}

08000632 <lcd_init>:
 * @brief  Initializes the LCD in 4-bit mode.
 * @param  lcd: Pointer to the LCD handle
 * @retval None
 */
void lcd_init(I2C_LCD_HandleTypeDef *lcd)
{
 8000632:	b580      	push	{r7, lr}
 8000634:	b082      	sub	sp, #8
 8000636:	af00      	add	r7, sp, #0
 8000638:	6078      	str	r0, [r7, #4]
    HAL_Delay(50);  // Wait for LCD power-up
 800063a:	2032      	movs	r0, #50	@ 0x32
 800063c:	f000 f8ba 	bl	80007b4 <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 8000640:	2130      	movs	r1, #48	@ 0x30
 8000642:	6878      	ldr	r0, [r7, #4]
 8000644:	f7ff ff93 	bl	800056e <lcd_send_cmd>
    HAL_Delay(5);
 8000648:	2005      	movs	r0, #5
 800064a:	f000 f8b3 	bl	80007b4 <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 800064e:	2130      	movs	r1, #48	@ 0x30
 8000650:	6878      	ldr	r0, [r7, #4]
 8000652:	f7ff ff8c 	bl	800056e <lcd_send_cmd>
    HAL_Delay(1);
 8000656:	2001      	movs	r0, #1
 8000658:	f000 f8ac 	bl	80007b4 <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 800065c:	2130      	movs	r1, #48	@ 0x30
 800065e:	6878      	ldr	r0, [r7, #4]
 8000660:	f7ff ff85 	bl	800056e <lcd_send_cmd>
    HAL_Delay(10);
 8000664:	200a      	movs	r0, #10
 8000666:	f000 f8a5 	bl	80007b4 <HAL_Delay>
    lcd_send_cmd(lcd, 0x20);  // Set to 4-bit mode
 800066a:	2120      	movs	r1, #32
 800066c:	6878      	ldr	r0, [r7, #4]
 800066e:	f7ff ff7e 	bl	800056e <lcd_send_cmd>
    HAL_Delay(10);
 8000672:	200a      	movs	r0, #10
 8000674:	f000 f89e 	bl	80007b4 <HAL_Delay>

    // LCD configuration commands
    lcd_send_cmd(lcd, 0x28);  // 4-bit mode, 2 lines, 5x8 font
 8000678:	2128      	movs	r1, #40	@ 0x28
 800067a:	6878      	ldr	r0, [r7, #4]
 800067c:	f7ff ff77 	bl	800056e <lcd_send_cmd>
    HAL_Delay(1);
 8000680:	2001      	movs	r0, #1
 8000682:	f000 f897 	bl	80007b4 <HAL_Delay>
    lcd_send_cmd(lcd, 0x08);  // Display off, cursor off, blink off
 8000686:	2108      	movs	r1, #8
 8000688:	6878      	ldr	r0, [r7, #4]
 800068a:	f7ff ff70 	bl	800056e <lcd_send_cmd>
    HAL_Delay(1);
 800068e:	2001      	movs	r0, #1
 8000690:	f000 f890 	bl	80007b4 <HAL_Delay>
    lcd_send_cmd(lcd, 0x01);  // Clear display
 8000694:	2101      	movs	r1, #1
 8000696:	6878      	ldr	r0, [r7, #4]
 8000698:	f7ff ff69 	bl	800056e <lcd_send_cmd>
    HAL_Delay(2);
 800069c:	2002      	movs	r0, #2
 800069e:	f000 f889 	bl	80007b4 <HAL_Delay>
    lcd_send_cmd(lcd, 0x06);  // Entry mode: cursor moves right
 80006a2:	2106      	movs	r1, #6
 80006a4:	6878      	ldr	r0, [r7, #4]
 80006a6:	f7ff ff62 	bl	800056e <lcd_send_cmd>
    HAL_Delay(1);
 80006aa:	2001      	movs	r0, #1
 80006ac:	f000 f882 	bl	80007b4 <HAL_Delay>
    lcd_send_cmd(lcd, 0x0C);  // Display on, cursor off, blink off
 80006b0:	210c      	movs	r1, #12
 80006b2:	6878      	ldr	r0, [r7, #4]
 80006b4:	f7ff ff5b 	bl	800056e <lcd_send_cmd>
}
 80006b8:	bf00      	nop
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}

080006c0 <lcd_puts>:
 * @param  lcd: Pointer to the LCD handle
 * @param  str: Null-terminated string to display
 * @retval None
 */
void lcd_puts(I2C_LCD_HandleTypeDef *lcd, char *str)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
 80006c8:	6039      	str	r1, [r7, #0]
    while (*str) lcd_send_data(lcd, *str++);  // Send each character in the string
 80006ca:	e007      	b.n	80006dc <lcd_puts+0x1c>
 80006cc:	683b      	ldr	r3, [r7, #0]
 80006ce:	1c5a      	adds	r2, r3, #1
 80006d0:	603a      	str	r2, [r7, #0]
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	4619      	mov	r1, r3
 80006d6:	6878      	ldr	r0, [r7, #4]
 80006d8:	f7ff ff7a 	bl	80005d0 <lcd_send_data>
 80006dc:	683b      	ldr	r3, [r7, #0]
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d1f3      	bne.n	80006cc <lcd_puts+0xc>
}
 80006e4:	bf00      	nop
 80006e6:	bf00      	nop
 80006e8:	3708      	adds	r7, #8
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
	...

080006f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006f4:	4b08      	ldr	r3, [pc, #32]	@ (8000718 <HAL_Init+0x28>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a07      	ldr	r2, [pc, #28]	@ (8000718 <HAL_Init+0x28>)
 80006fa:	f043 0310 	orr.w	r3, r3, #16
 80006fe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000700:	2003      	movs	r0, #3
 8000702:	f000 f92b 	bl	800095c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000706:	200f      	movs	r0, #15
 8000708:	f000 f808 	bl	800071c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800070c:	f7ff fe30 	bl	8000370 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000710:	2300      	movs	r3, #0
}
 8000712:	4618      	mov	r0, r3
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40022000 	.word	0x40022000

0800071c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000724:	4b12      	ldr	r3, [pc, #72]	@ (8000770 <HAL_InitTick+0x54>)
 8000726:	681a      	ldr	r2, [r3, #0]
 8000728:	4b12      	ldr	r3, [pc, #72]	@ (8000774 <HAL_InitTick+0x58>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	4619      	mov	r1, r3
 800072e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000732:	fbb3 f3f1 	udiv	r3, r3, r1
 8000736:	fbb2 f3f3 	udiv	r3, r2, r3
 800073a:	4618      	mov	r0, r3
 800073c:	f000 f935 	bl	80009aa <HAL_SYSTICK_Config>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000746:	2301      	movs	r3, #1
 8000748:	e00e      	b.n	8000768 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	2b0f      	cmp	r3, #15
 800074e:	d80a      	bhi.n	8000766 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000750:	2200      	movs	r2, #0
 8000752:	6879      	ldr	r1, [r7, #4]
 8000754:	f04f 30ff 	mov.w	r0, #4294967295
 8000758:	f000 f90b 	bl	8000972 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800075c:	4a06      	ldr	r2, [pc, #24]	@ (8000778 <HAL_InitTick+0x5c>)
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000762:	2300      	movs	r3, #0
 8000764:	e000      	b.n	8000768 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000766:	2301      	movs	r3, #1
}
 8000768:	4618      	mov	r0, r3
 800076a:	3708      	adds	r7, #8
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	20000000 	.word	0x20000000
 8000774:	20000008 	.word	0x20000008
 8000778:	20000004 	.word	0x20000004

0800077c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000780:	4b05      	ldr	r3, [pc, #20]	@ (8000798 <HAL_IncTick+0x1c>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	461a      	mov	r2, r3
 8000786:	4b05      	ldr	r3, [pc, #20]	@ (800079c <HAL_IncTick+0x20>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	4413      	add	r3, r2
 800078c:	4a03      	ldr	r2, [pc, #12]	@ (800079c <HAL_IncTick+0x20>)
 800078e:	6013      	str	r3, [r2, #0]
}
 8000790:	bf00      	nop
 8000792:	46bd      	mov	sp, r7
 8000794:	bc80      	pop	{r7}
 8000796:	4770      	bx	lr
 8000798:	20000008 	.word	0x20000008
 800079c:	2000011c 	.word	0x2000011c

080007a0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  return uwTick;
 80007a4:	4b02      	ldr	r3, [pc, #8]	@ (80007b0 <HAL_GetTick+0x10>)
 80007a6:	681b      	ldr	r3, [r3, #0]
}
 80007a8:	4618      	mov	r0, r3
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bc80      	pop	{r7}
 80007ae:	4770      	bx	lr
 80007b0:	2000011c 	.word	0x2000011c

080007b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b084      	sub	sp, #16
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007bc:	f7ff fff0 	bl	80007a0 <HAL_GetTick>
 80007c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007cc:	d005      	beq.n	80007da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007ce:	4b0a      	ldr	r3, [pc, #40]	@ (80007f8 <HAL_Delay+0x44>)
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	461a      	mov	r2, r3
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	4413      	add	r3, r2
 80007d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007da:	bf00      	nop
 80007dc:	f7ff ffe0 	bl	80007a0 <HAL_GetTick>
 80007e0:	4602      	mov	r2, r0
 80007e2:	68bb      	ldr	r3, [r7, #8]
 80007e4:	1ad3      	subs	r3, r2, r3
 80007e6:	68fa      	ldr	r2, [r7, #12]
 80007e8:	429a      	cmp	r2, r3
 80007ea:	d8f7      	bhi.n	80007dc <HAL_Delay+0x28>
  {
  }
}
 80007ec:	bf00      	nop
 80007ee:	bf00      	nop
 80007f0:	3710      	adds	r7, #16
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	20000008 	.word	0x20000008

080007fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b085      	sub	sp, #20
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	f003 0307 	and.w	r3, r3, #7
 800080a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800080c:	4b0c      	ldr	r3, [pc, #48]	@ (8000840 <__NVIC_SetPriorityGrouping+0x44>)
 800080e:	68db      	ldr	r3, [r3, #12]
 8000810:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000812:	68ba      	ldr	r2, [r7, #8]
 8000814:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000818:	4013      	ands	r3, r2
 800081a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000824:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000828:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800082c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800082e:	4a04      	ldr	r2, [pc, #16]	@ (8000840 <__NVIC_SetPriorityGrouping+0x44>)
 8000830:	68bb      	ldr	r3, [r7, #8]
 8000832:	60d3      	str	r3, [r2, #12]
}
 8000834:	bf00      	nop
 8000836:	3714      	adds	r7, #20
 8000838:	46bd      	mov	sp, r7
 800083a:	bc80      	pop	{r7}
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	e000ed00 	.word	0xe000ed00

08000844 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000848:	4b04      	ldr	r3, [pc, #16]	@ (800085c <__NVIC_GetPriorityGrouping+0x18>)
 800084a:	68db      	ldr	r3, [r3, #12]
 800084c:	0a1b      	lsrs	r3, r3, #8
 800084e:	f003 0307 	and.w	r3, r3, #7
}
 8000852:	4618      	mov	r0, r3
 8000854:	46bd      	mov	sp, r7
 8000856:	bc80      	pop	{r7}
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	e000ed00 	.word	0xe000ed00

08000860 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000860:	b480      	push	{r7}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
 8000866:	4603      	mov	r3, r0
 8000868:	6039      	str	r1, [r7, #0]
 800086a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800086c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000870:	2b00      	cmp	r3, #0
 8000872:	db0a      	blt.n	800088a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	b2da      	uxtb	r2, r3
 8000878:	490c      	ldr	r1, [pc, #48]	@ (80008ac <__NVIC_SetPriority+0x4c>)
 800087a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800087e:	0112      	lsls	r2, r2, #4
 8000880:	b2d2      	uxtb	r2, r2
 8000882:	440b      	add	r3, r1
 8000884:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000888:	e00a      	b.n	80008a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	b2da      	uxtb	r2, r3
 800088e:	4908      	ldr	r1, [pc, #32]	@ (80008b0 <__NVIC_SetPriority+0x50>)
 8000890:	79fb      	ldrb	r3, [r7, #7]
 8000892:	f003 030f 	and.w	r3, r3, #15
 8000896:	3b04      	subs	r3, #4
 8000898:	0112      	lsls	r2, r2, #4
 800089a:	b2d2      	uxtb	r2, r2
 800089c:	440b      	add	r3, r1
 800089e:	761a      	strb	r2, [r3, #24]
}
 80008a0:	bf00      	nop
 80008a2:	370c      	adds	r7, #12
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bc80      	pop	{r7}
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	e000e100 	.word	0xe000e100
 80008b0:	e000ed00 	.word	0xe000ed00

080008b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b089      	sub	sp, #36	@ 0x24
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	60f8      	str	r0, [r7, #12]
 80008bc:	60b9      	str	r1, [r7, #8]
 80008be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	f003 0307 	and.w	r3, r3, #7
 80008c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008c8:	69fb      	ldr	r3, [r7, #28]
 80008ca:	f1c3 0307 	rsb	r3, r3, #7
 80008ce:	2b04      	cmp	r3, #4
 80008d0:	bf28      	it	cs
 80008d2:	2304      	movcs	r3, #4
 80008d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008d6:	69fb      	ldr	r3, [r7, #28]
 80008d8:	3304      	adds	r3, #4
 80008da:	2b06      	cmp	r3, #6
 80008dc:	d902      	bls.n	80008e4 <NVIC_EncodePriority+0x30>
 80008de:	69fb      	ldr	r3, [r7, #28]
 80008e0:	3b03      	subs	r3, #3
 80008e2:	e000      	b.n	80008e6 <NVIC_EncodePriority+0x32>
 80008e4:	2300      	movs	r3, #0
 80008e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008e8:	f04f 32ff 	mov.w	r2, #4294967295
 80008ec:	69bb      	ldr	r3, [r7, #24]
 80008ee:	fa02 f303 	lsl.w	r3, r2, r3
 80008f2:	43da      	mvns	r2, r3
 80008f4:	68bb      	ldr	r3, [r7, #8]
 80008f6:	401a      	ands	r2, r3
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008fc:	f04f 31ff 	mov.w	r1, #4294967295
 8000900:	697b      	ldr	r3, [r7, #20]
 8000902:	fa01 f303 	lsl.w	r3, r1, r3
 8000906:	43d9      	mvns	r1, r3
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800090c:	4313      	orrs	r3, r2
         );
}
 800090e:	4618      	mov	r0, r3
 8000910:	3724      	adds	r7, #36	@ 0x24
 8000912:	46bd      	mov	sp, r7
 8000914:	bc80      	pop	{r7}
 8000916:	4770      	bx	lr

08000918 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	3b01      	subs	r3, #1
 8000924:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000928:	d301      	bcc.n	800092e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800092a:	2301      	movs	r3, #1
 800092c:	e00f      	b.n	800094e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800092e:	4a0a      	ldr	r2, [pc, #40]	@ (8000958 <SysTick_Config+0x40>)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	3b01      	subs	r3, #1
 8000934:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000936:	210f      	movs	r1, #15
 8000938:	f04f 30ff 	mov.w	r0, #4294967295
 800093c:	f7ff ff90 	bl	8000860 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000940:	4b05      	ldr	r3, [pc, #20]	@ (8000958 <SysTick_Config+0x40>)
 8000942:	2200      	movs	r2, #0
 8000944:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000946:	4b04      	ldr	r3, [pc, #16]	@ (8000958 <SysTick_Config+0x40>)
 8000948:	2207      	movs	r2, #7
 800094a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800094c:	2300      	movs	r3, #0
}
 800094e:	4618      	mov	r0, r3
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	e000e010 	.word	0xe000e010

0800095c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000964:	6878      	ldr	r0, [r7, #4]
 8000966:	f7ff ff49 	bl	80007fc <__NVIC_SetPriorityGrouping>
}
 800096a:	bf00      	nop
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}

08000972 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000972:	b580      	push	{r7, lr}
 8000974:	b086      	sub	sp, #24
 8000976:	af00      	add	r7, sp, #0
 8000978:	4603      	mov	r3, r0
 800097a:	60b9      	str	r1, [r7, #8]
 800097c:	607a      	str	r2, [r7, #4]
 800097e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000980:	2300      	movs	r3, #0
 8000982:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000984:	f7ff ff5e 	bl	8000844 <__NVIC_GetPriorityGrouping>
 8000988:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800098a:	687a      	ldr	r2, [r7, #4]
 800098c:	68b9      	ldr	r1, [r7, #8]
 800098e:	6978      	ldr	r0, [r7, #20]
 8000990:	f7ff ff90 	bl	80008b4 <NVIC_EncodePriority>
 8000994:	4602      	mov	r2, r0
 8000996:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800099a:	4611      	mov	r1, r2
 800099c:	4618      	mov	r0, r3
 800099e:	f7ff ff5f 	bl	8000860 <__NVIC_SetPriority>
}
 80009a2:	bf00      	nop
 80009a4:	3718      	adds	r7, #24
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}

080009aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009aa:	b580      	push	{r7, lr}
 80009ac:	b082      	sub	sp, #8
 80009ae:	af00      	add	r7, sp, #0
 80009b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009b2:	6878      	ldr	r0, [r7, #4]
 80009b4:	f7ff ffb0 	bl	8000918 <SysTick_Config>
 80009b8:	4603      	mov	r3, r0
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}

080009c2 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80009c2:	b580      	push	{r7, lr}
 80009c4:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80009c6:	f001 fb81 	bl	80020cc <HAL_SYSTICK_Callback>
}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
	...

080009d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b08b      	sub	sp, #44	@ 0x2c
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
 80009d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009da:	2300      	movs	r3, #0
 80009dc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80009de:	2300      	movs	r3, #0
 80009e0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009e2:	e169      	b.n	8000cb8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80009e4:	2201      	movs	r2, #1
 80009e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009e8:	fa02 f303 	lsl.w	r3, r2, r3
 80009ec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	69fa      	ldr	r2, [r7, #28]
 80009f4:	4013      	ands	r3, r2
 80009f6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80009f8:	69ba      	ldr	r2, [r7, #24]
 80009fa:	69fb      	ldr	r3, [r7, #28]
 80009fc:	429a      	cmp	r2, r3
 80009fe:	f040 8158 	bne.w	8000cb2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	685b      	ldr	r3, [r3, #4]
 8000a06:	4a9a      	ldr	r2, [pc, #616]	@ (8000c70 <HAL_GPIO_Init+0x2a0>)
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	d05e      	beq.n	8000aca <HAL_GPIO_Init+0xfa>
 8000a0c:	4a98      	ldr	r2, [pc, #608]	@ (8000c70 <HAL_GPIO_Init+0x2a0>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d875      	bhi.n	8000afe <HAL_GPIO_Init+0x12e>
 8000a12:	4a98      	ldr	r2, [pc, #608]	@ (8000c74 <HAL_GPIO_Init+0x2a4>)
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d058      	beq.n	8000aca <HAL_GPIO_Init+0xfa>
 8000a18:	4a96      	ldr	r2, [pc, #600]	@ (8000c74 <HAL_GPIO_Init+0x2a4>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d86f      	bhi.n	8000afe <HAL_GPIO_Init+0x12e>
 8000a1e:	4a96      	ldr	r2, [pc, #600]	@ (8000c78 <HAL_GPIO_Init+0x2a8>)
 8000a20:	4293      	cmp	r3, r2
 8000a22:	d052      	beq.n	8000aca <HAL_GPIO_Init+0xfa>
 8000a24:	4a94      	ldr	r2, [pc, #592]	@ (8000c78 <HAL_GPIO_Init+0x2a8>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d869      	bhi.n	8000afe <HAL_GPIO_Init+0x12e>
 8000a2a:	4a94      	ldr	r2, [pc, #592]	@ (8000c7c <HAL_GPIO_Init+0x2ac>)
 8000a2c:	4293      	cmp	r3, r2
 8000a2e:	d04c      	beq.n	8000aca <HAL_GPIO_Init+0xfa>
 8000a30:	4a92      	ldr	r2, [pc, #584]	@ (8000c7c <HAL_GPIO_Init+0x2ac>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d863      	bhi.n	8000afe <HAL_GPIO_Init+0x12e>
 8000a36:	4a92      	ldr	r2, [pc, #584]	@ (8000c80 <HAL_GPIO_Init+0x2b0>)
 8000a38:	4293      	cmp	r3, r2
 8000a3a:	d046      	beq.n	8000aca <HAL_GPIO_Init+0xfa>
 8000a3c:	4a90      	ldr	r2, [pc, #576]	@ (8000c80 <HAL_GPIO_Init+0x2b0>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d85d      	bhi.n	8000afe <HAL_GPIO_Init+0x12e>
 8000a42:	2b12      	cmp	r3, #18
 8000a44:	d82a      	bhi.n	8000a9c <HAL_GPIO_Init+0xcc>
 8000a46:	2b12      	cmp	r3, #18
 8000a48:	d859      	bhi.n	8000afe <HAL_GPIO_Init+0x12e>
 8000a4a:	a201      	add	r2, pc, #4	@ (adr r2, 8000a50 <HAL_GPIO_Init+0x80>)
 8000a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a50:	08000acb 	.word	0x08000acb
 8000a54:	08000aa5 	.word	0x08000aa5
 8000a58:	08000ab7 	.word	0x08000ab7
 8000a5c:	08000af9 	.word	0x08000af9
 8000a60:	08000aff 	.word	0x08000aff
 8000a64:	08000aff 	.word	0x08000aff
 8000a68:	08000aff 	.word	0x08000aff
 8000a6c:	08000aff 	.word	0x08000aff
 8000a70:	08000aff 	.word	0x08000aff
 8000a74:	08000aff 	.word	0x08000aff
 8000a78:	08000aff 	.word	0x08000aff
 8000a7c:	08000aff 	.word	0x08000aff
 8000a80:	08000aff 	.word	0x08000aff
 8000a84:	08000aff 	.word	0x08000aff
 8000a88:	08000aff 	.word	0x08000aff
 8000a8c:	08000aff 	.word	0x08000aff
 8000a90:	08000aff 	.word	0x08000aff
 8000a94:	08000aad 	.word	0x08000aad
 8000a98:	08000ac1 	.word	0x08000ac1
 8000a9c:	4a79      	ldr	r2, [pc, #484]	@ (8000c84 <HAL_GPIO_Init+0x2b4>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d013      	beq.n	8000aca <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000aa2:	e02c      	b.n	8000afe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	68db      	ldr	r3, [r3, #12]
 8000aa8:	623b      	str	r3, [r7, #32]
          break;
 8000aaa:	e029      	b.n	8000b00 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	68db      	ldr	r3, [r3, #12]
 8000ab0:	3304      	adds	r3, #4
 8000ab2:	623b      	str	r3, [r7, #32]
          break;
 8000ab4:	e024      	b.n	8000b00 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	68db      	ldr	r3, [r3, #12]
 8000aba:	3308      	adds	r3, #8
 8000abc:	623b      	str	r3, [r7, #32]
          break;
 8000abe:	e01f      	b.n	8000b00 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	68db      	ldr	r3, [r3, #12]
 8000ac4:	330c      	adds	r3, #12
 8000ac6:	623b      	str	r3, [r7, #32]
          break;
 8000ac8:	e01a      	b.n	8000b00 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	689b      	ldr	r3, [r3, #8]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d102      	bne.n	8000ad8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ad2:	2304      	movs	r3, #4
 8000ad4:	623b      	str	r3, [r7, #32]
          break;
 8000ad6:	e013      	b.n	8000b00 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	689b      	ldr	r3, [r3, #8]
 8000adc:	2b01      	cmp	r3, #1
 8000ade:	d105      	bne.n	8000aec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ae0:	2308      	movs	r3, #8
 8000ae2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	69fa      	ldr	r2, [r7, #28]
 8000ae8:	611a      	str	r2, [r3, #16]
          break;
 8000aea:	e009      	b.n	8000b00 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000aec:	2308      	movs	r3, #8
 8000aee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	69fa      	ldr	r2, [r7, #28]
 8000af4:	615a      	str	r2, [r3, #20]
          break;
 8000af6:	e003      	b.n	8000b00 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000af8:	2300      	movs	r3, #0
 8000afa:	623b      	str	r3, [r7, #32]
          break;
 8000afc:	e000      	b.n	8000b00 <HAL_GPIO_Init+0x130>
          break;
 8000afe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b00:	69bb      	ldr	r3, [r7, #24]
 8000b02:	2bff      	cmp	r3, #255	@ 0xff
 8000b04:	d801      	bhi.n	8000b0a <HAL_GPIO_Init+0x13a>
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	e001      	b.n	8000b0e <HAL_GPIO_Init+0x13e>
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	3304      	adds	r3, #4
 8000b0e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b10:	69bb      	ldr	r3, [r7, #24]
 8000b12:	2bff      	cmp	r3, #255	@ 0xff
 8000b14:	d802      	bhi.n	8000b1c <HAL_GPIO_Init+0x14c>
 8000b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b18:	009b      	lsls	r3, r3, #2
 8000b1a:	e002      	b.n	8000b22 <HAL_GPIO_Init+0x152>
 8000b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b1e:	3b08      	subs	r3, #8
 8000b20:	009b      	lsls	r3, r3, #2
 8000b22:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	681a      	ldr	r2, [r3, #0]
 8000b28:	210f      	movs	r1, #15
 8000b2a:	693b      	ldr	r3, [r7, #16]
 8000b2c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b30:	43db      	mvns	r3, r3
 8000b32:	401a      	ands	r2, r3
 8000b34:	6a39      	ldr	r1, [r7, #32]
 8000b36:	693b      	ldr	r3, [r7, #16]
 8000b38:	fa01 f303 	lsl.w	r3, r1, r3
 8000b3c:	431a      	orrs	r2, r3
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	f000 80b1 	beq.w	8000cb2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b50:	4b4d      	ldr	r3, [pc, #308]	@ (8000c88 <HAL_GPIO_Init+0x2b8>)
 8000b52:	699b      	ldr	r3, [r3, #24]
 8000b54:	4a4c      	ldr	r2, [pc, #304]	@ (8000c88 <HAL_GPIO_Init+0x2b8>)
 8000b56:	f043 0301 	orr.w	r3, r3, #1
 8000b5a:	6193      	str	r3, [r2, #24]
 8000b5c:	4b4a      	ldr	r3, [pc, #296]	@ (8000c88 <HAL_GPIO_Init+0x2b8>)
 8000b5e:	699b      	ldr	r3, [r3, #24]
 8000b60:	f003 0301 	and.w	r3, r3, #1
 8000b64:	60bb      	str	r3, [r7, #8]
 8000b66:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b68:	4a48      	ldr	r2, [pc, #288]	@ (8000c8c <HAL_GPIO_Init+0x2bc>)
 8000b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b6c:	089b      	lsrs	r3, r3, #2
 8000b6e:	3302      	adds	r3, #2
 8000b70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b74:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b78:	f003 0303 	and.w	r3, r3, #3
 8000b7c:	009b      	lsls	r3, r3, #2
 8000b7e:	220f      	movs	r2, #15
 8000b80:	fa02 f303 	lsl.w	r3, r2, r3
 8000b84:	43db      	mvns	r3, r3
 8000b86:	68fa      	ldr	r2, [r7, #12]
 8000b88:	4013      	ands	r3, r2
 8000b8a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	4a40      	ldr	r2, [pc, #256]	@ (8000c90 <HAL_GPIO_Init+0x2c0>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d013      	beq.n	8000bbc <HAL_GPIO_Init+0x1ec>
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	4a3f      	ldr	r2, [pc, #252]	@ (8000c94 <HAL_GPIO_Init+0x2c4>)
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	d00d      	beq.n	8000bb8 <HAL_GPIO_Init+0x1e8>
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	4a3e      	ldr	r2, [pc, #248]	@ (8000c98 <HAL_GPIO_Init+0x2c8>)
 8000ba0:	4293      	cmp	r3, r2
 8000ba2:	d007      	beq.n	8000bb4 <HAL_GPIO_Init+0x1e4>
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	4a3d      	ldr	r2, [pc, #244]	@ (8000c9c <HAL_GPIO_Init+0x2cc>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d101      	bne.n	8000bb0 <HAL_GPIO_Init+0x1e0>
 8000bac:	2303      	movs	r3, #3
 8000bae:	e006      	b.n	8000bbe <HAL_GPIO_Init+0x1ee>
 8000bb0:	2304      	movs	r3, #4
 8000bb2:	e004      	b.n	8000bbe <HAL_GPIO_Init+0x1ee>
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	e002      	b.n	8000bbe <HAL_GPIO_Init+0x1ee>
 8000bb8:	2301      	movs	r3, #1
 8000bba:	e000      	b.n	8000bbe <HAL_GPIO_Init+0x1ee>
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000bc0:	f002 0203 	and.w	r2, r2, #3
 8000bc4:	0092      	lsls	r2, r2, #2
 8000bc6:	4093      	lsls	r3, r2
 8000bc8:	68fa      	ldr	r2, [r7, #12]
 8000bca:	4313      	orrs	r3, r2
 8000bcc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000bce:	492f      	ldr	r1, [pc, #188]	@ (8000c8c <HAL_GPIO_Init+0x2bc>)
 8000bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bd2:	089b      	lsrs	r3, r3, #2
 8000bd4:	3302      	adds	r3, #2
 8000bd6:	68fa      	ldr	r2, [r7, #12]
 8000bd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d006      	beq.n	8000bf6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000be8:	4b2d      	ldr	r3, [pc, #180]	@ (8000ca0 <HAL_GPIO_Init+0x2d0>)
 8000bea:	689a      	ldr	r2, [r3, #8]
 8000bec:	492c      	ldr	r1, [pc, #176]	@ (8000ca0 <HAL_GPIO_Init+0x2d0>)
 8000bee:	69bb      	ldr	r3, [r7, #24]
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	608b      	str	r3, [r1, #8]
 8000bf4:	e006      	b.n	8000c04 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000bf6:	4b2a      	ldr	r3, [pc, #168]	@ (8000ca0 <HAL_GPIO_Init+0x2d0>)
 8000bf8:	689a      	ldr	r2, [r3, #8]
 8000bfa:	69bb      	ldr	r3, [r7, #24]
 8000bfc:	43db      	mvns	r3, r3
 8000bfe:	4928      	ldr	r1, [pc, #160]	@ (8000ca0 <HAL_GPIO_Init+0x2d0>)
 8000c00:	4013      	ands	r3, r2
 8000c02:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d006      	beq.n	8000c1e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c10:	4b23      	ldr	r3, [pc, #140]	@ (8000ca0 <HAL_GPIO_Init+0x2d0>)
 8000c12:	68da      	ldr	r2, [r3, #12]
 8000c14:	4922      	ldr	r1, [pc, #136]	@ (8000ca0 <HAL_GPIO_Init+0x2d0>)
 8000c16:	69bb      	ldr	r3, [r7, #24]
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	60cb      	str	r3, [r1, #12]
 8000c1c:	e006      	b.n	8000c2c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c1e:	4b20      	ldr	r3, [pc, #128]	@ (8000ca0 <HAL_GPIO_Init+0x2d0>)
 8000c20:	68da      	ldr	r2, [r3, #12]
 8000c22:	69bb      	ldr	r3, [r7, #24]
 8000c24:	43db      	mvns	r3, r3
 8000c26:	491e      	ldr	r1, [pc, #120]	@ (8000ca0 <HAL_GPIO_Init+0x2d0>)
 8000c28:	4013      	ands	r3, r2
 8000c2a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d006      	beq.n	8000c46 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c38:	4b19      	ldr	r3, [pc, #100]	@ (8000ca0 <HAL_GPIO_Init+0x2d0>)
 8000c3a:	685a      	ldr	r2, [r3, #4]
 8000c3c:	4918      	ldr	r1, [pc, #96]	@ (8000ca0 <HAL_GPIO_Init+0x2d0>)
 8000c3e:	69bb      	ldr	r3, [r7, #24]
 8000c40:	4313      	orrs	r3, r2
 8000c42:	604b      	str	r3, [r1, #4]
 8000c44:	e006      	b.n	8000c54 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c46:	4b16      	ldr	r3, [pc, #88]	@ (8000ca0 <HAL_GPIO_Init+0x2d0>)
 8000c48:	685a      	ldr	r2, [r3, #4]
 8000c4a:	69bb      	ldr	r3, [r7, #24]
 8000c4c:	43db      	mvns	r3, r3
 8000c4e:	4914      	ldr	r1, [pc, #80]	@ (8000ca0 <HAL_GPIO_Init+0x2d0>)
 8000c50:	4013      	ands	r3, r2
 8000c52:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d021      	beq.n	8000ca4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c60:	4b0f      	ldr	r3, [pc, #60]	@ (8000ca0 <HAL_GPIO_Init+0x2d0>)
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	490e      	ldr	r1, [pc, #56]	@ (8000ca0 <HAL_GPIO_Init+0x2d0>)
 8000c66:	69bb      	ldr	r3, [r7, #24]
 8000c68:	4313      	orrs	r3, r2
 8000c6a:	600b      	str	r3, [r1, #0]
 8000c6c:	e021      	b.n	8000cb2 <HAL_GPIO_Init+0x2e2>
 8000c6e:	bf00      	nop
 8000c70:	10320000 	.word	0x10320000
 8000c74:	10310000 	.word	0x10310000
 8000c78:	10220000 	.word	0x10220000
 8000c7c:	10210000 	.word	0x10210000
 8000c80:	10120000 	.word	0x10120000
 8000c84:	10110000 	.word	0x10110000
 8000c88:	40021000 	.word	0x40021000
 8000c8c:	40010000 	.word	0x40010000
 8000c90:	40010800 	.word	0x40010800
 8000c94:	40010c00 	.word	0x40010c00
 8000c98:	40011000 	.word	0x40011000
 8000c9c:	40011400 	.word	0x40011400
 8000ca0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ca4:	4b0b      	ldr	r3, [pc, #44]	@ (8000cd4 <HAL_GPIO_Init+0x304>)
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	69bb      	ldr	r3, [r7, #24]
 8000caa:	43db      	mvns	r3, r3
 8000cac:	4909      	ldr	r1, [pc, #36]	@ (8000cd4 <HAL_GPIO_Init+0x304>)
 8000cae:	4013      	ands	r3, r2
 8000cb0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cbe:	fa22 f303 	lsr.w	r3, r2, r3
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f47f ae8e 	bne.w	80009e4 <HAL_GPIO_Init+0x14>
  }
}
 8000cc8:	bf00      	nop
 8000cca:	bf00      	nop
 8000ccc:	372c      	adds	r7, #44	@ 0x2c
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bc80      	pop	{r7}
 8000cd2:	4770      	bx	lr
 8000cd4:	40010400 	.word	0x40010400

08000cd8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b085      	sub	sp, #20
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
 8000ce0:	460b      	mov	r3, r1
 8000ce2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	689a      	ldr	r2, [r3, #8]
 8000ce8:	887b      	ldrh	r3, [r7, #2]
 8000cea:	4013      	ands	r3, r2
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d002      	beq.n	8000cf6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	73fb      	strb	r3, [r7, #15]
 8000cf4:	e001      	b.n	8000cfa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000cfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3714      	adds	r7, #20
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bc80      	pop	{r7}
 8000d04:	4770      	bx	lr

08000d06 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d06:	b480      	push	{r7}
 8000d08:	b083      	sub	sp, #12
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	6078      	str	r0, [r7, #4]
 8000d0e:	460b      	mov	r3, r1
 8000d10:	807b      	strh	r3, [r7, #2]
 8000d12:	4613      	mov	r3, r2
 8000d14:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d16:	787b      	ldrb	r3, [r7, #1]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d003      	beq.n	8000d24 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d1c:	887a      	ldrh	r2, [r7, #2]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000d22:	e003      	b.n	8000d2c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d24:	887b      	ldrh	r3, [r7, #2]
 8000d26:	041a      	lsls	r2, r3, #16
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	611a      	str	r2, [r3, #16]
}
 8000d2c:	bf00      	nop
 8000d2e:	370c      	adds	r7, #12
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bc80      	pop	{r7}
 8000d34:	4770      	bx	lr
	...

08000d38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d101      	bne.n	8000d4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000d46:	2301      	movs	r3, #1
 8000d48:	e12b      	b.n	8000fa2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d106      	bne.n	8000d64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	2200      	movs	r2, #0
 8000d5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000d5e:	6878      	ldr	r0, [r7, #4]
 8000d60:	f7ff fb38 	bl	80003d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2224      	movs	r2, #36	@ 0x24
 8000d68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f022 0201 	bic.w	r2, r2, #1
 8000d7a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000d8a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000d9a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000d9c:	f001 f832 	bl	8001e04 <HAL_RCC_GetPCLK1Freq>
 8000da0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	4a81      	ldr	r2, [pc, #516]	@ (8000fac <HAL_I2C_Init+0x274>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d807      	bhi.n	8000dbc <HAL_I2C_Init+0x84>
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	4a80      	ldr	r2, [pc, #512]	@ (8000fb0 <HAL_I2C_Init+0x278>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	bf94      	ite	ls
 8000db4:	2301      	movls	r3, #1
 8000db6:	2300      	movhi	r3, #0
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	e006      	b.n	8000dca <HAL_I2C_Init+0x92>
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	4a7d      	ldr	r2, [pc, #500]	@ (8000fb4 <HAL_I2C_Init+0x27c>)
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	bf94      	ite	ls
 8000dc4:	2301      	movls	r3, #1
 8000dc6:	2300      	movhi	r3, #0
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e0e7      	b.n	8000fa2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	4a78      	ldr	r2, [pc, #480]	@ (8000fb8 <HAL_I2C_Init+0x280>)
 8000dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8000dda:	0c9b      	lsrs	r3, r3, #18
 8000ddc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	68ba      	ldr	r2, [r7, #8]
 8000dee:	430a      	orrs	r2, r1
 8000df0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	6a1b      	ldr	r3, [r3, #32]
 8000df8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	4a6a      	ldr	r2, [pc, #424]	@ (8000fac <HAL_I2C_Init+0x274>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d802      	bhi.n	8000e0c <HAL_I2C_Init+0xd4>
 8000e06:	68bb      	ldr	r3, [r7, #8]
 8000e08:	3301      	adds	r3, #1
 8000e0a:	e009      	b.n	8000e20 <HAL_I2C_Init+0xe8>
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000e12:	fb02 f303 	mul.w	r3, r2, r3
 8000e16:	4a69      	ldr	r2, [pc, #420]	@ (8000fbc <HAL_I2C_Init+0x284>)
 8000e18:	fba2 2303 	umull	r2, r3, r2, r3
 8000e1c:	099b      	lsrs	r3, r3, #6
 8000e1e:	3301      	adds	r3, #1
 8000e20:	687a      	ldr	r2, [r7, #4]
 8000e22:	6812      	ldr	r2, [r2, #0]
 8000e24:	430b      	orrs	r3, r1
 8000e26:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	69db      	ldr	r3, [r3, #28]
 8000e2e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8000e32:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	495c      	ldr	r1, [pc, #368]	@ (8000fac <HAL_I2C_Init+0x274>)
 8000e3c:	428b      	cmp	r3, r1
 8000e3e:	d819      	bhi.n	8000e74 <HAL_I2C_Init+0x13c>
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	1e59      	subs	r1, r3, #1
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	005b      	lsls	r3, r3, #1
 8000e4a:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e4e:	1c59      	adds	r1, r3, #1
 8000e50:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8000e54:	400b      	ands	r3, r1
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d00a      	beq.n	8000e70 <HAL_I2C_Init+0x138>
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	1e59      	subs	r1, r3, #1
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e68:	3301      	adds	r3, #1
 8000e6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e6e:	e051      	b.n	8000f14 <HAL_I2C_Init+0x1dc>
 8000e70:	2304      	movs	r3, #4
 8000e72:	e04f      	b.n	8000f14 <HAL_I2C_Init+0x1dc>
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	689b      	ldr	r3, [r3, #8]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d111      	bne.n	8000ea0 <HAL_I2C_Init+0x168>
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	1e58      	subs	r0, r3, #1
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6859      	ldr	r1, [r3, #4]
 8000e84:	460b      	mov	r3, r1
 8000e86:	005b      	lsls	r3, r3, #1
 8000e88:	440b      	add	r3, r1
 8000e8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e8e:	3301      	adds	r3, #1
 8000e90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	bf0c      	ite	eq
 8000e98:	2301      	moveq	r3, #1
 8000e9a:	2300      	movne	r3, #0
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	e012      	b.n	8000ec6 <HAL_I2C_Init+0x18e>
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	1e58      	subs	r0, r3, #1
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6859      	ldr	r1, [r3, #4]
 8000ea8:	460b      	mov	r3, r1
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	440b      	add	r3, r1
 8000eae:	0099      	lsls	r1, r3, #2
 8000eb0:	440b      	add	r3, r1
 8000eb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	bf0c      	ite	eq
 8000ec0:	2301      	moveq	r3, #1
 8000ec2:	2300      	movne	r3, #0
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <HAL_I2C_Init+0x196>
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e022      	b.n	8000f14 <HAL_I2C_Init+0x1dc>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	689b      	ldr	r3, [r3, #8]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d10e      	bne.n	8000ef4 <HAL_I2C_Init+0x1bc>
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	1e58      	subs	r0, r3, #1
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6859      	ldr	r1, [r3, #4]
 8000ede:	460b      	mov	r3, r1
 8000ee0:	005b      	lsls	r3, r3, #1
 8000ee2:	440b      	add	r3, r1
 8000ee4:	fbb0 f3f3 	udiv	r3, r0, r3
 8000ee8:	3301      	adds	r3, #1
 8000eea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000eee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000ef2:	e00f      	b.n	8000f14 <HAL_I2C_Init+0x1dc>
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	1e58      	subs	r0, r3, #1
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6859      	ldr	r1, [r3, #4]
 8000efc:	460b      	mov	r3, r1
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	440b      	add	r3, r1
 8000f02:	0099      	lsls	r1, r3, #2
 8000f04:	440b      	add	r3, r1
 8000f06:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f10:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000f14:	6879      	ldr	r1, [r7, #4]
 8000f16:	6809      	ldr	r1, [r1, #0]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	69da      	ldr	r2, [r3, #28]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6a1b      	ldr	r3, [r3, #32]
 8000f2e:	431a      	orrs	r2, r3
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	430a      	orrs	r2, r1
 8000f36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	689b      	ldr	r3, [r3, #8]
 8000f3e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8000f42:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000f46:	687a      	ldr	r2, [r7, #4]
 8000f48:	6911      	ldr	r1, [r2, #16]
 8000f4a:	687a      	ldr	r2, [r7, #4]
 8000f4c:	68d2      	ldr	r2, [r2, #12]
 8000f4e:	4311      	orrs	r1, r2
 8000f50:	687a      	ldr	r2, [r7, #4]
 8000f52:	6812      	ldr	r2, [r2, #0]
 8000f54:	430b      	orrs	r3, r1
 8000f56:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	68db      	ldr	r3, [r3, #12]
 8000f5e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	695a      	ldr	r2, [r3, #20]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	699b      	ldr	r3, [r3, #24]
 8000f6a:	431a      	orrs	r2, r3
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	430a      	orrs	r2, r1
 8000f72:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f042 0201 	orr.w	r2, r2, #1
 8000f82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2200      	movs	r2, #0
 8000f88:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2220      	movs	r2, #32
 8000f8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2200      	movs	r2, #0
 8000f96:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8000fa0:	2300      	movs	r3, #0
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3710      	adds	r7, #16
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	000186a0 	.word	0x000186a0
 8000fb0:	001e847f 	.word	0x001e847f
 8000fb4:	003d08ff 	.word	0x003d08ff
 8000fb8:	431bde83 	.word	0x431bde83
 8000fbc:	10624dd3 	.word	0x10624dd3

08000fc0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b088      	sub	sp, #32
 8000fc4:	af02      	add	r7, sp, #8
 8000fc6:	60f8      	str	r0, [r7, #12]
 8000fc8:	607a      	str	r2, [r7, #4]
 8000fca:	461a      	mov	r2, r3
 8000fcc:	460b      	mov	r3, r1
 8000fce:	817b      	strh	r3, [r7, #10]
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8000fd4:	f7ff fbe4 	bl	80007a0 <HAL_GetTick>
 8000fd8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	2b20      	cmp	r3, #32
 8000fe4:	f040 80e0 	bne.w	80011a8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	9300      	str	r3, [sp, #0]
 8000fec:	2319      	movs	r3, #25
 8000fee:	2201      	movs	r2, #1
 8000ff0:	4970      	ldr	r1, [pc, #448]	@ (80011b4 <HAL_I2C_Master_Transmit+0x1f4>)
 8000ff2:	68f8      	ldr	r0, [r7, #12]
 8000ff4:	f000 f964 	bl	80012c0 <I2C_WaitOnFlagUntilTimeout>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8000ffe:	2302      	movs	r3, #2
 8001000:	e0d3      	b.n	80011aa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001008:	2b01      	cmp	r3, #1
 800100a:	d101      	bne.n	8001010 <HAL_I2C_Master_Transmit+0x50>
 800100c:	2302      	movs	r3, #2
 800100e:	e0cc      	b.n	80011aa <HAL_I2C_Master_Transmit+0x1ea>
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	2201      	movs	r2, #1
 8001014:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f003 0301 	and.w	r3, r3, #1
 8001022:	2b01      	cmp	r3, #1
 8001024:	d007      	beq.n	8001036 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f042 0201 	orr.w	r2, r2, #1
 8001034:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001044:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	2221      	movs	r2, #33	@ 0x21
 800104a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	2210      	movs	r2, #16
 8001052:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	2200      	movs	r2, #0
 800105a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	687a      	ldr	r2, [r7, #4]
 8001060:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	893a      	ldrh	r2, [r7, #8]
 8001066:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800106c:	b29a      	uxth	r2, r3
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	4a50      	ldr	r2, [pc, #320]	@ (80011b8 <HAL_I2C_Master_Transmit+0x1f8>)
 8001076:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001078:	8979      	ldrh	r1, [r7, #10]
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	6a3a      	ldr	r2, [r7, #32]
 800107e:	68f8      	ldr	r0, [r7, #12]
 8001080:	f000 f89c 	bl	80011bc <I2C_MasterRequestWrite>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800108a:	2301      	movs	r3, #1
 800108c:	e08d      	b.n	80011aa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800108e:	2300      	movs	r3, #0
 8001090:	613b      	str	r3, [r7, #16]
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	695b      	ldr	r3, [r3, #20]
 8001098:	613b      	str	r3, [r7, #16]
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	699b      	ldr	r3, [r3, #24]
 80010a0:	613b      	str	r3, [r7, #16]
 80010a2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80010a4:	e066      	b.n	8001174 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80010a6:	697a      	ldr	r2, [r7, #20]
 80010a8:	6a39      	ldr	r1, [r7, #32]
 80010aa:	68f8      	ldr	r0, [r7, #12]
 80010ac:	f000 fa22 	bl	80014f4 <I2C_WaitOnTXEFlagUntilTimeout>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d00d      	beq.n	80010d2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ba:	2b04      	cmp	r3, #4
 80010bc:	d107      	bne.n	80010ce <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80010cc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e06b      	b.n	80011aa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010d6:	781a      	ldrb	r2, [r3, #0]
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010e2:	1c5a      	adds	r2, r3, #1
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80010ec:	b29b      	uxth	r3, r3
 80010ee:	3b01      	subs	r3, #1
 80010f0:	b29a      	uxth	r2, r3
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80010fa:	3b01      	subs	r3, #1
 80010fc:	b29a      	uxth	r2, r3
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	695b      	ldr	r3, [r3, #20]
 8001108:	f003 0304 	and.w	r3, r3, #4
 800110c:	2b04      	cmp	r3, #4
 800110e:	d11b      	bne.n	8001148 <HAL_I2C_Master_Transmit+0x188>
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001114:	2b00      	cmp	r3, #0
 8001116:	d017      	beq.n	8001148 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800111c:	781a      	ldrb	r2, [r3, #0]
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001128:	1c5a      	adds	r2, r3, #1
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001132:	b29b      	uxth	r3, r3
 8001134:	3b01      	subs	r3, #1
 8001136:	b29a      	uxth	r2, r3
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001140:	3b01      	subs	r3, #1
 8001142:	b29a      	uxth	r2, r3
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001148:	697a      	ldr	r2, [r7, #20]
 800114a:	6a39      	ldr	r1, [r7, #32]
 800114c:	68f8      	ldr	r0, [r7, #12]
 800114e:	f000 fa19 	bl	8001584 <I2C_WaitOnBTFFlagUntilTimeout>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d00d      	beq.n	8001174 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800115c:	2b04      	cmp	r3, #4
 800115e:	d107      	bne.n	8001170 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800116e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001170:	2301      	movs	r3, #1
 8001172:	e01a      	b.n	80011aa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001178:	2b00      	cmp	r3, #0
 800117a:	d194      	bne.n	80010a6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800118a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	2220      	movs	r2, #32
 8001190:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	2200      	movs	r2, #0
 8001198:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	2200      	movs	r2, #0
 80011a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80011a4:	2300      	movs	r3, #0
 80011a6:	e000      	b.n	80011aa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80011a8:	2302      	movs	r3, #2
  }
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3718      	adds	r7, #24
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	00100002 	.word	0x00100002
 80011b8:	ffff0000 	.word	0xffff0000

080011bc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b088      	sub	sp, #32
 80011c0:	af02      	add	r7, sp, #8
 80011c2:	60f8      	str	r0, [r7, #12]
 80011c4:	607a      	str	r2, [r7, #4]
 80011c6:	603b      	str	r3, [r7, #0]
 80011c8:	460b      	mov	r3, r1
 80011ca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011d0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	2b08      	cmp	r3, #8
 80011d6:	d006      	beq.n	80011e6 <I2C_MasterRequestWrite+0x2a>
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d003      	beq.n	80011e6 <I2C_MasterRequestWrite+0x2a>
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80011e4:	d108      	bne.n	80011f8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	e00b      	b.n	8001210 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fc:	2b12      	cmp	r3, #18
 80011fe:	d107      	bne.n	8001210 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800120e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	9300      	str	r3, [sp, #0]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2200      	movs	r2, #0
 8001218:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800121c:	68f8      	ldr	r0, [r7, #12]
 800121e:	f000 f84f 	bl	80012c0 <I2C_WaitOnFlagUntilTimeout>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d00d      	beq.n	8001244 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001232:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001236:	d103      	bne.n	8001240 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800123e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001240:	2303      	movs	r3, #3
 8001242:	e035      	b.n	80012b0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	691b      	ldr	r3, [r3, #16]
 8001248:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800124c:	d108      	bne.n	8001260 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800124e:	897b      	ldrh	r3, [r7, #10]
 8001250:	b2db      	uxtb	r3, r3
 8001252:	461a      	mov	r2, r3
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800125c:	611a      	str	r2, [r3, #16]
 800125e:	e01b      	b.n	8001298 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001260:	897b      	ldrh	r3, [r7, #10]
 8001262:	11db      	asrs	r3, r3, #7
 8001264:	b2db      	uxtb	r3, r3
 8001266:	f003 0306 	and.w	r3, r3, #6
 800126a:	b2db      	uxtb	r3, r3
 800126c:	f063 030f 	orn	r3, r3, #15
 8001270:	b2da      	uxtb	r2, r3
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	687a      	ldr	r2, [r7, #4]
 800127c:	490e      	ldr	r1, [pc, #56]	@ (80012b8 <I2C_MasterRequestWrite+0xfc>)
 800127e:	68f8      	ldr	r0, [r7, #12]
 8001280:	f000 f898 	bl	80013b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e010      	b.n	80012b0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800128e:	897b      	ldrh	r3, [r7, #10]
 8001290:	b2da      	uxtb	r2, r3
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	4907      	ldr	r1, [pc, #28]	@ (80012bc <I2C_MasterRequestWrite+0x100>)
 800129e:	68f8      	ldr	r0, [r7, #12]
 80012a0:	f000 f888 	bl	80013b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e000      	b.n	80012b0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80012ae:	2300      	movs	r3, #0
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3718      	adds	r7, #24
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	00010008 	.word	0x00010008
 80012bc:	00010002 	.word	0x00010002

080012c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	60f8      	str	r0, [r7, #12]
 80012c8:	60b9      	str	r1, [r7, #8]
 80012ca:	603b      	str	r3, [r7, #0]
 80012cc:	4613      	mov	r3, r2
 80012ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80012d0:	e048      	b.n	8001364 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012d8:	d044      	beq.n	8001364 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80012da:	f7ff fa61 	bl	80007a0 <HAL_GetTick>
 80012de:	4602      	mov	r2, r0
 80012e0:	69bb      	ldr	r3, [r7, #24]
 80012e2:	1ad3      	subs	r3, r2, r3
 80012e4:	683a      	ldr	r2, [r7, #0]
 80012e6:	429a      	cmp	r2, r3
 80012e8:	d302      	bcc.n	80012f0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d139      	bne.n	8001364 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	0c1b      	lsrs	r3, r3, #16
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d10d      	bne.n	8001316 <I2C_WaitOnFlagUntilTimeout+0x56>
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	695b      	ldr	r3, [r3, #20]
 8001300:	43da      	mvns	r2, r3
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	4013      	ands	r3, r2
 8001306:	b29b      	uxth	r3, r3
 8001308:	2b00      	cmp	r3, #0
 800130a:	bf0c      	ite	eq
 800130c:	2301      	moveq	r3, #1
 800130e:	2300      	movne	r3, #0
 8001310:	b2db      	uxtb	r3, r3
 8001312:	461a      	mov	r2, r3
 8001314:	e00c      	b.n	8001330 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	699b      	ldr	r3, [r3, #24]
 800131c:	43da      	mvns	r2, r3
 800131e:	68bb      	ldr	r3, [r7, #8]
 8001320:	4013      	ands	r3, r2
 8001322:	b29b      	uxth	r3, r3
 8001324:	2b00      	cmp	r3, #0
 8001326:	bf0c      	ite	eq
 8001328:	2301      	moveq	r3, #1
 800132a:	2300      	movne	r3, #0
 800132c:	b2db      	uxtb	r3, r3
 800132e:	461a      	mov	r2, r3
 8001330:	79fb      	ldrb	r3, [r7, #7]
 8001332:	429a      	cmp	r2, r3
 8001334:	d116      	bne.n	8001364 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	2200      	movs	r2, #0
 800133a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	2220      	movs	r2, #32
 8001340:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	2200      	movs	r2, #0
 8001348:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001350:	f043 0220 	orr.w	r2, r3, #32
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	2200      	movs	r2, #0
 800135c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001360:	2301      	movs	r3, #1
 8001362:	e023      	b.n	80013ac <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	0c1b      	lsrs	r3, r3, #16
 8001368:	b2db      	uxtb	r3, r3
 800136a:	2b01      	cmp	r3, #1
 800136c:	d10d      	bne.n	800138a <I2C_WaitOnFlagUntilTimeout+0xca>
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	695b      	ldr	r3, [r3, #20]
 8001374:	43da      	mvns	r2, r3
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	4013      	ands	r3, r2
 800137a:	b29b      	uxth	r3, r3
 800137c:	2b00      	cmp	r3, #0
 800137e:	bf0c      	ite	eq
 8001380:	2301      	moveq	r3, #1
 8001382:	2300      	movne	r3, #0
 8001384:	b2db      	uxtb	r3, r3
 8001386:	461a      	mov	r2, r3
 8001388:	e00c      	b.n	80013a4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	699b      	ldr	r3, [r3, #24]
 8001390:	43da      	mvns	r2, r3
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	4013      	ands	r3, r2
 8001396:	b29b      	uxth	r3, r3
 8001398:	2b00      	cmp	r3, #0
 800139a:	bf0c      	ite	eq
 800139c:	2301      	moveq	r3, #1
 800139e:	2300      	movne	r3, #0
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	461a      	mov	r2, r3
 80013a4:	79fb      	ldrb	r3, [r7, #7]
 80013a6:	429a      	cmp	r2, r3
 80013a8:	d093      	beq.n	80012d2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80013aa:	2300      	movs	r3, #0
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3710      	adds	r7, #16
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	60b9      	str	r1, [r7, #8]
 80013be:	607a      	str	r2, [r7, #4]
 80013c0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80013c2:	e071      	b.n	80014a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	695b      	ldr	r3, [r3, #20]
 80013ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013d2:	d123      	bne.n	800141c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80013e2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80013ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	2200      	movs	r2, #0
 80013f2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	2220      	movs	r2, #32
 80013f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	2200      	movs	r2, #0
 8001400:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001408:	f043 0204 	orr.w	r2, r3, #4
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	2200      	movs	r2, #0
 8001414:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001418:	2301      	movs	r3, #1
 800141a:	e067      	b.n	80014ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001422:	d041      	beq.n	80014a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001424:	f7ff f9bc 	bl	80007a0 <HAL_GetTick>
 8001428:	4602      	mov	r2, r0
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	687a      	ldr	r2, [r7, #4]
 8001430:	429a      	cmp	r2, r3
 8001432:	d302      	bcc.n	800143a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d136      	bne.n	80014a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	0c1b      	lsrs	r3, r3, #16
 800143e:	b2db      	uxtb	r3, r3
 8001440:	2b01      	cmp	r3, #1
 8001442:	d10c      	bne.n	800145e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	695b      	ldr	r3, [r3, #20]
 800144a:	43da      	mvns	r2, r3
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	4013      	ands	r3, r2
 8001450:	b29b      	uxth	r3, r3
 8001452:	2b00      	cmp	r3, #0
 8001454:	bf14      	ite	ne
 8001456:	2301      	movne	r3, #1
 8001458:	2300      	moveq	r3, #0
 800145a:	b2db      	uxtb	r3, r3
 800145c:	e00b      	b.n	8001476 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	699b      	ldr	r3, [r3, #24]
 8001464:	43da      	mvns	r2, r3
 8001466:	68bb      	ldr	r3, [r7, #8]
 8001468:	4013      	ands	r3, r2
 800146a:	b29b      	uxth	r3, r3
 800146c:	2b00      	cmp	r3, #0
 800146e:	bf14      	ite	ne
 8001470:	2301      	movne	r3, #1
 8001472:	2300      	moveq	r3, #0
 8001474:	b2db      	uxtb	r3, r3
 8001476:	2b00      	cmp	r3, #0
 8001478:	d016      	beq.n	80014a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	2200      	movs	r2, #0
 800147e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	2220      	movs	r2, #32
 8001484:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	2200      	movs	r2, #0
 800148c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001494:	f043 0220 	orr.w	r2, r3, #32
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	2200      	movs	r2, #0
 80014a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80014a4:	2301      	movs	r3, #1
 80014a6:	e021      	b.n	80014ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	0c1b      	lsrs	r3, r3, #16
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	2b01      	cmp	r3, #1
 80014b0:	d10c      	bne.n	80014cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	695b      	ldr	r3, [r3, #20]
 80014b8:	43da      	mvns	r2, r3
 80014ba:	68bb      	ldr	r3, [r7, #8]
 80014bc:	4013      	ands	r3, r2
 80014be:	b29b      	uxth	r3, r3
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	bf14      	ite	ne
 80014c4:	2301      	movne	r3, #1
 80014c6:	2300      	moveq	r3, #0
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	e00b      	b.n	80014e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	699b      	ldr	r3, [r3, #24]
 80014d2:	43da      	mvns	r2, r3
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	4013      	ands	r3, r2
 80014d8:	b29b      	uxth	r3, r3
 80014da:	2b00      	cmp	r3, #0
 80014dc:	bf14      	ite	ne
 80014de:	2301      	movne	r3, #1
 80014e0:	2300      	moveq	r3, #0
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	f47f af6d 	bne.w	80013c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80014ea:	2300      	movs	r3, #0
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3710      	adds	r7, #16
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	60b9      	str	r1, [r7, #8]
 80014fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001500:	e034      	b.n	800156c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001502:	68f8      	ldr	r0, [r7, #12]
 8001504:	f000 f886 	bl	8001614 <I2C_IsAcknowledgeFailed>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e034      	b.n	800157c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001518:	d028      	beq.n	800156c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800151a:	f7ff f941 	bl	80007a0 <HAL_GetTick>
 800151e:	4602      	mov	r2, r0
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	68ba      	ldr	r2, [r7, #8]
 8001526:	429a      	cmp	r2, r3
 8001528:	d302      	bcc.n	8001530 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d11d      	bne.n	800156c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	695b      	ldr	r3, [r3, #20]
 8001536:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800153a:	2b80      	cmp	r3, #128	@ 0x80
 800153c:	d016      	beq.n	800156c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	2200      	movs	r2, #0
 8001542:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	2220      	movs	r2, #32
 8001548:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	2200      	movs	r2, #0
 8001550:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001558:	f043 0220 	orr.w	r2, r3, #32
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	2200      	movs	r2, #0
 8001564:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	e007      	b.n	800157c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	695b      	ldr	r3, [r3, #20]
 8001572:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001576:	2b80      	cmp	r3, #128	@ 0x80
 8001578:	d1c3      	bne.n	8001502 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800157a:	2300      	movs	r3, #0
}
 800157c:	4618      	mov	r0, r3
 800157e:	3710      	adds	r7, #16
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}

08001584 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0
 800158a:	60f8      	str	r0, [r7, #12]
 800158c:	60b9      	str	r1, [r7, #8]
 800158e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001590:	e034      	b.n	80015fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001592:	68f8      	ldr	r0, [r7, #12]
 8001594:	f000 f83e 	bl	8001614 <I2C_IsAcknowledgeFailed>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e034      	b.n	800160c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015a8:	d028      	beq.n	80015fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015aa:	f7ff f8f9 	bl	80007a0 <HAL_GetTick>
 80015ae:	4602      	mov	r2, r0
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	68ba      	ldr	r2, [r7, #8]
 80015b6:	429a      	cmp	r2, r3
 80015b8:	d302      	bcc.n	80015c0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80015ba:	68bb      	ldr	r3, [r7, #8]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d11d      	bne.n	80015fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	695b      	ldr	r3, [r3, #20]
 80015c6:	f003 0304 	and.w	r3, r3, #4
 80015ca:	2b04      	cmp	r3, #4
 80015cc:	d016      	beq.n	80015fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	2200      	movs	r2, #0
 80015d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	2220      	movs	r2, #32
 80015d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	2200      	movs	r2, #0
 80015e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015e8:	f043 0220 	orr.w	r2, r3, #32
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	2200      	movs	r2, #0
 80015f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	e007      	b.n	800160c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	695b      	ldr	r3, [r3, #20]
 8001602:	f003 0304 	and.w	r3, r3, #4
 8001606:	2b04      	cmp	r3, #4
 8001608:	d1c3      	bne.n	8001592 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800160a:	2300      	movs	r3, #0
}
 800160c:	4618      	mov	r0, r3
 800160e:	3710      	adds	r7, #16
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}

08001614 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	695b      	ldr	r3, [r3, #20]
 8001622:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001626:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800162a:	d11b      	bne.n	8001664 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001634:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2200      	movs	r2, #0
 800163a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2220      	movs	r2, #32
 8001640:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2200      	movs	r2, #0
 8001648:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001650:	f043 0204 	orr.w	r2, r3, #4
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2200      	movs	r2, #0
 800165c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	e000      	b.n	8001666 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001664:	2300      	movs	r3, #0
}
 8001666:	4618      	mov	r0, r3
 8001668:	370c      	adds	r7, #12
 800166a:	46bd      	mov	sp, r7
 800166c:	bc80      	pop	{r7}
 800166e:	4770      	bx	lr

08001670 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b086      	sub	sp, #24
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d101      	bne.n	8001682 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e272      	b.n	8001b68 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0301 	and.w	r3, r3, #1
 800168a:	2b00      	cmp	r3, #0
 800168c:	f000 8087 	beq.w	800179e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001690:	4b92      	ldr	r3, [pc, #584]	@ (80018dc <HAL_RCC_OscConfig+0x26c>)
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f003 030c 	and.w	r3, r3, #12
 8001698:	2b04      	cmp	r3, #4
 800169a:	d00c      	beq.n	80016b6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800169c:	4b8f      	ldr	r3, [pc, #572]	@ (80018dc <HAL_RCC_OscConfig+0x26c>)
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f003 030c 	and.w	r3, r3, #12
 80016a4:	2b08      	cmp	r3, #8
 80016a6:	d112      	bne.n	80016ce <HAL_RCC_OscConfig+0x5e>
 80016a8:	4b8c      	ldr	r3, [pc, #560]	@ (80018dc <HAL_RCC_OscConfig+0x26c>)
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016b4:	d10b      	bne.n	80016ce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016b6:	4b89      	ldr	r3, [pc, #548]	@ (80018dc <HAL_RCC_OscConfig+0x26c>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d06c      	beq.n	800179c <HAL_RCC_OscConfig+0x12c>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d168      	bne.n	800179c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e24c      	b.n	8001b68 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016d6:	d106      	bne.n	80016e6 <HAL_RCC_OscConfig+0x76>
 80016d8:	4b80      	ldr	r3, [pc, #512]	@ (80018dc <HAL_RCC_OscConfig+0x26c>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a7f      	ldr	r2, [pc, #508]	@ (80018dc <HAL_RCC_OscConfig+0x26c>)
 80016de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016e2:	6013      	str	r3, [r2, #0]
 80016e4:	e02e      	b.n	8001744 <HAL_RCC_OscConfig+0xd4>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d10c      	bne.n	8001708 <HAL_RCC_OscConfig+0x98>
 80016ee:	4b7b      	ldr	r3, [pc, #492]	@ (80018dc <HAL_RCC_OscConfig+0x26c>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a7a      	ldr	r2, [pc, #488]	@ (80018dc <HAL_RCC_OscConfig+0x26c>)
 80016f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016f8:	6013      	str	r3, [r2, #0]
 80016fa:	4b78      	ldr	r3, [pc, #480]	@ (80018dc <HAL_RCC_OscConfig+0x26c>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a77      	ldr	r2, [pc, #476]	@ (80018dc <HAL_RCC_OscConfig+0x26c>)
 8001700:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001704:	6013      	str	r3, [r2, #0]
 8001706:	e01d      	b.n	8001744 <HAL_RCC_OscConfig+0xd4>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001710:	d10c      	bne.n	800172c <HAL_RCC_OscConfig+0xbc>
 8001712:	4b72      	ldr	r3, [pc, #456]	@ (80018dc <HAL_RCC_OscConfig+0x26c>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a71      	ldr	r2, [pc, #452]	@ (80018dc <HAL_RCC_OscConfig+0x26c>)
 8001718:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800171c:	6013      	str	r3, [r2, #0]
 800171e:	4b6f      	ldr	r3, [pc, #444]	@ (80018dc <HAL_RCC_OscConfig+0x26c>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a6e      	ldr	r2, [pc, #440]	@ (80018dc <HAL_RCC_OscConfig+0x26c>)
 8001724:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001728:	6013      	str	r3, [r2, #0]
 800172a:	e00b      	b.n	8001744 <HAL_RCC_OscConfig+0xd4>
 800172c:	4b6b      	ldr	r3, [pc, #428]	@ (80018dc <HAL_RCC_OscConfig+0x26c>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a6a      	ldr	r2, [pc, #424]	@ (80018dc <HAL_RCC_OscConfig+0x26c>)
 8001732:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001736:	6013      	str	r3, [r2, #0]
 8001738:	4b68      	ldr	r3, [pc, #416]	@ (80018dc <HAL_RCC_OscConfig+0x26c>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a67      	ldr	r2, [pc, #412]	@ (80018dc <HAL_RCC_OscConfig+0x26c>)
 800173e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001742:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d013      	beq.n	8001774 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800174c:	f7ff f828 	bl	80007a0 <HAL_GetTick>
 8001750:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001752:	e008      	b.n	8001766 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001754:	f7ff f824 	bl	80007a0 <HAL_GetTick>
 8001758:	4602      	mov	r2, r0
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	2b64      	cmp	r3, #100	@ 0x64
 8001760:	d901      	bls.n	8001766 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e200      	b.n	8001b68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001766:	4b5d      	ldr	r3, [pc, #372]	@ (80018dc <HAL_RCC_OscConfig+0x26c>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d0f0      	beq.n	8001754 <HAL_RCC_OscConfig+0xe4>
 8001772:	e014      	b.n	800179e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001774:	f7ff f814 	bl	80007a0 <HAL_GetTick>
 8001778:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800177a:	e008      	b.n	800178e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800177c:	f7ff f810 	bl	80007a0 <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	2b64      	cmp	r3, #100	@ 0x64
 8001788:	d901      	bls.n	800178e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e1ec      	b.n	8001b68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800178e:	4b53      	ldr	r3, [pc, #332]	@ (80018dc <HAL_RCC_OscConfig+0x26c>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d1f0      	bne.n	800177c <HAL_RCC_OscConfig+0x10c>
 800179a:	e000      	b.n	800179e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800179c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 0302 	and.w	r3, r3, #2
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d063      	beq.n	8001872 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017aa:	4b4c      	ldr	r3, [pc, #304]	@ (80018dc <HAL_RCC_OscConfig+0x26c>)
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f003 030c 	and.w	r3, r3, #12
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d00b      	beq.n	80017ce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80017b6:	4b49      	ldr	r3, [pc, #292]	@ (80018dc <HAL_RCC_OscConfig+0x26c>)
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	f003 030c 	and.w	r3, r3, #12
 80017be:	2b08      	cmp	r3, #8
 80017c0:	d11c      	bne.n	80017fc <HAL_RCC_OscConfig+0x18c>
 80017c2:	4b46      	ldr	r3, [pc, #280]	@ (80018dc <HAL_RCC_OscConfig+0x26c>)
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d116      	bne.n	80017fc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017ce:	4b43      	ldr	r3, [pc, #268]	@ (80018dc <HAL_RCC_OscConfig+0x26c>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0302 	and.w	r3, r3, #2
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d005      	beq.n	80017e6 <HAL_RCC_OscConfig+0x176>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	691b      	ldr	r3, [r3, #16]
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d001      	beq.n	80017e6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e1c0      	b.n	8001b68 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017e6:	4b3d      	ldr	r3, [pc, #244]	@ (80018dc <HAL_RCC_OscConfig+0x26c>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	695b      	ldr	r3, [r3, #20]
 80017f2:	00db      	lsls	r3, r3, #3
 80017f4:	4939      	ldr	r1, [pc, #228]	@ (80018dc <HAL_RCC_OscConfig+0x26c>)
 80017f6:	4313      	orrs	r3, r2
 80017f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017fa:	e03a      	b.n	8001872 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	691b      	ldr	r3, [r3, #16]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d020      	beq.n	8001846 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001804:	4b36      	ldr	r3, [pc, #216]	@ (80018e0 <HAL_RCC_OscConfig+0x270>)
 8001806:	2201      	movs	r2, #1
 8001808:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800180a:	f7fe ffc9 	bl	80007a0 <HAL_GetTick>
 800180e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001810:	e008      	b.n	8001824 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001812:	f7fe ffc5 	bl	80007a0 <HAL_GetTick>
 8001816:	4602      	mov	r2, r0
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	2b02      	cmp	r3, #2
 800181e:	d901      	bls.n	8001824 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001820:	2303      	movs	r3, #3
 8001822:	e1a1      	b.n	8001b68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001824:	4b2d      	ldr	r3, [pc, #180]	@ (80018dc <HAL_RCC_OscConfig+0x26c>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 0302 	and.w	r3, r3, #2
 800182c:	2b00      	cmp	r3, #0
 800182e:	d0f0      	beq.n	8001812 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001830:	4b2a      	ldr	r3, [pc, #168]	@ (80018dc <HAL_RCC_OscConfig+0x26c>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	695b      	ldr	r3, [r3, #20]
 800183c:	00db      	lsls	r3, r3, #3
 800183e:	4927      	ldr	r1, [pc, #156]	@ (80018dc <HAL_RCC_OscConfig+0x26c>)
 8001840:	4313      	orrs	r3, r2
 8001842:	600b      	str	r3, [r1, #0]
 8001844:	e015      	b.n	8001872 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001846:	4b26      	ldr	r3, [pc, #152]	@ (80018e0 <HAL_RCC_OscConfig+0x270>)
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800184c:	f7fe ffa8 	bl	80007a0 <HAL_GetTick>
 8001850:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001852:	e008      	b.n	8001866 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001854:	f7fe ffa4 	bl	80007a0 <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	2b02      	cmp	r3, #2
 8001860:	d901      	bls.n	8001866 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001862:	2303      	movs	r3, #3
 8001864:	e180      	b.n	8001b68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001866:	4b1d      	ldr	r3, [pc, #116]	@ (80018dc <HAL_RCC_OscConfig+0x26c>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0302 	and.w	r3, r3, #2
 800186e:	2b00      	cmp	r3, #0
 8001870:	d1f0      	bne.n	8001854 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0308 	and.w	r3, r3, #8
 800187a:	2b00      	cmp	r3, #0
 800187c:	d03a      	beq.n	80018f4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	699b      	ldr	r3, [r3, #24]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d019      	beq.n	80018ba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001886:	4b17      	ldr	r3, [pc, #92]	@ (80018e4 <HAL_RCC_OscConfig+0x274>)
 8001888:	2201      	movs	r2, #1
 800188a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800188c:	f7fe ff88 	bl	80007a0 <HAL_GetTick>
 8001890:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001892:	e008      	b.n	80018a6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001894:	f7fe ff84 	bl	80007a0 <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d901      	bls.n	80018a6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e160      	b.n	8001b68 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018a6:	4b0d      	ldr	r3, [pc, #52]	@ (80018dc <HAL_RCC_OscConfig+0x26c>)
 80018a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018aa:	f003 0302 	and.w	r3, r3, #2
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d0f0      	beq.n	8001894 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80018b2:	2001      	movs	r0, #1
 80018b4:	f000 faba 	bl	8001e2c <RCC_Delay>
 80018b8:	e01c      	b.n	80018f4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018ba:	4b0a      	ldr	r3, [pc, #40]	@ (80018e4 <HAL_RCC_OscConfig+0x274>)
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018c0:	f7fe ff6e 	bl	80007a0 <HAL_GetTick>
 80018c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018c6:	e00f      	b.n	80018e8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018c8:	f7fe ff6a 	bl	80007a0 <HAL_GetTick>
 80018cc:	4602      	mov	r2, r0
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d908      	bls.n	80018e8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80018d6:	2303      	movs	r3, #3
 80018d8:	e146      	b.n	8001b68 <HAL_RCC_OscConfig+0x4f8>
 80018da:	bf00      	nop
 80018dc:	40021000 	.word	0x40021000
 80018e0:	42420000 	.word	0x42420000
 80018e4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018e8:	4b92      	ldr	r3, [pc, #584]	@ (8001b34 <HAL_RCC_OscConfig+0x4c4>)
 80018ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ec:	f003 0302 	and.w	r3, r3, #2
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d1e9      	bne.n	80018c8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 0304 	and.w	r3, r3, #4
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	f000 80a6 	beq.w	8001a4e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001902:	2300      	movs	r3, #0
 8001904:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001906:	4b8b      	ldr	r3, [pc, #556]	@ (8001b34 <HAL_RCC_OscConfig+0x4c4>)
 8001908:	69db      	ldr	r3, [r3, #28]
 800190a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d10d      	bne.n	800192e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001912:	4b88      	ldr	r3, [pc, #544]	@ (8001b34 <HAL_RCC_OscConfig+0x4c4>)
 8001914:	69db      	ldr	r3, [r3, #28]
 8001916:	4a87      	ldr	r2, [pc, #540]	@ (8001b34 <HAL_RCC_OscConfig+0x4c4>)
 8001918:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800191c:	61d3      	str	r3, [r2, #28]
 800191e:	4b85      	ldr	r3, [pc, #532]	@ (8001b34 <HAL_RCC_OscConfig+0x4c4>)
 8001920:	69db      	ldr	r3, [r3, #28]
 8001922:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001926:	60bb      	str	r3, [r7, #8]
 8001928:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800192a:	2301      	movs	r3, #1
 800192c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800192e:	4b82      	ldr	r3, [pc, #520]	@ (8001b38 <HAL_RCC_OscConfig+0x4c8>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001936:	2b00      	cmp	r3, #0
 8001938:	d118      	bne.n	800196c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800193a:	4b7f      	ldr	r3, [pc, #508]	@ (8001b38 <HAL_RCC_OscConfig+0x4c8>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a7e      	ldr	r2, [pc, #504]	@ (8001b38 <HAL_RCC_OscConfig+0x4c8>)
 8001940:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001944:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001946:	f7fe ff2b 	bl	80007a0 <HAL_GetTick>
 800194a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800194c:	e008      	b.n	8001960 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800194e:	f7fe ff27 	bl	80007a0 <HAL_GetTick>
 8001952:	4602      	mov	r2, r0
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	2b64      	cmp	r3, #100	@ 0x64
 800195a:	d901      	bls.n	8001960 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800195c:	2303      	movs	r3, #3
 800195e:	e103      	b.n	8001b68 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001960:	4b75      	ldr	r3, [pc, #468]	@ (8001b38 <HAL_RCC_OscConfig+0x4c8>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001968:	2b00      	cmp	r3, #0
 800196a:	d0f0      	beq.n	800194e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	2b01      	cmp	r3, #1
 8001972:	d106      	bne.n	8001982 <HAL_RCC_OscConfig+0x312>
 8001974:	4b6f      	ldr	r3, [pc, #444]	@ (8001b34 <HAL_RCC_OscConfig+0x4c4>)
 8001976:	6a1b      	ldr	r3, [r3, #32]
 8001978:	4a6e      	ldr	r2, [pc, #440]	@ (8001b34 <HAL_RCC_OscConfig+0x4c4>)
 800197a:	f043 0301 	orr.w	r3, r3, #1
 800197e:	6213      	str	r3, [r2, #32]
 8001980:	e02d      	b.n	80019de <HAL_RCC_OscConfig+0x36e>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	68db      	ldr	r3, [r3, #12]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d10c      	bne.n	80019a4 <HAL_RCC_OscConfig+0x334>
 800198a:	4b6a      	ldr	r3, [pc, #424]	@ (8001b34 <HAL_RCC_OscConfig+0x4c4>)
 800198c:	6a1b      	ldr	r3, [r3, #32]
 800198e:	4a69      	ldr	r2, [pc, #420]	@ (8001b34 <HAL_RCC_OscConfig+0x4c4>)
 8001990:	f023 0301 	bic.w	r3, r3, #1
 8001994:	6213      	str	r3, [r2, #32]
 8001996:	4b67      	ldr	r3, [pc, #412]	@ (8001b34 <HAL_RCC_OscConfig+0x4c4>)
 8001998:	6a1b      	ldr	r3, [r3, #32]
 800199a:	4a66      	ldr	r2, [pc, #408]	@ (8001b34 <HAL_RCC_OscConfig+0x4c4>)
 800199c:	f023 0304 	bic.w	r3, r3, #4
 80019a0:	6213      	str	r3, [r2, #32]
 80019a2:	e01c      	b.n	80019de <HAL_RCC_OscConfig+0x36e>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	2b05      	cmp	r3, #5
 80019aa:	d10c      	bne.n	80019c6 <HAL_RCC_OscConfig+0x356>
 80019ac:	4b61      	ldr	r3, [pc, #388]	@ (8001b34 <HAL_RCC_OscConfig+0x4c4>)
 80019ae:	6a1b      	ldr	r3, [r3, #32]
 80019b0:	4a60      	ldr	r2, [pc, #384]	@ (8001b34 <HAL_RCC_OscConfig+0x4c4>)
 80019b2:	f043 0304 	orr.w	r3, r3, #4
 80019b6:	6213      	str	r3, [r2, #32]
 80019b8:	4b5e      	ldr	r3, [pc, #376]	@ (8001b34 <HAL_RCC_OscConfig+0x4c4>)
 80019ba:	6a1b      	ldr	r3, [r3, #32]
 80019bc:	4a5d      	ldr	r2, [pc, #372]	@ (8001b34 <HAL_RCC_OscConfig+0x4c4>)
 80019be:	f043 0301 	orr.w	r3, r3, #1
 80019c2:	6213      	str	r3, [r2, #32]
 80019c4:	e00b      	b.n	80019de <HAL_RCC_OscConfig+0x36e>
 80019c6:	4b5b      	ldr	r3, [pc, #364]	@ (8001b34 <HAL_RCC_OscConfig+0x4c4>)
 80019c8:	6a1b      	ldr	r3, [r3, #32]
 80019ca:	4a5a      	ldr	r2, [pc, #360]	@ (8001b34 <HAL_RCC_OscConfig+0x4c4>)
 80019cc:	f023 0301 	bic.w	r3, r3, #1
 80019d0:	6213      	str	r3, [r2, #32]
 80019d2:	4b58      	ldr	r3, [pc, #352]	@ (8001b34 <HAL_RCC_OscConfig+0x4c4>)
 80019d4:	6a1b      	ldr	r3, [r3, #32]
 80019d6:	4a57      	ldr	r2, [pc, #348]	@ (8001b34 <HAL_RCC_OscConfig+0x4c4>)
 80019d8:	f023 0304 	bic.w	r3, r3, #4
 80019dc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	68db      	ldr	r3, [r3, #12]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d015      	beq.n	8001a12 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019e6:	f7fe fedb 	bl	80007a0 <HAL_GetTick>
 80019ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019ec:	e00a      	b.n	8001a04 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019ee:	f7fe fed7 	bl	80007a0 <HAL_GetTick>
 80019f2:	4602      	mov	r2, r0
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d901      	bls.n	8001a04 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a00:	2303      	movs	r3, #3
 8001a02:	e0b1      	b.n	8001b68 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a04:	4b4b      	ldr	r3, [pc, #300]	@ (8001b34 <HAL_RCC_OscConfig+0x4c4>)
 8001a06:	6a1b      	ldr	r3, [r3, #32]
 8001a08:	f003 0302 	and.w	r3, r3, #2
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d0ee      	beq.n	80019ee <HAL_RCC_OscConfig+0x37e>
 8001a10:	e014      	b.n	8001a3c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a12:	f7fe fec5 	bl	80007a0 <HAL_GetTick>
 8001a16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a18:	e00a      	b.n	8001a30 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a1a:	f7fe fec1 	bl	80007a0 <HAL_GetTick>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d901      	bls.n	8001a30 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	e09b      	b.n	8001b68 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a30:	4b40      	ldr	r3, [pc, #256]	@ (8001b34 <HAL_RCC_OscConfig+0x4c4>)
 8001a32:	6a1b      	ldr	r3, [r3, #32]
 8001a34:	f003 0302 	and.w	r3, r3, #2
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d1ee      	bne.n	8001a1a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a3c:	7dfb      	ldrb	r3, [r7, #23]
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d105      	bne.n	8001a4e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a42:	4b3c      	ldr	r3, [pc, #240]	@ (8001b34 <HAL_RCC_OscConfig+0x4c4>)
 8001a44:	69db      	ldr	r3, [r3, #28]
 8001a46:	4a3b      	ldr	r2, [pc, #236]	@ (8001b34 <HAL_RCC_OscConfig+0x4c4>)
 8001a48:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a4c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	69db      	ldr	r3, [r3, #28]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	f000 8087 	beq.w	8001b66 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a58:	4b36      	ldr	r3, [pc, #216]	@ (8001b34 <HAL_RCC_OscConfig+0x4c4>)
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f003 030c 	and.w	r3, r3, #12
 8001a60:	2b08      	cmp	r3, #8
 8001a62:	d061      	beq.n	8001b28 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	69db      	ldr	r3, [r3, #28]
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	d146      	bne.n	8001afa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a6c:	4b33      	ldr	r3, [pc, #204]	@ (8001b3c <HAL_RCC_OscConfig+0x4cc>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a72:	f7fe fe95 	bl	80007a0 <HAL_GetTick>
 8001a76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a78:	e008      	b.n	8001a8c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a7a:	f7fe fe91 	bl	80007a0 <HAL_GetTick>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d901      	bls.n	8001a8c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	e06d      	b.n	8001b68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a8c:	4b29      	ldr	r3, [pc, #164]	@ (8001b34 <HAL_RCC_OscConfig+0x4c4>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d1f0      	bne.n	8001a7a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6a1b      	ldr	r3, [r3, #32]
 8001a9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001aa0:	d108      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001aa2:	4b24      	ldr	r3, [pc, #144]	@ (8001b34 <HAL_RCC_OscConfig+0x4c4>)
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	4921      	ldr	r1, [pc, #132]	@ (8001b34 <HAL_RCC_OscConfig+0x4c4>)
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ab4:	4b1f      	ldr	r3, [pc, #124]	@ (8001b34 <HAL_RCC_OscConfig+0x4c4>)
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6a19      	ldr	r1, [r3, #32]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ac4:	430b      	orrs	r3, r1
 8001ac6:	491b      	ldr	r1, [pc, #108]	@ (8001b34 <HAL_RCC_OscConfig+0x4c4>)
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001acc:	4b1b      	ldr	r3, [pc, #108]	@ (8001b3c <HAL_RCC_OscConfig+0x4cc>)
 8001ace:	2201      	movs	r2, #1
 8001ad0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad2:	f7fe fe65 	bl	80007a0 <HAL_GetTick>
 8001ad6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ad8:	e008      	b.n	8001aec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ada:	f7fe fe61 	bl	80007a0 <HAL_GetTick>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d901      	bls.n	8001aec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	e03d      	b.n	8001b68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001aec:	4b11      	ldr	r3, [pc, #68]	@ (8001b34 <HAL_RCC_OscConfig+0x4c4>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d0f0      	beq.n	8001ada <HAL_RCC_OscConfig+0x46a>
 8001af8:	e035      	b.n	8001b66 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001afa:	4b10      	ldr	r3, [pc, #64]	@ (8001b3c <HAL_RCC_OscConfig+0x4cc>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b00:	f7fe fe4e 	bl	80007a0 <HAL_GetTick>
 8001b04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b06:	e008      	b.n	8001b1a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b08:	f7fe fe4a 	bl	80007a0 <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d901      	bls.n	8001b1a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e026      	b.n	8001b68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b1a:	4b06      	ldr	r3, [pc, #24]	@ (8001b34 <HAL_RCC_OscConfig+0x4c4>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d1f0      	bne.n	8001b08 <HAL_RCC_OscConfig+0x498>
 8001b26:	e01e      	b.n	8001b66 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	69db      	ldr	r3, [r3, #28]
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d107      	bne.n	8001b40 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e019      	b.n	8001b68 <HAL_RCC_OscConfig+0x4f8>
 8001b34:	40021000 	.word	0x40021000
 8001b38:	40007000 	.word	0x40007000
 8001b3c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b40:	4b0b      	ldr	r3, [pc, #44]	@ (8001b70 <HAL_RCC_OscConfig+0x500>)
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6a1b      	ldr	r3, [r3, #32]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d106      	bne.n	8001b62 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d001      	beq.n	8001b66 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e000      	b.n	8001b68 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001b66:	2300      	movs	r3, #0
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3718      	adds	r7, #24
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	40021000 	.word	0x40021000

08001b74 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b084      	sub	sp, #16
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d101      	bne.n	8001b88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e0d0      	b.n	8001d2a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b88:	4b6a      	ldr	r3, [pc, #424]	@ (8001d34 <HAL_RCC_ClockConfig+0x1c0>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0307 	and.w	r3, r3, #7
 8001b90:	683a      	ldr	r2, [r7, #0]
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d910      	bls.n	8001bb8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b96:	4b67      	ldr	r3, [pc, #412]	@ (8001d34 <HAL_RCC_ClockConfig+0x1c0>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f023 0207 	bic.w	r2, r3, #7
 8001b9e:	4965      	ldr	r1, [pc, #404]	@ (8001d34 <HAL_RCC_ClockConfig+0x1c0>)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ba6:	4b63      	ldr	r3, [pc, #396]	@ (8001d34 <HAL_RCC_ClockConfig+0x1c0>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0307 	and.w	r3, r3, #7
 8001bae:	683a      	ldr	r2, [r7, #0]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d001      	beq.n	8001bb8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e0b8      	b.n	8001d2a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0302 	and.w	r3, r3, #2
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d020      	beq.n	8001c06 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 0304 	and.w	r3, r3, #4
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d005      	beq.n	8001bdc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bd0:	4b59      	ldr	r3, [pc, #356]	@ (8001d38 <HAL_RCC_ClockConfig+0x1c4>)
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	4a58      	ldr	r2, [pc, #352]	@ (8001d38 <HAL_RCC_ClockConfig+0x1c4>)
 8001bd6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001bda:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0308 	and.w	r3, r3, #8
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d005      	beq.n	8001bf4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001be8:	4b53      	ldr	r3, [pc, #332]	@ (8001d38 <HAL_RCC_ClockConfig+0x1c4>)
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	4a52      	ldr	r2, [pc, #328]	@ (8001d38 <HAL_RCC_ClockConfig+0x1c4>)
 8001bee:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001bf2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bf4:	4b50      	ldr	r3, [pc, #320]	@ (8001d38 <HAL_RCC_ClockConfig+0x1c4>)
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	494d      	ldr	r1, [pc, #308]	@ (8001d38 <HAL_RCC_ClockConfig+0x1c4>)
 8001c02:	4313      	orrs	r3, r2
 8001c04:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0301 	and.w	r3, r3, #1
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d040      	beq.n	8001c94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d107      	bne.n	8001c2a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c1a:	4b47      	ldr	r3, [pc, #284]	@ (8001d38 <HAL_RCC_ClockConfig+0x1c4>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d115      	bne.n	8001c52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e07f      	b.n	8001d2a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d107      	bne.n	8001c42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c32:	4b41      	ldr	r3, [pc, #260]	@ (8001d38 <HAL_RCC_ClockConfig+0x1c4>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d109      	bne.n	8001c52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e073      	b.n	8001d2a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c42:	4b3d      	ldr	r3, [pc, #244]	@ (8001d38 <HAL_RCC_ClockConfig+0x1c4>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0302 	and.w	r3, r3, #2
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d101      	bne.n	8001c52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e06b      	b.n	8001d2a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c52:	4b39      	ldr	r3, [pc, #228]	@ (8001d38 <HAL_RCC_ClockConfig+0x1c4>)
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f023 0203 	bic.w	r2, r3, #3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	4936      	ldr	r1, [pc, #216]	@ (8001d38 <HAL_RCC_ClockConfig+0x1c4>)
 8001c60:	4313      	orrs	r3, r2
 8001c62:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c64:	f7fe fd9c 	bl	80007a0 <HAL_GetTick>
 8001c68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c6a:	e00a      	b.n	8001c82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c6c:	f7fe fd98 	bl	80007a0 <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e053      	b.n	8001d2a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c82:	4b2d      	ldr	r3, [pc, #180]	@ (8001d38 <HAL_RCC_ClockConfig+0x1c4>)
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f003 020c 	and.w	r2, r3, #12
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d1eb      	bne.n	8001c6c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c94:	4b27      	ldr	r3, [pc, #156]	@ (8001d34 <HAL_RCC_ClockConfig+0x1c0>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0307 	and.w	r3, r3, #7
 8001c9c:	683a      	ldr	r2, [r7, #0]
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d210      	bcs.n	8001cc4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ca2:	4b24      	ldr	r3, [pc, #144]	@ (8001d34 <HAL_RCC_ClockConfig+0x1c0>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f023 0207 	bic.w	r2, r3, #7
 8001caa:	4922      	ldr	r1, [pc, #136]	@ (8001d34 <HAL_RCC_ClockConfig+0x1c0>)
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cb2:	4b20      	ldr	r3, [pc, #128]	@ (8001d34 <HAL_RCC_ClockConfig+0x1c0>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0307 	and.w	r3, r3, #7
 8001cba:	683a      	ldr	r2, [r7, #0]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d001      	beq.n	8001cc4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e032      	b.n	8001d2a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 0304 	and.w	r3, r3, #4
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d008      	beq.n	8001ce2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cd0:	4b19      	ldr	r3, [pc, #100]	@ (8001d38 <HAL_RCC_ClockConfig+0x1c4>)
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	4916      	ldr	r1, [pc, #88]	@ (8001d38 <HAL_RCC_ClockConfig+0x1c4>)
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0308 	and.w	r3, r3, #8
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d009      	beq.n	8001d02 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001cee:	4b12      	ldr	r3, [pc, #72]	@ (8001d38 <HAL_RCC_ClockConfig+0x1c4>)
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	691b      	ldr	r3, [r3, #16]
 8001cfa:	00db      	lsls	r3, r3, #3
 8001cfc:	490e      	ldr	r1, [pc, #56]	@ (8001d38 <HAL_RCC_ClockConfig+0x1c4>)
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d02:	f000 f821 	bl	8001d48 <HAL_RCC_GetSysClockFreq>
 8001d06:	4602      	mov	r2, r0
 8001d08:	4b0b      	ldr	r3, [pc, #44]	@ (8001d38 <HAL_RCC_ClockConfig+0x1c4>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	091b      	lsrs	r3, r3, #4
 8001d0e:	f003 030f 	and.w	r3, r3, #15
 8001d12:	490a      	ldr	r1, [pc, #40]	@ (8001d3c <HAL_RCC_ClockConfig+0x1c8>)
 8001d14:	5ccb      	ldrb	r3, [r1, r3]
 8001d16:	fa22 f303 	lsr.w	r3, r2, r3
 8001d1a:	4a09      	ldr	r2, [pc, #36]	@ (8001d40 <HAL_RCC_ClockConfig+0x1cc>)
 8001d1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d1e:	4b09      	ldr	r3, [pc, #36]	@ (8001d44 <HAL_RCC_ClockConfig+0x1d0>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7fe fcfa 	bl	800071c <HAL_InitTick>

  return HAL_OK;
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3710      	adds	r7, #16
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	40022000 	.word	0x40022000
 8001d38:	40021000 	.word	0x40021000
 8001d3c:	080045bc 	.word	0x080045bc
 8001d40:	20000000 	.word	0x20000000
 8001d44:	20000004 	.word	0x20000004

08001d48 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b087      	sub	sp, #28
 8001d4c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	60fb      	str	r3, [r7, #12]
 8001d52:	2300      	movs	r3, #0
 8001d54:	60bb      	str	r3, [r7, #8]
 8001d56:	2300      	movs	r3, #0
 8001d58:	617b      	str	r3, [r7, #20]
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001d62:	4b1e      	ldr	r3, [pc, #120]	@ (8001ddc <HAL_RCC_GetSysClockFreq+0x94>)
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	f003 030c 	and.w	r3, r3, #12
 8001d6e:	2b04      	cmp	r3, #4
 8001d70:	d002      	beq.n	8001d78 <HAL_RCC_GetSysClockFreq+0x30>
 8001d72:	2b08      	cmp	r3, #8
 8001d74:	d003      	beq.n	8001d7e <HAL_RCC_GetSysClockFreq+0x36>
 8001d76:	e027      	b.n	8001dc8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d78:	4b19      	ldr	r3, [pc, #100]	@ (8001de0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d7a:	613b      	str	r3, [r7, #16]
      break;
 8001d7c:	e027      	b.n	8001dce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	0c9b      	lsrs	r3, r3, #18
 8001d82:	f003 030f 	and.w	r3, r3, #15
 8001d86:	4a17      	ldr	r2, [pc, #92]	@ (8001de4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001d88:	5cd3      	ldrb	r3, [r2, r3]
 8001d8a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d010      	beq.n	8001db8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d96:	4b11      	ldr	r3, [pc, #68]	@ (8001ddc <HAL_RCC_GetSysClockFreq+0x94>)
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	0c5b      	lsrs	r3, r3, #17
 8001d9c:	f003 0301 	and.w	r3, r3, #1
 8001da0:	4a11      	ldr	r2, [pc, #68]	@ (8001de8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001da2:	5cd3      	ldrb	r3, [r2, r3]
 8001da4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4a0d      	ldr	r2, [pc, #52]	@ (8001de0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001daa:	fb03 f202 	mul.w	r2, r3, r2
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001db4:	617b      	str	r3, [r7, #20]
 8001db6:	e004      	b.n	8001dc2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	4a0c      	ldr	r2, [pc, #48]	@ (8001dec <HAL_RCC_GetSysClockFreq+0xa4>)
 8001dbc:	fb02 f303 	mul.w	r3, r2, r3
 8001dc0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	613b      	str	r3, [r7, #16]
      break;
 8001dc6:	e002      	b.n	8001dce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001dc8:	4b05      	ldr	r3, [pc, #20]	@ (8001de0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001dca:	613b      	str	r3, [r7, #16]
      break;
 8001dcc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dce:	693b      	ldr	r3, [r7, #16]
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	371c      	adds	r7, #28
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bc80      	pop	{r7}
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	40021000 	.word	0x40021000
 8001de0:	007a1200 	.word	0x007a1200
 8001de4:	080045d4 	.word	0x080045d4
 8001de8:	080045e4 	.word	0x080045e4
 8001dec:	003d0900 	.word	0x003d0900

08001df0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001df4:	4b02      	ldr	r3, [pc, #8]	@ (8001e00 <HAL_RCC_GetHCLKFreq+0x10>)
 8001df6:	681b      	ldr	r3, [r3, #0]
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bc80      	pop	{r7}
 8001dfe:	4770      	bx	lr
 8001e00:	20000000 	.word	0x20000000

08001e04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e08:	f7ff fff2 	bl	8001df0 <HAL_RCC_GetHCLKFreq>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	4b05      	ldr	r3, [pc, #20]	@ (8001e24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	0a1b      	lsrs	r3, r3, #8
 8001e14:	f003 0307 	and.w	r3, r3, #7
 8001e18:	4903      	ldr	r1, [pc, #12]	@ (8001e28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e1a:	5ccb      	ldrb	r3, [r1, r3]
 8001e1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	40021000 	.word	0x40021000
 8001e28:	080045cc 	.word	0x080045cc

08001e2c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b085      	sub	sp, #20
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e34:	4b0a      	ldr	r3, [pc, #40]	@ (8001e60 <RCC_Delay+0x34>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a0a      	ldr	r2, [pc, #40]	@ (8001e64 <RCC_Delay+0x38>)
 8001e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e3e:	0a5b      	lsrs	r3, r3, #9
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	fb02 f303 	mul.w	r3, r2, r3
 8001e46:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001e48:	bf00      	nop
  }
  while (Delay --);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	1e5a      	subs	r2, r3, #1
 8001e4e:	60fa      	str	r2, [r7, #12]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d1f9      	bne.n	8001e48 <RCC_Delay+0x1c>
}
 8001e54:	bf00      	nop
 8001e56:	bf00      	nop
 8001e58:	3714      	adds	r7, #20
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bc80      	pop	{r7}
 8001e5e:	4770      	bx	lr
 8001e60:	20000000 	.word	0x20000000
 8001e64:	10624dd3 	.word	0x10624dd3

08001e68 <app_init>:

task_dta_t task_dta_list[TASK_QTY];

/********************** external functions definition ************************/
void app_init(void)
{
 8001e68:	b590      	push	{r4, r7, lr}
 8001e6a:	b085      	sub	sp, #20
 8001e6c:	af02      	add	r7, sp, #8
	uint32_t index;

	/* Print out: Application Initialized */
	LOGGER_LOG("\r\n");
 8001e6e:	b672      	cpsid	i
 8001e70:	4b51      	ldr	r3, [pc, #324]	@ (8001fb8 <app_init+0x150>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a51      	ldr	r2, [pc, #324]	@ (8001fbc <app_init+0x154>)
 8001e76:	213f      	movs	r1, #63	@ 0x3f
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f001 fa35 	bl	80032e8 <sniprintf>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	4a4f      	ldr	r2, [pc, #316]	@ (8001fc0 <app_init+0x158>)
 8001e82:	6013      	str	r3, [r2, #0]
 8001e84:	4b4c      	ldr	r3, [pc, #304]	@ (8001fb8 <app_init+0x150>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f000 f941 	bl	8002110 <logger_log_print_>
 8001e8e:	b662      	cpsie	i
	LOGGER_LOG("%s is running - Tick [mS] = %lu\r\n", GET_NAME(app_init), HAL_GetTick());
 8001e90:	b672      	cpsid	i
 8001e92:	4b49      	ldr	r3, [pc, #292]	@ (8001fb8 <app_init+0x150>)
 8001e94:	681c      	ldr	r4, [r3, #0]
 8001e96:	f7fe fc83 	bl	80007a0 <HAL_GetTick>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	9300      	str	r3, [sp, #0]
 8001e9e:	4b49      	ldr	r3, [pc, #292]	@ (8001fc4 <app_init+0x15c>)
 8001ea0:	4a49      	ldr	r2, [pc, #292]	@ (8001fc8 <app_init+0x160>)
 8001ea2:	213f      	movs	r1, #63	@ 0x3f
 8001ea4:	4620      	mov	r0, r4
 8001ea6:	f001 fa1f 	bl	80032e8 <sniprintf>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	4a44      	ldr	r2, [pc, #272]	@ (8001fc0 <app_init+0x158>)
 8001eae:	6013      	str	r3, [r2, #0]
 8001eb0:	4b41      	ldr	r3, [pc, #260]	@ (8001fb8 <app_init+0x150>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f000 f92b 	bl	8002110 <logger_log_print_>
 8001eba:	b662      	cpsie	i

	LOGGER_LOG(p_sys);
 8001ebc:	b672      	cpsid	i
 8001ebe:	4b3e      	ldr	r3, [pc, #248]	@ (8001fb8 <app_init+0x150>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a42      	ldr	r2, [pc, #264]	@ (8001fcc <app_init+0x164>)
 8001ec4:	6812      	ldr	r2, [r2, #0]
 8001ec6:	213f      	movs	r1, #63	@ 0x3f
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f001 fa0d 	bl	80032e8 <sniprintf>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	4a3b      	ldr	r2, [pc, #236]	@ (8001fc0 <app_init+0x158>)
 8001ed2:	6013      	str	r3, [r2, #0]
 8001ed4:	4b38      	ldr	r3, [pc, #224]	@ (8001fb8 <app_init+0x150>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f000 f919 	bl	8002110 <logger_log_print_>
 8001ede:	b662      	cpsie	i
	LOGGER_LOG(p_app);
 8001ee0:	b672      	cpsid	i
 8001ee2:	4b35      	ldr	r3, [pc, #212]	@ (8001fb8 <app_init+0x150>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a3a      	ldr	r2, [pc, #232]	@ (8001fd0 <app_init+0x168>)
 8001ee8:	6812      	ldr	r2, [r2, #0]
 8001eea:	213f      	movs	r1, #63	@ 0x3f
 8001eec:	4618      	mov	r0, r3
 8001eee:	f001 f9fb 	bl	80032e8 <sniprintf>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	4a32      	ldr	r2, [pc, #200]	@ (8001fc0 <app_init+0x158>)
 8001ef6:	6013      	str	r3, [r2, #0]
 8001ef8:	4b2f      	ldr	r3, [pc, #188]	@ (8001fb8 <app_init+0x150>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4618      	mov	r0, r3
 8001efe:	f000 f907 	bl	8002110 <logger_log_print_>
 8001f02:	b662      	cpsie	i

	g_app_cnt = G_APP_CNT_INI;
 8001f04:	4b33      	ldr	r3, [pc, #204]	@ (8001fd4 <app_init+0x16c>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	601a      	str	r2, [r3, #0]

	/* Print out: Application execution counter */
	LOGGER_LOG(" %s = %lu\r\n", GET_NAME(g_app_cnt), g_app_cnt);
 8001f0a:	b672      	cpsid	i
 8001f0c:	4b2a      	ldr	r3, [pc, #168]	@ (8001fb8 <app_init+0x150>)
 8001f0e:	6818      	ldr	r0, [r3, #0]
 8001f10:	4b30      	ldr	r3, [pc, #192]	@ (8001fd4 <app_init+0x16c>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	9300      	str	r3, [sp, #0]
 8001f16:	4b30      	ldr	r3, [pc, #192]	@ (8001fd8 <app_init+0x170>)
 8001f18:	4a30      	ldr	r2, [pc, #192]	@ (8001fdc <app_init+0x174>)
 8001f1a:	213f      	movs	r1, #63	@ 0x3f
 8001f1c:	f001 f9e4 	bl	80032e8 <sniprintf>
 8001f20:	4603      	mov	r3, r0
 8001f22:	4a27      	ldr	r2, [pc, #156]	@ (8001fc0 <app_init+0x158>)
 8001f24:	6013      	str	r3, [r2, #0]
 8001f26:	4b24      	ldr	r3, [pc, #144]	@ (8001fb8 <app_init+0x150>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f000 f8f0 	bl	8002110 <logger_log_print_>
 8001f30:	b662      	cpsie	i

	/* Go through the task arrays */
	for (index = 0; TASK_QTY > index; index++)
 8001f32:	2300      	movs	r3, #0
 8001f34:	607b      	str	r3, [r7, #4]
 8001f36:	e01a      	b.n	8001f6e <app_init+0x106>
	{
		/* Run task_x_init */
		(*task_cfg_list[index].task_init)(task_cfg_list[index].parameters);
 8001f38:	4929      	ldr	r1, [pc, #164]	@ (8001fe0 <app_init+0x178>)
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	005b      	lsls	r3, r3, #1
 8001f40:	4413      	add	r3, r2
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	440b      	add	r3, r1
 8001f46:	6819      	ldr	r1, [r3, #0]
 8001f48:	4825      	ldr	r0, [pc, #148]	@ (8001fe0 <app_init+0x178>)
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	005b      	lsls	r3, r3, #1
 8001f50:	4413      	add	r3, r2
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	4403      	add	r3, r0
 8001f56:	3308      	adds	r3, #8
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	4788      	blx	r1

		/* Init variables */
		task_dta_list[index].WCET = TASK_X_WCET_INI;
 8001f5e:	4a21      	ldr	r2, [pc, #132]	@ (8001fe4 <app_init+0x17c>)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2100      	movs	r1, #0
 8001f64:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (index = 0; TASK_QTY > index; index++)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	607b      	str	r3, [r7, #4]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d9e1      	bls.n	8001f38 <app_init+0xd0>
	}

	cycle_counter_init();
 8001f74:	4b1c      	ldr	r3, [pc, #112]	@ (8001fe8 <app_init+0x180>)
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	4a1b      	ldr	r2, [pc, #108]	@ (8001fe8 <app_init+0x180>)
 8001f7a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f7e:	60d3      	str	r3, [r2, #12]
 8001f80:	4b1a      	ldr	r3, [pc, #104]	@ (8001fec <app_init+0x184>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	605a      	str	r2, [r3, #4]
 8001f86:	4b19      	ldr	r3, [pc, #100]	@ (8001fec <app_init+0x184>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a18      	ldr	r2, [pc, #96]	@ (8001fec <app_init+0x184>)
 8001f8c:	f043 0301 	orr.w	r3, r3, #1
 8001f90:	6013      	str	r3, [r2, #0]

	__asm("CPSID i");	/* disable interrupts*/
 8001f92:	b672      	cpsid	i
	g_app_tick_cnt = G_APP_TICK_CNT_INI;
 8001f94:	4b16      	ldr	r3, [pc, #88]	@ (8001ff0 <app_init+0x188>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	601a      	str	r2, [r3, #0]
	g_task_sensor_tick_cnt = G_APP_TICK_CNT_INI;
 8001f9a:	4b16      	ldr	r3, [pc, #88]	@ (8001ff4 <app_init+0x18c>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	601a      	str	r2, [r3, #0]
	g_task_system_tick_cnt = G_APP_TICK_CNT_INI;
 8001fa0:	4b15      	ldr	r3, [pc, #84]	@ (8001ff8 <app_init+0x190>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	601a      	str	r2, [r3, #0]
	g_task_actuator_tick_cnt = G_APP_TICK_CNT_INI;
 8001fa6:	4b15      	ldr	r3, [pc, #84]	@ (8001ffc <app_init+0x194>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	601a      	str	r2, [r3, #0]
    __asm("CPSIE i");	/* enable interrupts*/
 8001fac:	b662      	cpsie	i
}
 8001fae:	bf00      	nop
 8001fb0:	370c      	adds	r7, #12
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd90      	pop	{r4, r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	0800460c 	.word	0x0800460c
 8001fbc:	0800429c 	.word	0x0800429c
 8001fc0:	20000178 	.word	0x20000178
 8001fc4:	080042a0 	.word	0x080042a0
 8001fc8:	080042ac 	.word	0x080042ac
 8001fcc:	2000000c 	.word	0x2000000c
 8001fd0:	20000010 	.word	0x20000010
 8001fd4:	20000120 	.word	0x20000120
 8001fd8:	080042d0 	.word	0x080042d0
 8001fdc:	080042dc 	.word	0x080042dc
 8001fe0:	080045e8 	.word	0x080045e8
 8001fe4:	2000012c 	.word	0x2000012c
 8001fe8:	e000edf0 	.word	0xe000edf0
 8001fec:	e0001000 	.word	0xe0001000
 8001ff0:	20000128 	.word	0x20000128
 8001ff4:	20000190 	.word	0x20000190
 8001ff8:	200001a0 	.word	0x200001a0
 8001ffc:	20000180 	.word	0x20000180

08002000 <app_update>:

void app_update(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
	uint32_t index;
	uint32_t cycle_counter_time_us;

	/* Check if it's time to run tasks */
	if (G_APP_TICK_CNT_INI < g_app_tick_cnt)
 8002006:	4b29      	ldr	r3, [pc, #164]	@ (80020ac <app_update+0xac>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d049      	beq.n	80020a2 <app_update+0xa2>
    {
    	g_app_tick_cnt--;
 800200e:	4b27      	ldr	r3, [pc, #156]	@ (80020ac <app_update+0xac>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	3b01      	subs	r3, #1
 8002014:	4a25      	ldr	r2, [pc, #148]	@ (80020ac <app_update+0xac>)
 8002016:	6013      	str	r3, [r2, #0]

    	/* Update App Counter */
    	g_app_cnt++;
 8002018:	4b25      	ldr	r3, [pc, #148]	@ (80020b0 <app_update+0xb0>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	3301      	adds	r3, #1
 800201e:	4a24      	ldr	r2, [pc, #144]	@ (80020b0 <app_update+0xb0>)
 8002020:	6013      	str	r3, [r2, #0]
    	g_app_time_us = 0;
 8002022:	4b24      	ldr	r3, [pc, #144]	@ (80020b4 <app_update+0xb4>)
 8002024:	2200      	movs	r2, #0
 8002026:	601a      	str	r2, [r3, #0]

    	/* Go through the task arrays */
    	for (index = 0; TASK_QTY > index; index++)
 8002028:	2300      	movs	r3, #0
 800202a:	607b      	str	r3, [r7, #4]
 800202c:	e036      	b.n	800209c <app_update+0x9c>
    	{
			cycle_counter_reset();
 800202e:	4b22      	ldr	r3, [pc, #136]	@ (80020b8 <app_update+0xb8>)
 8002030:	2200      	movs	r2, #0
 8002032:	605a      	str	r2, [r3, #4]

    		/* Run task_x_update */
			(*task_cfg_list[index].task_update)(task_cfg_list[index].parameters);
 8002034:	4921      	ldr	r1, [pc, #132]	@ (80020bc <app_update+0xbc>)
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	4613      	mov	r3, r2
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	4413      	add	r3, r2
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	440b      	add	r3, r1
 8002042:	3304      	adds	r3, #4
 8002044:	6819      	ldr	r1, [r3, #0]
 8002046:	481d      	ldr	r0, [pc, #116]	@ (80020bc <app_update+0xbc>)
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	4613      	mov	r3, r2
 800204c:	005b      	lsls	r3, r3, #1
 800204e:	4413      	add	r3, r2
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	4403      	add	r3, r0
 8002054:	3308      	adds	r3, #8
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4618      	mov	r0, r3
 800205a:	4788      	blx	r1

			cycle_counter_time_us = cycle_counter_time_us();
 800205c:	4b16      	ldr	r3, [pc, #88]	@ (80020b8 <app_update+0xb8>)
 800205e:	685a      	ldr	r2, [r3, #4]
 8002060:	4b17      	ldr	r3, [pc, #92]	@ (80020c0 <app_update+0xc0>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4917      	ldr	r1, [pc, #92]	@ (80020c4 <app_update+0xc4>)
 8002066:	fba1 1303 	umull	r1, r3, r1, r3
 800206a:	0c9b      	lsrs	r3, r3, #18
 800206c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002070:	603b      	str	r3, [r7, #0]

			/* Update variables */
	    	g_app_time_us += cycle_counter_time_us;
 8002072:	4b10      	ldr	r3, [pc, #64]	@ (80020b4 <app_update+0xb4>)
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	4413      	add	r3, r2
 800207a:	4a0e      	ldr	r2, [pc, #56]	@ (80020b4 <app_update+0xb4>)
 800207c:	6013      	str	r3, [r2, #0]

			if (task_dta_list[index].WCET < cycle_counter_time_us)
 800207e:	4a12      	ldr	r2, [pc, #72]	@ (80020c8 <app_update+0xc8>)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002086:	683a      	ldr	r2, [r7, #0]
 8002088:	429a      	cmp	r2, r3
 800208a:	d904      	bls.n	8002096 <app_update+0x96>
			{
				task_dta_list[index].WCET = cycle_counter_time_us;
 800208c:	490e      	ldr	r1, [pc, #56]	@ (80020c8 <app_update+0xc8>)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	683a      	ldr	r2, [r7, #0]
 8002092:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    	for (index = 0; TASK_QTY > index; index++)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	3301      	adds	r3, #1
 800209a:	607b      	str	r3, [r7, #4]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d9c5      	bls.n	800202e <app_update+0x2e>
			}
	    }
    }
}
 80020a2:	bf00      	nop
 80020a4:	3708      	adds	r7, #8
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	20000128 	.word	0x20000128
 80020b0:	20000120 	.word	0x20000120
 80020b4:	20000124 	.word	0x20000124
 80020b8:	e0001000 	.word	0xe0001000
 80020bc:	080045e8 	.word	0x080045e8
 80020c0:	20000000 	.word	0x20000000
 80020c4:	431bde83 	.word	0x431bde83
 80020c8:	2000012c 	.word	0x2000012c

080020cc <HAL_SYSTICK_Callback>:

void HAL_SYSTICK_Callback(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
	g_app_tick_cnt++;
 80020d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002100 <HAL_SYSTICK_Callback+0x34>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	3301      	adds	r3, #1
 80020d6:	4a0a      	ldr	r2, [pc, #40]	@ (8002100 <HAL_SYSTICK_Callback+0x34>)
 80020d8:	6013      	str	r3, [r2, #0]

	g_task_sensor_tick_cnt++;
 80020da:	4b0a      	ldr	r3, [pc, #40]	@ (8002104 <HAL_SYSTICK_Callback+0x38>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	3301      	adds	r3, #1
 80020e0:	4a08      	ldr	r2, [pc, #32]	@ (8002104 <HAL_SYSTICK_Callback+0x38>)
 80020e2:	6013      	str	r3, [r2, #0]
	g_task_system_tick_cnt++;
 80020e4:	4b08      	ldr	r3, [pc, #32]	@ (8002108 <HAL_SYSTICK_Callback+0x3c>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	3301      	adds	r3, #1
 80020ea:	4a07      	ldr	r2, [pc, #28]	@ (8002108 <HAL_SYSTICK_Callback+0x3c>)
 80020ec:	6013      	str	r3, [r2, #0]
	g_task_actuator_tick_cnt++;
 80020ee:	4b07      	ldr	r3, [pc, #28]	@ (800210c <HAL_SYSTICK_Callback+0x40>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	3301      	adds	r3, #1
 80020f4:	4a05      	ldr	r2, [pc, #20]	@ (800210c <HAL_SYSTICK_Callback+0x40>)
 80020f6:	6013      	str	r3, [r2, #0]
}
 80020f8:	bf00      	nop
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bc80      	pop	{r7}
 80020fe:	4770      	bx	lr
 8002100:	20000128 	.word	0x20000128
 8002104:	20000190 	.word	0x20000190
 8002108:	200001a0 	.word	0x200001a0
 800210c:	20000180 	.word	0x20000180

08002110 <logger_log_print_>:

/********************** external functions definition ************************/

#if 1 == LOGGER_CONFIG_USE_SEMIHOSTING
void logger_log_print_(char* const msg)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
	printf(msg);
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f001 f8d3 	bl	80032c4 <iprintf>
	fflush(stdout);
 800211e:	4b05      	ldr	r3, [pc, #20]	@ (8002134 <logger_log_print_+0x24>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	4618      	mov	r0, r3
 8002126:	f000 fff7 	bl	8003118 <fflush>
}
 800212a:	bf00      	nop
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	20000058 	.word	0x20000058

08002138 <task_actuator_init>:
uint32_t g_task_actuator_cnt;
volatile uint32_t g_task_actuator_tick_cnt;

/********************** external functions definition ************************/
void task_actuator_init(void *parameters)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b088      	sub	sp, #32
 800213c:	af02      	add	r7, sp, #8
 800213e:	6078      	str	r0, [r7, #4]
	task_actuator_st_t state;
	task_actuator_ev_t event;
	bool b_event;

	/* Print out: Task Initialized */
	LOGGER_LOG("  %s is running - %s\r\n", GET_NAME(task_actuator_init), p_task_actuator);
 8002140:	b672      	cpsid	i
 8002142:	4b5f      	ldr	r3, [pc, #380]	@ (80022c0 <task_actuator_init+0x188>)
 8002144:	6818      	ldr	r0, [r3, #0]
 8002146:	4b5f      	ldr	r3, [pc, #380]	@ (80022c4 <task_actuator_init+0x18c>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	9300      	str	r3, [sp, #0]
 800214c:	4b5e      	ldr	r3, [pc, #376]	@ (80022c8 <task_actuator_init+0x190>)
 800214e:	4a5f      	ldr	r2, [pc, #380]	@ (80022cc <task_actuator_init+0x194>)
 8002150:	213f      	movs	r1, #63	@ 0x3f
 8002152:	f001 f8c9 	bl	80032e8 <sniprintf>
 8002156:	4603      	mov	r3, r0
 8002158:	4a5d      	ldr	r2, [pc, #372]	@ (80022d0 <task_actuator_init+0x198>)
 800215a:	6013      	str	r3, [r2, #0]
 800215c:	4b58      	ldr	r3, [pc, #352]	@ (80022c0 <task_actuator_init+0x188>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4618      	mov	r0, r3
 8002162:	f7ff ffd5 	bl	8002110 <logger_log_print_>
 8002166:	b662      	cpsie	i
	LOGGER_LOG("  %s is a %s\r\n", GET_NAME(task_actuator), p_task_actuator_);
 8002168:	b672      	cpsid	i
 800216a:	4b55      	ldr	r3, [pc, #340]	@ (80022c0 <task_actuator_init+0x188>)
 800216c:	6818      	ldr	r0, [r3, #0]
 800216e:	4b59      	ldr	r3, [pc, #356]	@ (80022d4 <task_actuator_init+0x19c>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	9300      	str	r3, [sp, #0]
 8002174:	4b58      	ldr	r3, [pc, #352]	@ (80022d8 <task_actuator_init+0x1a0>)
 8002176:	4a59      	ldr	r2, [pc, #356]	@ (80022dc <task_actuator_init+0x1a4>)
 8002178:	213f      	movs	r1, #63	@ 0x3f
 800217a:	f001 f8b5 	bl	80032e8 <sniprintf>
 800217e:	4603      	mov	r3, r0
 8002180:	4a53      	ldr	r2, [pc, #332]	@ (80022d0 <task_actuator_init+0x198>)
 8002182:	6013      	str	r3, [r2, #0]
 8002184:	4b4e      	ldr	r3, [pc, #312]	@ (80022c0 <task_actuator_init+0x188>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4618      	mov	r0, r3
 800218a:	f7ff ffc1 	bl	8002110 <logger_log_print_>
 800218e:	b662      	cpsie	i

	g_task_actuator_cnt = G_TASK_ACT_CNT_INIT;
 8002190:	4b53      	ldr	r3, [pc, #332]	@ (80022e0 <task_actuator_init+0x1a8>)
 8002192:	2200      	movs	r2, #0
 8002194:	601a      	str	r2, [r3, #0]

	/* Print out: Task execution counter */
	LOGGER_LOG("   %s = %lu\r\n", GET_NAME(g_task_actuator_cnt), g_task_actuator_cnt);
 8002196:	b672      	cpsid	i
 8002198:	4b49      	ldr	r3, [pc, #292]	@ (80022c0 <task_actuator_init+0x188>)
 800219a:	6818      	ldr	r0, [r3, #0]
 800219c:	4b50      	ldr	r3, [pc, #320]	@ (80022e0 <task_actuator_init+0x1a8>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	9300      	str	r3, [sp, #0]
 80021a2:	4b50      	ldr	r3, [pc, #320]	@ (80022e4 <task_actuator_init+0x1ac>)
 80021a4:	4a50      	ldr	r2, [pc, #320]	@ (80022e8 <task_actuator_init+0x1b0>)
 80021a6:	213f      	movs	r1, #63	@ 0x3f
 80021a8:	f001 f89e 	bl	80032e8 <sniprintf>
 80021ac:	4603      	mov	r3, r0
 80021ae:	4a48      	ldr	r2, [pc, #288]	@ (80022d0 <task_actuator_init+0x198>)
 80021b0:	6013      	str	r3, [r2, #0]
 80021b2:	4b43      	ldr	r3, [pc, #268]	@ (80022c0 <task_actuator_init+0x188>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7ff ffaa 	bl	8002110 <logger_log_print_>
 80021bc:	b662      	cpsie	i

	for (index = 0; ACTUATOR_DTA_QTY > index; index++)
 80021be:	2300      	movs	r3, #0
 80021c0:	617b      	str	r3, [r7, #20]
 80021c2:	e072      	b.n	80022aa <task_actuator_init+0x172>
	{
		/* Update Task Actuator Configuration & Data Pointer */
		p_task_actuator_cfg = &task_actuator_cfg_list[index];
 80021c4:	697a      	ldr	r2, [r7, #20]
 80021c6:	4613      	mov	r3, r2
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	4413      	add	r3, r2
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	4a47      	ldr	r2, [pc, #284]	@ (80022ec <task_actuator_init+0x1b4>)
 80021d0:	4413      	add	r3, r2
 80021d2:	613b      	str	r3, [r7, #16]
		p_task_actuator_dta = &task_actuator_dta_list[index];
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	00db      	lsls	r3, r3, #3
 80021d8:	4a45      	ldr	r2, [pc, #276]	@ (80022f0 <task_actuator_init+0x1b8>)
 80021da:	4413      	add	r3, r2
 80021dc:	60fb      	str	r3, [r7, #12]

		/* Print out: Index & Task execution FSM */
		LOGGER_LOG("   %s = %lu", GET_NAME(index), index);
 80021de:	b672      	cpsid	i
 80021e0:	4b37      	ldr	r3, [pc, #220]	@ (80022c0 <task_actuator_init+0x188>)
 80021e2:	6818      	ldr	r0, [r3, #0]
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	9300      	str	r3, [sp, #0]
 80021e8:	4b42      	ldr	r3, [pc, #264]	@ (80022f4 <task_actuator_init+0x1bc>)
 80021ea:	4a43      	ldr	r2, [pc, #268]	@ (80022f8 <task_actuator_init+0x1c0>)
 80021ec:	213f      	movs	r1, #63	@ 0x3f
 80021ee:	f001 f87b 	bl	80032e8 <sniprintf>
 80021f2:	4603      	mov	r3, r0
 80021f4:	4a36      	ldr	r2, [pc, #216]	@ (80022d0 <task_actuator_init+0x198>)
 80021f6:	6013      	str	r3, [r2, #0]
 80021f8:	4b31      	ldr	r3, [pc, #196]	@ (80022c0 <task_actuator_init+0x188>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7ff ff87 	bl	8002110 <logger_log_print_>
 8002202:	b662      	cpsie	i

		state = p_task_actuator_dta->state;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	791b      	ldrb	r3, [r3, #4]
 8002208:	72fb      	strb	r3, [r7, #11]
		LOGGER_LOG("   %s = %lu", GET_NAME(state), (uint32_t)state);
 800220a:	b672      	cpsid	i
 800220c:	4b2c      	ldr	r3, [pc, #176]	@ (80022c0 <task_actuator_init+0x188>)
 800220e:	6818      	ldr	r0, [r3, #0]
 8002210:	7afb      	ldrb	r3, [r7, #11]
 8002212:	9300      	str	r3, [sp, #0]
 8002214:	4b39      	ldr	r3, [pc, #228]	@ (80022fc <task_actuator_init+0x1c4>)
 8002216:	4a38      	ldr	r2, [pc, #224]	@ (80022f8 <task_actuator_init+0x1c0>)
 8002218:	213f      	movs	r1, #63	@ 0x3f
 800221a:	f001 f865 	bl	80032e8 <sniprintf>
 800221e:	4603      	mov	r3, r0
 8002220:	4a2b      	ldr	r2, [pc, #172]	@ (80022d0 <task_actuator_init+0x198>)
 8002222:	6013      	str	r3, [r2, #0]
 8002224:	4b26      	ldr	r3, [pc, #152]	@ (80022c0 <task_actuator_init+0x188>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4618      	mov	r0, r3
 800222a:	f7ff ff71 	bl	8002110 <logger_log_print_>
 800222e:	b662      	cpsie	i

		event = p_task_actuator_dta->event;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	795b      	ldrb	r3, [r3, #5]
 8002234:	72bb      	strb	r3, [r7, #10]
		LOGGER_LOG("   %s = %lu", GET_NAME(event), (uint32_t)event);
 8002236:	b672      	cpsid	i
 8002238:	4b21      	ldr	r3, [pc, #132]	@ (80022c0 <task_actuator_init+0x188>)
 800223a:	6818      	ldr	r0, [r3, #0]
 800223c:	7abb      	ldrb	r3, [r7, #10]
 800223e:	9300      	str	r3, [sp, #0]
 8002240:	4b2f      	ldr	r3, [pc, #188]	@ (8002300 <task_actuator_init+0x1c8>)
 8002242:	4a2d      	ldr	r2, [pc, #180]	@ (80022f8 <task_actuator_init+0x1c0>)
 8002244:	213f      	movs	r1, #63	@ 0x3f
 8002246:	f001 f84f 	bl	80032e8 <sniprintf>
 800224a:	4603      	mov	r3, r0
 800224c:	4a20      	ldr	r2, [pc, #128]	@ (80022d0 <task_actuator_init+0x198>)
 800224e:	6013      	str	r3, [r2, #0]
 8002250:	4b1b      	ldr	r3, [pc, #108]	@ (80022c0 <task_actuator_init+0x188>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4618      	mov	r0, r3
 8002256:	f7ff ff5b 	bl	8002110 <logger_log_print_>
 800225a:	b662      	cpsie	i

		b_event = p_task_actuator_dta->flag;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	799b      	ldrb	r3, [r3, #6]
 8002260:	727b      	strb	r3, [r7, #9]
		LOGGER_LOG("   %s = %s\r\n", GET_NAME(b_event), (b_event ? "true" : "false"));
 8002262:	b672      	cpsid	i
 8002264:	4b16      	ldr	r3, [pc, #88]	@ (80022c0 <task_actuator_init+0x188>)
 8002266:	6818      	ldr	r0, [r3, #0]
 8002268:	7a7b      	ldrb	r3, [r7, #9]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <task_actuator_init+0x13a>
 800226e:	4b25      	ldr	r3, [pc, #148]	@ (8002304 <task_actuator_init+0x1cc>)
 8002270:	e000      	b.n	8002274 <task_actuator_init+0x13c>
 8002272:	4b25      	ldr	r3, [pc, #148]	@ (8002308 <task_actuator_init+0x1d0>)
 8002274:	9300      	str	r3, [sp, #0]
 8002276:	4b25      	ldr	r3, [pc, #148]	@ (800230c <task_actuator_init+0x1d4>)
 8002278:	4a25      	ldr	r2, [pc, #148]	@ (8002310 <task_actuator_init+0x1d8>)
 800227a:	213f      	movs	r1, #63	@ 0x3f
 800227c:	f001 f834 	bl	80032e8 <sniprintf>
 8002280:	4603      	mov	r3, r0
 8002282:	4a13      	ldr	r2, [pc, #76]	@ (80022d0 <task_actuator_init+0x198>)
 8002284:	6013      	str	r3, [r2, #0]
 8002286:	4b0e      	ldr	r3, [pc, #56]	@ (80022c0 <task_actuator_init+0x188>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4618      	mov	r0, r3
 800228c:	f7ff ff40 	bl	8002110 <logger_log_print_>
 8002290:	b662      	cpsie	i

		HAL_GPIO_WritePin(p_task_actuator_cfg->gpio_port, p_task_actuator_cfg->pin, p_task_actuator_cfg->act_off);
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	6858      	ldr	r0, [r3, #4]
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	8919      	ldrh	r1, [r3, #8]
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	7adb      	ldrb	r3, [r3, #11]
 800229e:	461a      	mov	r2, r3
 80022a0:	f7fe fd31 	bl	8000d06 <HAL_GPIO_WritePin>
	for (index = 0; ACTUATOR_DTA_QTY > index; index++)
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	3301      	adds	r3, #1
 80022a8:	617b      	str	r3, [r7, #20]
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d989      	bls.n	80021c4 <task_actuator_init+0x8c>
	}

	g_task_actuator_tick_cnt = G_TASK_ACT_TICK_CNT_INI;
 80022b0:	4b18      	ldr	r3, [pc, #96]	@ (8002314 <task_actuator_init+0x1dc>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	601a      	str	r2, [r3, #0]
}
 80022b6:	bf00      	nop
 80022b8:	3718      	adds	r7, #24
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	0800460c 	.word	0x0800460c
 80022c4:	2000002c 	.word	0x2000002c
 80022c8:	08004330 	.word	0x08004330
 80022cc:	08004344 	.word	0x08004344
 80022d0:	20000178 	.word	0x20000178
 80022d4:	20000030 	.word	0x20000030
 80022d8:	0800435c 	.word	0x0800435c
 80022dc:	0800436c 	.word	0x0800436c
 80022e0:	2000017c 	.word	0x2000017c
 80022e4:	0800437c 	.word	0x0800437c
 80022e8:	08004390 	.word	0x08004390
 80022ec:	08004610 	.word	0x08004610
 80022f0:	20000014 	.word	0x20000014
 80022f4:	080043a0 	.word	0x080043a0
 80022f8:	080043a8 	.word	0x080043a8
 80022fc:	080043b4 	.word	0x080043b4
 8002300:	080043bc 	.word	0x080043bc
 8002304:	080043c4 	.word	0x080043c4
 8002308:	080043cc 	.word	0x080043cc
 800230c:	080043d4 	.word	0x080043d4
 8002310:	080043dc 	.word	0x080043dc
 8002314:	20000180 	.word	0x20000180

08002318 <task_actuator_update>:

void task_actuator_update(void *parameters)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b086      	sub	sp, #24
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
	uint32_t index;
	const task_actuator_cfg_t *p_task_actuator_cfg;
	task_actuator_dta_t *p_task_actuator_dta;
	bool b_time_update_required = false;
 8002320:	2300      	movs	r3, #0
 8002322:	74fb      	strb	r3, [r7, #19]

	/* Update Task Actuator Counter */
	g_task_actuator_cnt++;
 8002324:	4b43      	ldr	r3, [pc, #268]	@ (8002434 <task_actuator_update+0x11c>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	3301      	adds	r3, #1
 800232a:	4a42      	ldr	r2, [pc, #264]	@ (8002434 <task_actuator_update+0x11c>)
 800232c:	6013      	str	r3, [r2, #0]

	/* Protect shared resource (g_task_actuator_tick_cnt) */
	__asm("CPSID i");	/* disable interrupts*/
 800232e:	b672      	cpsid	i
    if (G_TASK_ACT_TICK_CNT_INI < g_task_actuator_tick_cnt)
 8002330:	4b41      	ldr	r3, [pc, #260]	@ (8002438 <task_actuator_update+0x120>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d006      	beq.n	8002346 <task_actuator_update+0x2e>
    {
    	g_task_actuator_tick_cnt--;
 8002338:	4b3f      	ldr	r3, [pc, #252]	@ (8002438 <task_actuator_update+0x120>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	3b01      	subs	r3, #1
 800233e:	4a3e      	ldr	r2, [pc, #248]	@ (8002438 <task_actuator_update+0x120>)
 8002340:	6013      	str	r3, [r2, #0]
    	b_time_update_required = true;
 8002342:	2301      	movs	r3, #1
 8002344:	74fb      	strb	r3, [r7, #19]
    }
    __asm("CPSIE i");	/* enable interrupts*/
 8002346:	b662      	cpsie	i

    while (b_time_update_required)
 8002348:	e06b      	b.n	8002422 <task_actuator_update+0x10a>
    {
		/* Protect shared resource (g_task_actuator_tick_cnt) */
		__asm("CPSID i");	/* disable interrupts*/
 800234a:	b672      	cpsid	i
		if (G_TASK_ACT_TICK_CNT_INI < g_task_actuator_tick_cnt)
 800234c:	4b3a      	ldr	r3, [pc, #232]	@ (8002438 <task_actuator_update+0x120>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d007      	beq.n	8002364 <task_actuator_update+0x4c>
		{
			g_task_actuator_tick_cnt--;
 8002354:	4b38      	ldr	r3, [pc, #224]	@ (8002438 <task_actuator_update+0x120>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	3b01      	subs	r3, #1
 800235a:	4a37      	ldr	r2, [pc, #220]	@ (8002438 <task_actuator_update+0x120>)
 800235c:	6013      	str	r3, [r2, #0]
			b_time_update_required = true;
 800235e:	2301      	movs	r3, #1
 8002360:	74fb      	strb	r3, [r7, #19]
 8002362:	e001      	b.n	8002368 <task_actuator_update+0x50>
		}
		else
		{
			b_time_update_required = false;
 8002364:	2300      	movs	r3, #0
 8002366:	74fb      	strb	r3, [r7, #19]
		}
		__asm("CPSIE i");	/* enable interrupts*/
 8002368:	b662      	cpsie	i

    	for (index = 0; ACTUATOR_DTA_QTY > index; index++)
 800236a:	2300      	movs	r3, #0
 800236c:	617b      	str	r3, [r7, #20]
 800236e:	e055      	b.n	800241c <task_actuator_update+0x104>
		{
    		/* Update Task Actuator Configuration & Data Pointer */
			p_task_actuator_cfg = &task_actuator_cfg_list[index];
 8002370:	697a      	ldr	r2, [r7, #20]
 8002372:	4613      	mov	r3, r2
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	4413      	add	r3, r2
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	4a30      	ldr	r2, [pc, #192]	@ (800243c <task_actuator_update+0x124>)
 800237c:	4413      	add	r3, r2
 800237e:	60fb      	str	r3, [r7, #12]
			p_task_actuator_dta = &task_actuator_dta_list[index];
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	00db      	lsls	r3, r3, #3
 8002384:	4a2e      	ldr	r2, [pc, #184]	@ (8002440 <task_actuator_update+0x128>)
 8002386:	4413      	add	r3, r2
 8002388:	60bb      	str	r3, [r7, #8]

			switch (p_task_actuator_dta->state)
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	791b      	ldrb	r3, [r3, #4]
 800238e:	2b04      	cmp	r3, #4
 8002390:	d83c      	bhi.n	800240c <task_actuator_update+0xf4>
 8002392:	a201      	add	r2, pc, #4	@ (adr r2, 8002398 <task_actuator_update+0x80>)
 8002394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002398:	080023ad 	.word	0x080023ad
 800239c:	080023dd 	.word	0x080023dd
 80023a0:	0800240d 	.word	0x0800240d
 80023a4:	0800240d 	.word	0x0800240d
 80023a8:	0800240d 	.word	0x0800240d
			{
				case ST_ACT_XX_OFF:

					if ((true == p_task_actuator_dta->flag) && (EV_ACT_XX_ON == p_task_actuator_dta->event))
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	799b      	ldrb	r3, [r3, #6]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d02d      	beq.n	8002410 <task_actuator_update+0xf8>
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	795b      	ldrb	r3, [r3, #5]
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d129      	bne.n	8002410 <task_actuator_update+0xf8>
					{
						p_task_actuator_dta->flag = false;
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	2200      	movs	r2, #0
 80023c0:	719a      	strb	r2, [r3, #6]
						HAL_GPIO_WritePin(p_task_actuator_cfg->gpio_port, p_task_actuator_cfg->pin, p_task_actuator_cfg->act_on);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6858      	ldr	r0, [r3, #4]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	8919      	ldrh	r1, [r3, #8]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	7a9b      	ldrb	r3, [r3, #10]
 80023ce:	461a      	mov	r2, r3
 80023d0:	f7fe fc99 	bl	8000d06 <HAL_GPIO_WritePin>
						p_task_actuator_dta->state = ST_ACT_XX_ON;
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	2201      	movs	r2, #1
 80023d8:	711a      	strb	r2, [r3, #4]
					}

					break;
 80023da:	e019      	b.n	8002410 <task_actuator_update+0xf8>

				case ST_ACT_XX_ON:

					if ((true == p_task_actuator_dta->flag) && (EV_ACT_XX_OFF == p_task_actuator_dta->event))
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	799b      	ldrb	r3, [r3, #6]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d017      	beq.n	8002414 <task_actuator_update+0xfc>
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	795b      	ldrb	r3, [r3, #5]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d113      	bne.n	8002414 <task_actuator_update+0xfc>
					{
						p_task_actuator_dta->flag = false;
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	2200      	movs	r2, #0
 80023f0:	719a      	strb	r2, [r3, #6]
						HAL_GPIO_WritePin(p_task_actuator_cfg->gpio_port, p_task_actuator_cfg->pin, p_task_actuator_cfg->act_off);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	6858      	ldr	r0, [r3, #4]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	8919      	ldrh	r1, [r3, #8]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	7adb      	ldrb	r3, [r3, #11]
 80023fe:	461a      	mov	r2, r3
 8002400:	f7fe fc81 	bl	8000d06 <HAL_GPIO_WritePin>
						p_task_actuator_dta->state = ST_ACT_XX_OFF;
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	2200      	movs	r2, #0
 8002408:	711a      	strb	r2, [r3, #4]
					}

					break;
 800240a:	e003      	b.n	8002414 <task_actuator_update+0xfc>

					break;

				default:

					break;
 800240c:	bf00      	nop
 800240e:	e002      	b.n	8002416 <task_actuator_update+0xfe>
					break;
 8002410:	bf00      	nop
 8002412:	e000      	b.n	8002416 <task_actuator_update+0xfe>
					break;
 8002414:	bf00      	nop
    	for (index = 0; ACTUATOR_DTA_QTY > index; index++)
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	3301      	adds	r3, #1
 800241a:	617b      	str	r3, [r7, #20]
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	2b02      	cmp	r3, #2
 8002420:	d9a6      	bls.n	8002370 <task_actuator_update+0x58>
    while (b_time_update_required)
 8002422:	7cfb      	ldrb	r3, [r7, #19]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d190      	bne.n	800234a <task_actuator_update+0x32>
			}
		}
    }
}
 8002428:	bf00      	nop
 800242a:	bf00      	nop
 800242c:	3718      	adds	r7, #24
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	2000017c 	.word	0x2000017c
 8002438:	20000180 	.word	0x20000180
 800243c:	08004610 	.word	0x08004610
 8002440:	20000014 	.word	0x20000014

08002444 <put_event_task_actuator>:

/********************** external data declaration ****************************/

/********************** external functions definition ************************/
void put_event_task_actuator(task_actuator_ev_t event, task_actuator_id_t identifier)
{
 8002444:	b480      	push	{r7}
 8002446:	b085      	sub	sp, #20
 8002448:	af00      	add	r7, sp, #0
 800244a:	4603      	mov	r3, r0
 800244c:	460a      	mov	r2, r1
 800244e:	71fb      	strb	r3, [r7, #7]
 8002450:	4613      	mov	r3, r2
 8002452:	71bb      	strb	r3, [r7, #6]
	task_actuator_dta_t *p_task_actuator_dta;

	p_task_actuator_dta = &task_actuator_dta_list[identifier];
 8002454:	79bb      	ldrb	r3, [r7, #6]
 8002456:	00db      	lsls	r3, r3, #3
 8002458:	4a06      	ldr	r2, [pc, #24]	@ (8002474 <put_event_task_actuator+0x30>)
 800245a:	4413      	add	r3, r2
 800245c:	60fb      	str	r3, [r7, #12]

	p_task_actuator_dta->event = event;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	79fa      	ldrb	r2, [r7, #7]
 8002462:	715a      	strb	r2, [r3, #5]
	p_task_actuator_dta->flag = true;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2201      	movs	r2, #1
 8002468:	719a      	strb	r2, [r3, #6]
}
 800246a:	bf00      	nop
 800246c:	3714      	adds	r7, #20
 800246e:	46bd      	mov	sp, r7
 8002470:	bc80      	pop	{r7}
 8002472:	4770      	bx	lr
 8002474:	20000014 	.word	0x20000014

08002478 <task_sensor_init>:
uint32_t g_task_sensor_cnt;
volatile uint32_t g_task_sensor_tick_cnt;

/********************** external functions definition ************************/
void task_sensor_init(void *parameters)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b088      	sub	sp, #32
 800247c:	af02      	add	r7, sp, #8
 800247e:	6078      	str	r0, [r7, #4]
	task_sensor_dta_t *p_task_sensor_dta;
	task_sensor_st_t state;
	task_sensor_ev_t event;

	/* Print out: Task Initialized */
	LOGGER_LOG("  %s is running - %s\r\n", GET_NAME(task_sensor_init), p_task_sensor);
 8002480:	b672      	cpsid	i
 8002482:	4b49      	ldr	r3, [pc, #292]	@ (80025a8 <task_sensor_init+0x130>)
 8002484:	6818      	ldr	r0, [r3, #0]
 8002486:	4b49      	ldr	r3, [pc, #292]	@ (80025ac <task_sensor_init+0x134>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	9300      	str	r3, [sp, #0]
 800248c:	4b48      	ldr	r3, [pc, #288]	@ (80025b0 <task_sensor_init+0x138>)
 800248e:	4a49      	ldr	r2, [pc, #292]	@ (80025b4 <task_sensor_init+0x13c>)
 8002490:	213f      	movs	r1, #63	@ 0x3f
 8002492:	f000 ff29 	bl	80032e8 <sniprintf>
 8002496:	4603      	mov	r3, r0
 8002498:	4a47      	ldr	r2, [pc, #284]	@ (80025b8 <task_sensor_init+0x140>)
 800249a:	6013      	str	r3, [r2, #0]
 800249c:	4b42      	ldr	r3, [pc, #264]	@ (80025a8 <task_sensor_init+0x130>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7ff fe35 	bl	8002110 <logger_log_print_>
 80024a6:	b662      	cpsie	i
	LOGGER_LOG("  %s is a %s\r\n", GET_NAME(task_sensor), p_task_sensor_);
 80024a8:	b672      	cpsid	i
 80024aa:	4b3f      	ldr	r3, [pc, #252]	@ (80025a8 <task_sensor_init+0x130>)
 80024ac:	6818      	ldr	r0, [r3, #0]
 80024ae:	4b43      	ldr	r3, [pc, #268]	@ (80025bc <task_sensor_init+0x144>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	9300      	str	r3, [sp, #0]
 80024b4:	4b42      	ldr	r3, [pc, #264]	@ (80025c0 <task_sensor_init+0x148>)
 80024b6:	4a43      	ldr	r2, [pc, #268]	@ (80025c4 <task_sensor_init+0x14c>)
 80024b8:	213f      	movs	r1, #63	@ 0x3f
 80024ba:	f000 ff15 	bl	80032e8 <sniprintf>
 80024be:	4603      	mov	r3, r0
 80024c0:	4a3d      	ldr	r2, [pc, #244]	@ (80025b8 <task_sensor_init+0x140>)
 80024c2:	6013      	str	r3, [r2, #0]
 80024c4:	4b38      	ldr	r3, [pc, #224]	@ (80025a8 <task_sensor_init+0x130>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7ff fe21 	bl	8002110 <logger_log_print_>
 80024ce:	b662      	cpsie	i

	g_task_sensor_cnt = G_TASK_SEN_CNT_INIT;
 80024d0:	4b3d      	ldr	r3, [pc, #244]	@ (80025c8 <task_sensor_init+0x150>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	601a      	str	r2, [r3, #0]

	/* Print out: Task execution counter */
	LOGGER_LOG("   %s = %lu\r\n", GET_NAME(g_task_sensor_cnt), g_task_sensor_cnt);
 80024d6:	b672      	cpsid	i
 80024d8:	4b33      	ldr	r3, [pc, #204]	@ (80025a8 <task_sensor_init+0x130>)
 80024da:	6818      	ldr	r0, [r3, #0]
 80024dc:	4b3a      	ldr	r3, [pc, #232]	@ (80025c8 <task_sensor_init+0x150>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	9300      	str	r3, [sp, #0]
 80024e2:	4b3a      	ldr	r3, [pc, #232]	@ (80025cc <task_sensor_init+0x154>)
 80024e4:	4a3a      	ldr	r2, [pc, #232]	@ (80025d0 <task_sensor_init+0x158>)
 80024e6:	213f      	movs	r1, #63	@ 0x3f
 80024e8:	f000 fefe 	bl	80032e8 <sniprintf>
 80024ec:	4603      	mov	r3, r0
 80024ee:	4a32      	ldr	r2, [pc, #200]	@ (80025b8 <task_sensor_init+0x140>)
 80024f0:	6013      	str	r3, [r2, #0]
 80024f2:	4b2d      	ldr	r3, [pc, #180]	@ (80025a8 <task_sensor_init+0x130>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7ff fe0a 	bl	8002110 <logger_log_print_>
 80024fc:	b662      	cpsie	i

	for (index = 0; SENSOR_DTA_QTY > index; index++)
 80024fe:	2300      	movs	r3, #0
 8002500:	617b      	str	r3, [r7, #20]
 8002502:	e046      	b.n	8002592 <task_sensor_init+0x11a>
	{
		/* Update Task Sensor Data Pointer */
		p_task_sensor_dta = &task_sensor_dta_list[index];
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	00db      	lsls	r3, r3, #3
 8002508:	4a32      	ldr	r2, [pc, #200]	@ (80025d4 <task_sensor_init+0x15c>)
 800250a:	4413      	add	r3, r2
 800250c:	613b      	str	r3, [r7, #16]

		/* Print out: Index & Task execution FSM */
		LOGGER_LOG("   %s = %lu", GET_NAME(index), index);
 800250e:	b672      	cpsid	i
 8002510:	4b25      	ldr	r3, [pc, #148]	@ (80025a8 <task_sensor_init+0x130>)
 8002512:	6818      	ldr	r0, [r3, #0]
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	9300      	str	r3, [sp, #0]
 8002518:	4b2f      	ldr	r3, [pc, #188]	@ (80025d8 <task_sensor_init+0x160>)
 800251a:	4a30      	ldr	r2, [pc, #192]	@ (80025dc <task_sensor_init+0x164>)
 800251c:	213f      	movs	r1, #63	@ 0x3f
 800251e:	f000 fee3 	bl	80032e8 <sniprintf>
 8002522:	4603      	mov	r3, r0
 8002524:	4a24      	ldr	r2, [pc, #144]	@ (80025b8 <task_sensor_init+0x140>)
 8002526:	6013      	str	r3, [r2, #0]
 8002528:	4b1f      	ldr	r3, [pc, #124]	@ (80025a8 <task_sensor_init+0x130>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4618      	mov	r0, r3
 800252e:	f7ff fdef 	bl	8002110 <logger_log_print_>
 8002532:	b662      	cpsie	i

		state = p_task_sensor_dta->state;
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	791b      	ldrb	r3, [r3, #4]
 8002538:	73fb      	strb	r3, [r7, #15]
		LOGGER_LOG("   %s = %lu", GET_NAME(state), (uint32_t)state);
 800253a:	b672      	cpsid	i
 800253c:	4b1a      	ldr	r3, [pc, #104]	@ (80025a8 <task_sensor_init+0x130>)
 800253e:	6818      	ldr	r0, [r3, #0]
 8002540:	7bfb      	ldrb	r3, [r7, #15]
 8002542:	9300      	str	r3, [sp, #0]
 8002544:	4b26      	ldr	r3, [pc, #152]	@ (80025e0 <task_sensor_init+0x168>)
 8002546:	4a25      	ldr	r2, [pc, #148]	@ (80025dc <task_sensor_init+0x164>)
 8002548:	213f      	movs	r1, #63	@ 0x3f
 800254a:	f000 fecd 	bl	80032e8 <sniprintf>
 800254e:	4603      	mov	r3, r0
 8002550:	4a19      	ldr	r2, [pc, #100]	@ (80025b8 <task_sensor_init+0x140>)
 8002552:	6013      	str	r3, [r2, #0]
 8002554:	4b14      	ldr	r3, [pc, #80]	@ (80025a8 <task_sensor_init+0x130>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4618      	mov	r0, r3
 800255a:	f7ff fdd9 	bl	8002110 <logger_log_print_>
 800255e:	b662      	cpsie	i

		event = p_task_sensor_dta->event;
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	795b      	ldrb	r3, [r3, #5]
 8002564:	73bb      	strb	r3, [r7, #14]
		LOGGER_LOG("   %s = %lu\r\n", GET_NAME(event), (uint32_t)event);
 8002566:	b672      	cpsid	i
 8002568:	4b0f      	ldr	r3, [pc, #60]	@ (80025a8 <task_sensor_init+0x130>)
 800256a:	6818      	ldr	r0, [r3, #0]
 800256c:	7bbb      	ldrb	r3, [r7, #14]
 800256e:	9300      	str	r3, [sp, #0]
 8002570:	4b1c      	ldr	r3, [pc, #112]	@ (80025e4 <task_sensor_init+0x16c>)
 8002572:	4a17      	ldr	r2, [pc, #92]	@ (80025d0 <task_sensor_init+0x158>)
 8002574:	213f      	movs	r1, #63	@ 0x3f
 8002576:	f000 feb7 	bl	80032e8 <sniprintf>
 800257a:	4603      	mov	r3, r0
 800257c:	4a0e      	ldr	r2, [pc, #56]	@ (80025b8 <task_sensor_init+0x140>)
 800257e:	6013      	str	r3, [r2, #0]
 8002580:	4b09      	ldr	r3, [pc, #36]	@ (80025a8 <task_sensor_init+0x130>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4618      	mov	r0, r3
 8002586:	f7ff fdc3 	bl	8002110 <logger_log_print_>
 800258a:	b662      	cpsie	i
	for (index = 0; SENSOR_DTA_QTY > index; index++)
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	3301      	adds	r3, #1
 8002590:	617b      	str	r3, [r7, #20]
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d0b5      	beq.n	8002504 <task_sensor_init+0x8c>
	}
	g_task_sensor_tick_cnt = G_TASK_SEN_TICK_CNT_INI;
 8002598:	4b13      	ldr	r3, [pc, #76]	@ (80025e8 <task_sensor_init+0x170>)
 800259a:	2200      	movs	r2, #0
 800259c:	601a      	str	r2, [r3, #0]
}
 800259e:	bf00      	nop
 80025a0:	3718      	adds	r7, #24
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	0800460c 	.word	0x0800460c
 80025ac:	20000034 	.word	0x20000034
 80025b0:	08004430 	.word	0x08004430
 80025b4:	08004444 	.word	0x08004444
 80025b8:	20000178 	.word	0x20000178
 80025bc:	20000038 	.word	0x20000038
 80025c0:	0800445c 	.word	0x0800445c
 80025c4:	08004468 	.word	0x08004468
 80025c8:	2000018c 	.word	0x2000018c
 80025cc:	08004478 	.word	0x08004478
 80025d0:	0800448c 	.word	0x0800448c
 80025d4:	20000184 	.word	0x20000184
 80025d8:	0800449c 	.word	0x0800449c
 80025dc:	080044a4 	.word	0x080044a4
 80025e0:	080044b0 	.word	0x080044b0
 80025e4:	080044b8 	.word	0x080044b8
 80025e8:	20000190 	.word	0x20000190

080025ec <task_sensor_update>:

void task_sensor_update(void *parameters)
{
 80025ec:	b590      	push	{r4, r7, lr}
 80025ee:	b087      	sub	sp, #28
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
	uint32_t index;
	const task_sensor_cfg_t *p_task_sensor_cfg;
	task_sensor_dta_t *p_task_sensor_dta;
	bool b_time_update_required = false;
 80025f4:	2300      	movs	r3, #0
 80025f6:	74fb      	strb	r3, [r7, #19]

	/* Update Task Sensor Counter */
	g_task_sensor_cnt++;
 80025f8:	4b41      	ldr	r3, [pc, #260]	@ (8002700 <task_sensor_update+0x114>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	3301      	adds	r3, #1
 80025fe:	4a40      	ldr	r2, [pc, #256]	@ (8002700 <task_sensor_update+0x114>)
 8002600:	6013      	str	r3, [r2, #0]

	/* Protect shared resource (g_task_sensor_tick_cnt) */
	__asm("CPSID i");	/* disable interrupts*/
 8002602:	b672      	cpsid	i
    if (G_TASK_SEN_TICK_CNT_INI < g_task_sensor_tick_cnt)
 8002604:	4b3f      	ldr	r3, [pc, #252]	@ (8002704 <task_sensor_update+0x118>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d006      	beq.n	800261a <task_sensor_update+0x2e>
    {
    	g_task_sensor_tick_cnt--;
 800260c:	4b3d      	ldr	r3, [pc, #244]	@ (8002704 <task_sensor_update+0x118>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	3b01      	subs	r3, #1
 8002612:	4a3c      	ldr	r2, [pc, #240]	@ (8002704 <task_sensor_update+0x118>)
 8002614:	6013      	str	r3, [r2, #0]
    	b_time_update_required = true;
 8002616:	2301      	movs	r3, #1
 8002618:	74fb      	strb	r3, [r7, #19]
    }
    __asm("CPSIE i");	/* enable interrupts*/
 800261a:	b662      	cpsie	i

    while (b_time_update_required)
 800261c:	e067      	b.n	80026ee <task_sensor_update+0x102>
    {
		/* Protect shared resource (g_task_sensor_tick_cnt) */
		__asm("CPSID i");	/* disable interrupts*/
 800261e:	b672      	cpsid	i
		if (G_TASK_SEN_TICK_CNT_INI < g_task_sensor_tick_cnt)
 8002620:	4b38      	ldr	r3, [pc, #224]	@ (8002704 <task_sensor_update+0x118>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d007      	beq.n	8002638 <task_sensor_update+0x4c>
		{
			g_task_sensor_tick_cnt--;
 8002628:	4b36      	ldr	r3, [pc, #216]	@ (8002704 <task_sensor_update+0x118>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	3b01      	subs	r3, #1
 800262e:	4a35      	ldr	r2, [pc, #212]	@ (8002704 <task_sensor_update+0x118>)
 8002630:	6013      	str	r3, [r2, #0]
			b_time_update_required = true;
 8002632:	2301      	movs	r3, #1
 8002634:	74fb      	strb	r3, [r7, #19]
 8002636:	e001      	b.n	800263c <task_sensor_update+0x50>
		}
		else
		{
			b_time_update_required = false;
 8002638:	2300      	movs	r3, #0
 800263a:	74fb      	strb	r3, [r7, #19]
		}
		__asm("CPSIE i");	/* enable interrupts*/
 800263c:	b662      	cpsie	i

    	for (index = 0; SENSOR_DTA_QTY > index; index++)
 800263e:	2300      	movs	r3, #0
 8002640:	617b      	str	r3, [r7, #20]
 8002642:	e051      	b.n	80026e8 <task_sensor_update+0xfc>
		{
    		/* Update Task Sensor Configuration & Data Pointer */
			p_task_sensor_cfg = &task_sensor_cfg_list[index];
 8002644:	697a      	ldr	r2, [r7, #20]
 8002646:	4613      	mov	r3, r2
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	4413      	add	r3, r2
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	4a2e      	ldr	r2, [pc, #184]	@ (8002708 <task_sensor_update+0x11c>)
 8002650:	4413      	add	r3, r2
 8002652:	60fb      	str	r3, [r7, #12]
			p_task_sensor_dta = &task_sensor_dta_list[index];
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	00db      	lsls	r3, r3, #3
 8002658:	4a2c      	ldr	r2, [pc, #176]	@ (800270c <task_sensor_update+0x120>)
 800265a:	4413      	add	r3, r2
 800265c:	60bb      	str	r3, [r7, #8]

			if (p_task_sensor_cfg->pressed == HAL_GPIO_ReadPin(p_task_sensor_cfg->gpio_port, p_task_sensor_cfg->pin))
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	7a9c      	ldrb	r4, [r3, #10]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	685a      	ldr	r2, [r3, #4]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	891b      	ldrh	r3, [r3, #8]
 800266a:	4619      	mov	r1, r3
 800266c:	4610      	mov	r0, r2
 800266e:	f7fe fb33 	bl	8000cd8 <HAL_GPIO_ReadPin>
 8002672:	4603      	mov	r3, r0
 8002674:	429c      	cmp	r4, r3
 8002676:	d103      	bne.n	8002680 <task_sensor_update+0x94>
			{
				p_task_sensor_dta->event =	EV_BTN_XX_DOWN;
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	2201      	movs	r2, #1
 800267c:	715a      	strb	r2, [r3, #5]
 800267e:	e002      	b.n	8002686 <task_sensor_update+0x9a>
			}
			else
			{
				p_task_sensor_dta->event =	EV_BTN_XX_UP;
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	2200      	movs	r2, #0
 8002684:	715a      	strb	r2, [r3, #5]
			}

			switch (p_task_sensor_dta->state)
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	791b      	ldrb	r3, [r3, #4]
 800268a:	2b03      	cmp	r3, #3
 800268c:	d824      	bhi.n	80026d8 <task_sensor_update+0xec>
 800268e:	a201      	add	r2, pc, #4	@ (adr r2, 8002694 <task_sensor_update+0xa8>)
 8002690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002694:	080026a5 	.word	0x080026a5
 8002698:	080026d9 	.word	0x080026d9
 800269c:	080026bf 	.word	0x080026bf
 80026a0:	080026d9 	.word	0x080026d9
			{
				case ST_BTN_XX_UP:

					if (EV_BTN_XX_DOWN == p_task_sensor_dta->event)
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	795b      	ldrb	r3, [r3, #5]
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d117      	bne.n	80026dc <task_sensor_update+0xf0>
					{
						put_event_task_system(p_task_sensor_cfg->signal_down);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	7c5b      	ldrb	r3, [r3, #17]
 80026b0:	4618      	mov	r0, r3
 80026b2:	f000 f999 	bl	80029e8 <put_event_task_system>
						p_task_sensor_dta->state = ST_BTN_XX_DOWN;
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	2202      	movs	r2, #2
 80026ba:	711a      	strb	r2, [r3, #4]
					}

					break;
 80026bc:	e00e      	b.n	80026dc <task_sensor_update+0xf0>

					break;

				case ST_BTN_XX_DOWN:

					if (EV_BTN_XX_UP == p_task_sensor_dta->event)
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	795b      	ldrb	r3, [r3, #5]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d10c      	bne.n	80026e0 <task_sensor_update+0xf4>
					{
						put_event_task_system(p_task_sensor_cfg->signal_up);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	7c1b      	ldrb	r3, [r3, #16]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f000 f98c 	bl	80029e8 <put_event_task_system>
						p_task_sensor_dta->state = ST_BTN_XX_UP;
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	2200      	movs	r2, #0
 80026d4:	711a      	strb	r2, [r3, #4]
					}

					break;
 80026d6:	e003      	b.n	80026e0 <task_sensor_update+0xf4>

					break;

				default:

					break;
 80026d8:	bf00      	nop
 80026da:	e002      	b.n	80026e2 <task_sensor_update+0xf6>
					break;
 80026dc:	bf00      	nop
 80026de:	e000      	b.n	80026e2 <task_sensor_update+0xf6>
					break;
 80026e0:	bf00      	nop
    	for (index = 0; SENSOR_DTA_QTY > index; index++)
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	3301      	adds	r3, #1
 80026e6:	617b      	str	r3, [r7, #20]
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d0aa      	beq.n	8002644 <task_sensor_update+0x58>
    while (b_time_update_required)
 80026ee:	7cfb      	ldrb	r3, [r7, #19]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d194      	bne.n	800261e <task_sensor_update+0x32>
			}
		}
    }
}
 80026f4:	bf00      	nop
 80026f6:	bf00      	nop
 80026f8:	371c      	adds	r7, #28
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd90      	pop	{r4, r7, pc}
 80026fe:	bf00      	nop
 8002700:	2000018c 	.word	0x2000018c
 8002704:	20000190 	.word	0x20000190
 8002708:	0800464c 	.word	0x0800464c
 800270c:	20000184 	.word	0x20000184

08002710 <task_system_init>:

I2C_LCD_HandleTypeDef lcd1;

/********************** external functions definition ************************/
void task_system_init(void *parameters)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b086      	sub	sp, #24
 8002714:	af02      	add	r7, sp, #8
 8002716:	6078      	str	r0, [r7, #4]
	task_system_st_t	state;
	task_system_ev_t	event;
	bool b_event;

	/* Print out: Task Initialized */
	LOGGER_LOG("  %s is running - %s\r\n", GET_NAME(task_system_init), p_task_system);
 8002718:	b672      	cpsid	i
 800271a:	4b4e      	ldr	r3, [pc, #312]	@ (8002854 <task_system_init+0x144>)
 800271c:	6818      	ldr	r0, [r3, #0]
 800271e:	4b4e      	ldr	r3, [pc, #312]	@ (8002858 <task_system_init+0x148>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	9300      	str	r3, [sp, #0]
 8002724:	4b4d      	ldr	r3, [pc, #308]	@ (800285c <task_system_init+0x14c>)
 8002726:	4a4e      	ldr	r2, [pc, #312]	@ (8002860 <task_system_init+0x150>)
 8002728:	213f      	movs	r1, #63	@ 0x3f
 800272a:	f000 fddd 	bl	80032e8 <sniprintf>
 800272e:	4603      	mov	r3, r0
 8002730:	4a4c      	ldr	r2, [pc, #304]	@ (8002864 <task_system_init+0x154>)
 8002732:	6013      	str	r3, [r2, #0]
 8002734:	4b47      	ldr	r3, [pc, #284]	@ (8002854 <task_system_init+0x144>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4618      	mov	r0, r3
 800273a:	f7ff fce9 	bl	8002110 <logger_log_print_>
 800273e:	b662      	cpsie	i
	LOGGER_LOG("  %s is a %s\r\n", GET_NAME(task_system), p_task_system_);
 8002740:	b672      	cpsid	i
 8002742:	4b44      	ldr	r3, [pc, #272]	@ (8002854 <task_system_init+0x144>)
 8002744:	6818      	ldr	r0, [r3, #0]
 8002746:	4b48      	ldr	r3, [pc, #288]	@ (8002868 <task_system_init+0x158>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	9300      	str	r3, [sp, #0]
 800274c:	4b47      	ldr	r3, [pc, #284]	@ (800286c <task_system_init+0x15c>)
 800274e:	4a48      	ldr	r2, [pc, #288]	@ (8002870 <task_system_init+0x160>)
 8002750:	213f      	movs	r1, #63	@ 0x3f
 8002752:	f000 fdc9 	bl	80032e8 <sniprintf>
 8002756:	4603      	mov	r3, r0
 8002758:	4a42      	ldr	r2, [pc, #264]	@ (8002864 <task_system_init+0x154>)
 800275a:	6013      	str	r3, [r2, #0]
 800275c:	4b3d      	ldr	r3, [pc, #244]	@ (8002854 <task_system_init+0x144>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4618      	mov	r0, r3
 8002762:	f7ff fcd5 	bl	8002110 <logger_log_print_>
 8002766:	b662      	cpsie	i

	g_task_system_cnt = G_TASK_SYS_CNT_INI;
 8002768:	4b42      	ldr	r3, [pc, #264]	@ (8002874 <task_system_init+0x164>)
 800276a:	2200      	movs	r2, #0
 800276c:	601a      	str	r2, [r3, #0]

	/* Print out: Task execution counter */
	LOGGER_LOG("   %s = %lu\r\n", GET_NAME(g_task_system_cnt), g_task_system_cnt);
 800276e:	b672      	cpsid	i
 8002770:	4b38      	ldr	r3, [pc, #224]	@ (8002854 <task_system_init+0x144>)
 8002772:	6818      	ldr	r0, [r3, #0]
 8002774:	4b3f      	ldr	r3, [pc, #252]	@ (8002874 <task_system_init+0x164>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	9300      	str	r3, [sp, #0]
 800277a:	4b3f      	ldr	r3, [pc, #252]	@ (8002878 <task_system_init+0x168>)
 800277c:	4a3f      	ldr	r2, [pc, #252]	@ (800287c <task_system_init+0x16c>)
 800277e:	213f      	movs	r1, #63	@ 0x3f
 8002780:	f000 fdb2 	bl	80032e8 <sniprintf>
 8002784:	4603      	mov	r3, r0
 8002786:	4a37      	ldr	r2, [pc, #220]	@ (8002864 <task_system_init+0x154>)
 8002788:	6013      	str	r3, [r2, #0]
 800278a:	4b32      	ldr	r3, [pc, #200]	@ (8002854 <task_system_init+0x144>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4618      	mov	r0, r3
 8002790:	f7ff fcbe 	bl	8002110 <logger_log_print_>
 8002794:	b662      	cpsie	i

	init_queue_event_task_system();
 8002796:	f000 f903 	bl	80029a0 <init_queue_event_task_system>

	/* Update Task Actuator Configuration & Data Pointer */
	p_task_system_dta = &task_system_dta;
 800279a:	4b39      	ldr	r3, [pc, #228]	@ (8002880 <task_system_init+0x170>)
 800279c:	60fb      	str	r3, [r7, #12]

	/* Print out: Task execution FSM */
	state = p_task_system_dta->state;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	791b      	ldrb	r3, [r3, #4]
 80027a2:	72fb      	strb	r3, [r7, #11]
	LOGGER_LOG("   %s = %lu", GET_NAME(state), (uint32_t)state);
 80027a4:	b672      	cpsid	i
 80027a6:	4b2b      	ldr	r3, [pc, #172]	@ (8002854 <task_system_init+0x144>)
 80027a8:	6818      	ldr	r0, [r3, #0]
 80027aa:	7afb      	ldrb	r3, [r7, #11]
 80027ac:	9300      	str	r3, [sp, #0]
 80027ae:	4b35      	ldr	r3, [pc, #212]	@ (8002884 <task_system_init+0x174>)
 80027b0:	4a35      	ldr	r2, [pc, #212]	@ (8002888 <task_system_init+0x178>)
 80027b2:	213f      	movs	r1, #63	@ 0x3f
 80027b4:	f000 fd98 	bl	80032e8 <sniprintf>
 80027b8:	4603      	mov	r3, r0
 80027ba:	4a2a      	ldr	r2, [pc, #168]	@ (8002864 <task_system_init+0x154>)
 80027bc:	6013      	str	r3, [r2, #0]
 80027be:	4b25      	ldr	r3, [pc, #148]	@ (8002854 <task_system_init+0x144>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7ff fca4 	bl	8002110 <logger_log_print_>
 80027c8:	b662      	cpsie	i

	event = p_task_system_dta->event;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	795b      	ldrb	r3, [r3, #5]
 80027ce:	72bb      	strb	r3, [r7, #10]
	LOGGER_LOG("   %s = %lu", GET_NAME(event), (uint32_t)event);
 80027d0:	b672      	cpsid	i
 80027d2:	4b20      	ldr	r3, [pc, #128]	@ (8002854 <task_system_init+0x144>)
 80027d4:	6818      	ldr	r0, [r3, #0]
 80027d6:	7abb      	ldrb	r3, [r7, #10]
 80027d8:	9300      	str	r3, [sp, #0]
 80027da:	4b2c      	ldr	r3, [pc, #176]	@ (800288c <task_system_init+0x17c>)
 80027dc:	4a2a      	ldr	r2, [pc, #168]	@ (8002888 <task_system_init+0x178>)
 80027de:	213f      	movs	r1, #63	@ 0x3f
 80027e0:	f000 fd82 	bl	80032e8 <sniprintf>
 80027e4:	4603      	mov	r3, r0
 80027e6:	4a1f      	ldr	r2, [pc, #124]	@ (8002864 <task_system_init+0x154>)
 80027e8:	6013      	str	r3, [r2, #0]
 80027ea:	4b1a      	ldr	r3, [pc, #104]	@ (8002854 <task_system_init+0x144>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7ff fc8e 	bl	8002110 <logger_log_print_>
 80027f4:	b662      	cpsie	i

	b_event = p_task_system_dta->flag;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	799b      	ldrb	r3, [r3, #6]
 80027fa:	727b      	strb	r3, [r7, #9]
	LOGGER_LOG("   %s = %s\r\n", GET_NAME(b_event), (b_event ? "true" : "false"));
 80027fc:	b672      	cpsid	i
 80027fe:	4b15      	ldr	r3, [pc, #84]	@ (8002854 <task_system_init+0x144>)
 8002800:	6818      	ldr	r0, [r3, #0]
 8002802:	7a7b      	ldrb	r3, [r7, #9]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d001      	beq.n	800280c <task_system_init+0xfc>
 8002808:	4b21      	ldr	r3, [pc, #132]	@ (8002890 <task_system_init+0x180>)
 800280a:	e000      	b.n	800280e <task_system_init+0xfe>
 800280c:	4b21      	ldr	r3, [pc, #132]	@ (8002894 <task_system_init+0x184>)
 800280e:	9300      	str	r3, [sp, #0]
 8002810:	4b21      	ldr	r3, [pc, #132]	@ (8002898 <task_system_init+0x188>)
 8002812:	4a22      	ldr	r2, [pc, #136]	@ (800289c <task_system_init+0x18c>)
 8002814:	213f      	movs	r1, #63	@ 0x3f
 8002816:	f000 fd67 	bl	80032e8 <sniprintf>
 800281a:	4603      	mov	r3, r0
 800281c:	4a11      	ldr	r2, [pc, #68]	@ (8002864 <task_system_init+0x154>)
 800281e:	6013      	str	r3, [r2, #0]
 8002820:	4b0c      	ldr	r3, [pc, #48]	@ (8002854 <task_system_init+0x144>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4618      	mov	r0, r3
 8002826:	f7ff fc73 	bl	8002110 <logger_log_print_>
 800282a:	b662      	cpsie	i

	/* Init LCD Screen */
	lcd1.hi2c = &hi2c1;
 800282c:	4b1c      	ldr	r3, [pc, #112]	@ (80028a0 <task_system_init+0x190>)
 800282e:	4a1d      	ldr	r2, [pc, #116]	@ (80028a4 <task_system_init+0x194>)
 8002830:	601a      	str	r2, [r3, #0]
	lcd1.address = 0x4E;
 8002832:	4b1b      	ldr	r3, [pc, #108]	@ (80028a0 <task_system_init+0x190>)
 8002834:	224e      	movs	r2, #78	@ 0x4e
 8002836:	711a      	strb	r2, [r3, #4]
	lcd_init(&lcd1);
 8002838:	4819      	ldr	r0, [pc, #100]	@ (80028a0 <task_system_init+0x190>)
 800283a:	f7fd fefa 	bl	8000632 <lcd_init>
	lcd_puts(&lcd1, "Hola!");
 800283e:	491a      	ldr	r1, [pc, #104]	@ (80028a8 <task_system_init+0x198>)
 8002840:	4817      	ldr	r0, [pc, #92]	@ (80028a0 <task_system_init+0x190>)
 8002842:	f7fd ff3d 	bl	80006c0 <lcd_puts>

	g_task_system_tick_cnt = G_TASK_SYS_TICK_CNT_INI;
 8002846:	4b19      	ldr	r3, [pc, #100]	@ (80028ac <task_system_init+0x19c>)
 8002848:	2200      	movs	r2, #0
 800284a:	601a      	str	r2, [r3, #0]
}
 800284c:	bf00      	nop
 800284e:	3710      	adds	r7, #16
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	0800460c 	.word	0x0800460c
 8002858:	2000003c 	.word	0x2000003c
 800285c:	08004504 	.word	0x08004504
 8002860:	08004518 	.word	0x08004518
 8002864:	20000178 	.word	0x20000178
 8002868:	20000040 	.word	0x20000040
 800286c:	08004530 	.word	0x08004530
 8002870:	0800453c 	.word	0x0800453c
 8002874:	2000019c 	.word	0x2000019c
 8002878:	0800454c 	.word	0x0800454c
 800287c:	08004560 	.word	0x08004560
 8002880:	20000194 	.word	0x20000194
 8002884:	08004570 	.word	0x08004570
 8002888:	08004578 	.word	0x08004578
 800288c:	08004584 	.word	0x08004584
 8002890:	0800458c 	.word	0x0800458c
 8002894:	08004594 	.word	0x08004594
 8002898:	0800459c 	.word	0x0800459c
 800289c:	080045a4 	.word	0x080045a4
 80028a0:	200001a4 	.word	0x200001a4
 80028a4:	200000c4 	.word	0x200000c4
 80028a8:	080045b4 	.word	0x080045b4
 80028ac:	200001a0 	.word	0x200001a0

080028b0 <task_system_update>:

void task_system_update(void *parameters)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
	task_system_dta_t *p_task_system_dta;
	bool b_time_update_required = false;
 80028b8:	2300      	movs	r3, #0
 80028ba:	73fb      	strb	r3, [r7, #15]

	/* Update Task System Counter */
	g_task_system_cnt++;
 80028bc:	4b35      	ldr	r3, [pc, #212]	@ (8002994 <task_system_update+0xe4>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	3301      	adds	r3, #1
 80028c2:	4a34      	ldr	r2, [pc, #208]	@ (8002994 <task_system_update+0xe4>)
 80028c4:	6013      	str	r3, [r2, #0]

	/* Protect shared resource (g_task_system_tick) */
	__asm("CPSID i");	/* disable interrupts*/
 80028c6:	b672      	cpsid	i
    if (G_TASK_SYS_TICK_CNT_INI < g_task_system_tick_cnt)
 80028c8:	4b33      	ldr	r3, [pc, #204]	@ (8002998 <task_system_update+0xe8>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d006      	beq.n	80028de <task_system_update+0x2e>
    {
    	g_task_system_tick_cnt--;
 80028d0:	4b31      	ldr	r3, [pc, #196]	@ (8002998 <task_system_update+0xe8>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	3b01      	subs	r3, #1
 80028d6:	4a30      	ldr	r2, [pc, #192]	@ (8002998 <task_system_update+0xe8>)
 80028d8:	6013      	str	r3, [r2, #0]
    	b_time_update_required = true;
 80028da:	2301      	movs	r3, #1
 80028dc:	73fb      	strb	r3, [r7, #15]
    }
    __asm("CPSIE i");	/* enable interrupts*/
 80028de:	b662      	cpsie	i

    while (b_time_update_required)
 80028e0:	e04f      	b.n	8002982 <task_system_update+0xd2>
    {
		/* Protect shared resource (g_task_system_tick) */
		__asm("CPSID i");	/* disable interrupts*/
 80028e2:	b672      	cpsid	i
		if (G_TASK_SYS_TICK_CNT_INI < g_task_system_tick_cnt)
 80028e4:	4b2c      	ldr	r3, [pc, #176]	@ (8002998 <task_system_update+0xe8>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d007      	beq.n	80028fc <task_system_update+0x4c>
		{
			g_task_system_tick_cnt--;
 80028ec:	4b2a      	ldr	r3, [pc, #168]	@ (8002998 <task_system_update+0xe8>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	3b01      	subs	r3, #1
 80028f2:	4a29      	ldr	r2, [pc, #164]	@ (8002998 <task_system_update+0xe8>)
 80028f4:	6013      	str	r3, [r2, #0]
			b_time_update_required = true;
 80028f6:	2301      	movs	r3, #1
 80028f8:	73fb      	strb	r3, [r7, #15]
 80028fa:	e001      	b.n	8002900 <task_system_update+0x50>
		}
		else
		{
			b_time_update_required = false;
 80028fc:	2300      	movs	r3, #0
 80028fe:	73fb      	strb	r3, [r7, #15]
		}
		__asm("CPSIE i");	/* enable interrupts*/
 8002900:	b662      	cpsie	i

    	/* Update Task System Data Pointer */
		p_task_system_dta = &task_system_dta;
 8002902:	4b26      	ldr	r3, [pc, #152]	@ (800299c <task_system_update+0xec>)
 8002904:	60bb      	str	r3, [r7, #8]

		if (true == any_event_task_system())
 8002906:	f000 f8b7 	bl	8002a78 <any_event_task_system>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d008      	beq.n	8002922 <task_system_update+0x72>
		{
			p_task_system_dta->flag = true;
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	2201      	movs	r2, #1
 8002914:	719a      	strb	r2, [r3, #6]
			p_task_system_dta->event = get_event_task_system();
 8002916:	f000 f889 	bl	8002a2c <get_event_task_system>
 800291a:	4603      	mov	r3, r0
 800291c:	461a      	mov	r2, r3
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	715a      	strb	r2, [r3, #5]
		}

		switch (p_task_system_dta->state)
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	791b      	ldrb	r3, [r3, #4]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d002      	beq.n	8002930 <task_system_update+0x80>
 800292a:	2b01      	cmp	r3, #1
 800292c:	d013      	beq.n	8002956 <task_system_update+0xa6>

				break;

			default:

				break;
 800292e:	e028      	b.n	8002982 <task_system_update+0xd2>
				if ((true == p_task_system_dta->flag) && (EV_SYS_XX_ACTIVE == p_task_system_dta->event))
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	799b      	ldrb	r3, [r3, #6]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d021      	beq.n	800297c <task_system_update+0xcc>
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	795b      	ldrb	r3, [r3, #5]
 800293c:	2b01      	cmp	r3, #1
 800293e:	d11d      	bne.n	800297c <task_system_update+0xcc>
					p_task_system_dta->flag = false;
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	2200      	movs	r2, #0
 8002944:	719a      	strb	r2, [r3, #6]
					put_event_task_actuator(EV_ACT_XX_ON, ID_LED_1);
 8002946:	2100      	movs	r1, #0
 8002948:	2001      	movs	r0, #1
 800294a:	f7ff fd7b 	bl	8002444 <put_event_task_actuator>
					p_task_system_dta->state = ST_SYS_XX_ACTIVE;
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	2201      	movs	r2, #1
 8002952:	711a      	strb	r2, [r3, #4]
				break;
 8002954:	e012      	b.n	800297c <task_system_update+0xcc>
				if ((true == p_task_system_dta->flag) && (EV_SYS_XX_IDLE == p_task_system_dta->event))
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	799b      	ldrb	r3, [r3, #6]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d010      	beq.n	8002980 <task_system_update+0xd0>
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	795b      	ldrb	r3, [r3, #5]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d10c      	bne.n	8002980 <task_system_update+0xd0>
					p_task_system_dta->flag = false;
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	2200      	movs	r2, #0
 800296a:	719a      	strb	r2, [r3, #6]
					put_event_task_actuator(EV_ACT_XX_OFF, ID_LED_1);
 800296c:	2100      	movs	r1, #0
 800296e:	2000      	movs	r0, #0
 8002970:	f7ff fd68 	bl	8002444 <put_event_task_actuator>
					p_task_system_dta->state = ST_SYS_XX_IDLE;
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	2200      	movs	r2, #0
 8002978:	711a      	strb	r2, [r3, #4]
				break;
 800297a:	e001      	b.n	8002980 <task_system_update+0xd0>
				break;
 800297c:	bf00      	nop
 800297e:	e000      	b.n	8002982 <task_system_update+0xd2>
				break;
 8002980:	bf00      	nop
    while (b_time_update_required)
 8002982:	7bfb      	ldrb	r3, [r7, #15]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d1ac      	bne.n	80028e2 <task_system_update+0x32>
		}
	}
}
 8002988:	bf00      	nop
 800298a:	bf00      	nop
 800298c:	3710      	adds	r7, #16
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	2000019c 	.word	0x2000019c
 8002998:	200001a0 	.word	0x200001a0
 800299c:	20000194 	.word	0x20000194

080029a0 <init_queue_event_task_system>:

/********************** external data declaration ****************************/

/********************** external functions definition ************************/
void init_queue_event_task_system(void)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
	uint32_t i;

	queue_task_a.head = 0;
 80029a6:	4b0f      	ldr	r3, [pc, #60]	@ (80029e4 <init_queue_event_task_system+0x44>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	601a      	str	r2, [r3, #0]
	queue_task_a.tail = 0;
 80029ac:	4b0d      	ldr	r3, [pc, #52]	@ (80029e4 <init_queue_event_task_system+0x44>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	605a      	str	r2, [r3, #4]
	queue_task_a.count = 0;
 80029b2:	4b0c      	ldr	r3, [pc, #48]	@ (80029e4 <init_queue_event_task_system+0x44>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	609a      	str	r2, [r3, #8]

	for (i = 0; i < MAX_EVENTS; i++)
 80029b8:	2300      	movs	r3, #0
 80029ba:	607b      	str	r3, [r7, #4]
 80029bc:	e008      	b.n	80029d0 <init_queue_event_task_system+0x30>
		queue_task_a.queue[i] = EVENT_UNDEFINED;
 80029be:	4a09      	ldr	r2, [pc, #36]	@ (80029e4 <init_queue_event_task_system+0x44>)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	4413      	add	r3, r2
 80029c4:	330c      	adds	r3, #12
 80029c6:	22ff      	movs	r2, #255	@ 0xff
 80029c8:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < MAX_EVENTS; i++)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	3301      	adds	r3, #1
 80029ce:	607b      	str	r3, [r7, #4]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2b0f      	cmp	r3, #15
 80029d4:	d9f3      	bls.n	80029be <init_queue_event_task_system+0x1e>
}
 80029d6:	bf00      	nop
 80029d8:	bf00      	nop
 80029da:	370c      	adds	r7, #12
 80029dc:	46bd      	mov	sp, r7
 80029de:	bc80      	pop	{r7}
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop
 80029e4:	200001ac 	.word	0x200001ac

080029e8 <put_event_task_system>:

void put_event_task_system(task_system_ev_t event)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	4603      	mov	r3, r0
 80029f0:	71fb      	strb	r3, [r7, #7]
	queue_task_a.count++;
 80029f2:	4b0d      	ldr	r3, [pc, #52]	@ (8002a28 <put_event_task_system+0x40>)
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	3301      	adds	r3, #1
 80029f8:	4a0b      	ldr	r2, [pc, #44]	@ (8002a28 <put_event_task_system+0x40>)
 80029fa:	6093      	str	r3, [r2, #8]
	queue_task_a.queue[queue_task_a.head++] = event;
 80029fc:	4b0a      	ldr	r3, [pc, #40]	@ (8002a28 <put_event_task_system+0x40>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	1c5a      	adds	r2, r3, #1
 8002a02:	4909      	ldr	r1, [pc, #36]	@ (8002a28 <put_event_task_system+0x40>)
 8002a04:	600a      	str	r2, [r1, #0]
 8002a06:	4a08      	ldr	r2, [pc, #32]	@ (8002a28 <put_event_task_system+0x40>)
 8002a08:	4413      	add	r3, r2
 8002a0a:	79fa      	ldrb	r2, [r7, #7]
 8002a0c:	731a      	strb	r2, [r3, #12]

	if (MAX_EVENTS == queue_task_a.head)
 8002a0e:	4b06      	ldr	r3, [pc, #24]	@ (8002a28 <put_event_task_system+0x40>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2b10      	cmp	r3, #16
 8002a14:	d102      	bne.n	8002a1c <put_event_task_system+0x34>
		queue_task_a.head = 0;
 8002a16:	4b04      	ldr	r3, [pc, #16]	@ (8002a28 <put_event_task_system+0x40>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	601a      	str	r2, [r3, #0]
}
 8002a1c:	bf00      	nop
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bc80      	pop	{r7}
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	200001ac 	.word	0x200001ac

08002a2c <get_event_task_system>:

task_system_ev_t get_event_task_system(void)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
	task_system_ev_t event;

	queue_task_a.count--;
 8002a32:	4b10      	ldr	r3, [pc, #64]	@ (8002a74 <get_event_task_system+0x48>)
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	3b01      	subs	r3, #1
 8002a38:	4a0e      	ldr	r2, [pc, #56]	@ (8002a74 <get_event_task_system+0x48>)
 8002a3a:	6093      	str	r3, [r2, #8]
	event = queue_task_a.queue[queue_task_a.tail];
 8002a3c:	4b0d      	ldr	r3, [pc, #52]	@ (8002a74 <get_event_task_system+0x48>)
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	4a0c      	ldr	r2, [pc, #48]	@ (8002a74 <get_event_task_system+0x48>)
 8002a42:	4413      	add	r3, r2
 8002a44:	7b1b      	ldrb	r3, [r3, #12]
 8002a46:	71fb      	strb	r3, [r7, #7]
	queue_task_a.queue[queue_task_a.tail++] = EVENT_UNDEFINED;
 8002a48:	4b0a      	ldr	r3, [pc, #40]	@ (8002a74 <get_event_task_system+0x48>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	1c5a      	adds	r2, r3, #1
 8002a4e:	4909      	ldr	r1, [pc, #36]	@ (8002a74 <get_event_task_system+0x48>)
 8002a50:	604a      	str	r2, [r1, #4]
 8002a52:	4a08      	ldr	r2, [pc, #32]	@ (8002a74 <get_event_task_system+0x48>)
 8002a54:	4413      	add	r3, r2
 8002a56:	22ff      	movs	r2, #255	@ 0xff
 8002a58:	731a      	strb	r2, [r3, #12]

	if (MAX_EVENTS == queue_task_a.tail)
 8002a5a:	4b06      	ldr	r3, [pc, #24]	@ (8002a74 <get_event_task_system+0x48>)
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	2b10      	cmp	r3, #16
 8002a60:	d102      	bne.n	8002a68 <get_event_task_system+0x3c>
		queue_task_a.tail = 0;
 8002a62:	4b04      	ldr	r3, [pc, #16]	@ (8002a74 <get_event_task_system+0x48>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	605a      	str	r2, [r3, #4]

	return event;
 8002a68:	79fb      	ldrb	r3, [r7, #7]
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	370c      	adds	r7, #12
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bc80      	pop	{r7}
 8002a72:	4770      	bx	lr
 8002a74:	200001ac 	.word	0x200001ac

08002a78 <any_event_task_system>:

bool any_event_task_system(void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0
  return (queue_task_a.head != queue_task_a.tail);
 8002a7c:	4b06      	ldr	r3, [pc, #24]	@ (8002a98 <any_event_task_system+0x20>)
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	4b05      	ldr	r3, [pc, #20]	@ (8002a98 <any_event_task_system+0x20>)
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	bf14      	ite	ne
 8002a88:	2301      	movne	r3, #1
 8002a8a:	2300      	moveq	r3, #0
 8002a8c:	b2db      	uxtb	r3, r3
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bc80      	pop	{r7}
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	200001ac 	.word	0x200001ac

08002a9c <findslot>:
 8002a9c:	4b0a      	ldr	r3, [pc, #40]	@ (8002ac8 <findslot+0x2c>)
 8002a9e:	b510      	push	{r4, lr}
 8002aa0:	4604      	mov	r4, r0
 8002aa2:	6818      	ldr	r0, [r3, #0]
 8002aa4:	b118      	cbz	r0, 8002aae <findslot+0x12>
 8002aa6:	6a03      	ldr	r3, [r0, #32]
 8002aa8:	b90b      	cbnz	r3, 8002aae <findslot+0x12>
 8002aaa:	f000 fbd5 	bl	8003258 <__sinit>
 8002aae:	2c13      	cmp	r4, #19
 8002ab0:	d807      	bhi.n	8002ac2 <findslot+0x26>
 8002ab2:	4806      	ldr	r0, [pc, #24]	@ (8002acc <findslot+0x30>)
 8002ab4:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8002ab8:	3201      	adds	r2, #1
 8002aba:	d002      	beq.n	8002ac2 <findslot+0x26>
 8002abc:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8002ac0:	bd10      	pop	{r4, pc}
 8002ac2:	2000      	movs	r0, #0
 8002ac4:	e7fc      	b.n	8002ac0 <findslot+0x24>
 8002ac6:	bf00      	nop
 8002ac8:	20000058 	.word	0x20000058
 8002acc:	200001d4 	.word	0x200001d4

08002ad0 <error>:
 8002ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ad2:	4604      	mov	r4, r0
 8002ad4:	f000 fcce 	bl	8003474 <__errno>
 8002ad8:	2613      	movs	r6, #19
 8002ada:	4605      	mov	r5, r0
 8002adc:	2700      	movs	r7, #0
 8002ade:	4630      	mov	r0, r6
 8002ae0:	4639      	mov	r1, r7
 8002ae2:	beab      	bkpt	0x00ab
 8002ae4:	4606      	mov	r6, r0
 8002ae6:	4620      	mov	r0, r4
 8002ae8:	602e      	str	r6, [r5, #0]
 8002aea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002aec <checkerror>:
 8002aec:	1c43      	adds	r3, r0, #1
 8002aee:	d101      	bne.n	8002af4 <checkerror+0x8>
 8002af0:	f7ff bfee 	b.w	8002ad0 <error>
 8002af4:	4770      	bx	lr

08002af6 <_swiread>:
 8002af6:	b530      	push	{r4, r5, lr}
 8002af8:	b085      	sub	sp, #20
 8002afa:	2406      	movs	r4, #6
 8002afc:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8002b00:	9203      	str	r2, [sp, #12]
 8002b02:	ad01      	add	r5, sp, #4
 8002b04:	4620      	mov	r0, r4
 8002b06:	4629      	mov	r1, r5
 8002b08:	beab      	bkpt	0x00ab
 8002b0a:	4604      	mov	r4, r0
 8002b0c:	4620      	mov	r0, r4
 8002b0e:	f7ff ffed 	bl	8002aec <checkerror>
 8002b12:	b005      	add	sp, #20
 8002b14:	bd30      	pop	{r4, r5, pc}

08002b16 <_read>:
 8002b16:	b570      	push	{r4, r5, r6, lr}
 8002b18:	460e      	mov	r6, r1
 8002b1a:	4614      	mov	r4, r2
 8002b1c:	f7ff ffbe 	bl	8002a9c <findslot>
 8002b20:	4605      	mov	r5, r0
 8002b22:	b930      	cbnz	r0, 8002b32 <_read+0x1c>
 8002b24:	f000 fca6 	bl	8003474 <__errno>
 8002b28:	2309      	movs	r3, #9
 8002b2a:	6003      	str	r3, [r0, #0]
 8002b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b30:	bd70      	pop	{r4, r5, r6, pc}
 8002b32:	4622      	mov	r2, r4
 8002b34:	4631      	mov	r1, r6
 8002b36:	6800      	ldr	r0, [r0, #0]
 8002b38:	f7ff ffdd 	bl	8002af6 <_swiread>
 8002b3c:	1c43      	adds	r3, r0, #1
 8002b3e:	d0f5      	beq.n	8002b2c <_read+0x16>
 8002b40:	686b      	ldr	r3, [r5, #4]
 8002b42:	1a20      	subs	r0, r4, r0
 8002b44:	4403      	add	r3, r0
 8002b46:	606b      	str	r3, [r5, #4]
 8002b48:	e7f2      	b.n	8002b30 <_read+0x1a>

08002b4a <_swilseek>:
 8002b4a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002b4c:	460c      	mov	r4, r1
 8002b4e:	4616      	mov	r6, r2
 8002b50:	f7ff ffa4 	bl	8002a9c <findslot>
 8002b54:	4605      	mov	r5, r0
 8002b56:	b940      	cbnz	r0, 8002b6a <_swilseek+0x20>
 8002b58:	f000 fc8c 	bl	8003474 <__errno>
 8002b5c:	2309      	movs	r3, #9
 8002b5e:	6003      	str	r3, [r0, #0]
 8002b60:	f04f 34ff 	mov.w	r4, #4294967295
 8002b64:	4620      	mov	r0, r4
 8002b66:	b003      	add	sp, #12
 8002b68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b6a:	2e02      	cmp	r6, #2
 8002b6c:	d903      	bls.n	8002b76 <_swilseek+0x2c>
 8002b6e:	f000 fc81 	bl	8003474 <__errno>
 8002b72:	2316      	movs	r3, #22
 8002b74:	e7f3      	b.n	8002b5e <_swilseek+0x14>
 8002b76:	2e01      	cmp	r6, #1
 8002b78:	d112      	bne.n	8002ba0 <_swilseek+0x56>
 8002b7a:	6843      	ldr	r3, [r0, #4]
 8002b7c:	18e4      	adds	r4, r4, r3
 8002b7e:	d4f6      	bmi.n	8002b6e <_swilseek+0x24>
 8002b80:	682b      	ldr	r3, [r5, #0]
 8002b82:	260a      	movs	r6, #10
 8002b84:	466f      	mov	r7, sp
 8002b86:	e9cd 3400 	strd	r3, r4, [sp]
 8002b8a:	4630      	mov	r0, r6
 8002b8c:	4639      	mov	r1, r7
 8002b8e:	beab      	bkpt	0x00ab
 8002b90:	4606      	mov	r6, r0
 8002b92:	4630      	mov	r0, r6
 8002b94:	f7ff ffaa 	bl	8002aec <checkerror>
 8002b98:	2800      	cmp	r0, #0
 8002b9a:	dbe1      	blt.n	8002b60 <_swilseek+0x16>
 8002b9c:	606c      	str	r4, [r5, #4]
 8002b9e:	e7e1      	b.n	8002b64 <_swilseek+0x1a>
 8002ba0:	2e02      	cmp	r6, #2
 8002ba2:	6803      	ldr	r3, [r0, #0]
 8002ba4:	d1ec      	bne.n	8002b80 <_swilseek+0x36>
 8002ba6:	260c      	movs	r6, #12
 8002ba8:	466f      	mov	r7, sp
 8002baa:	9300      	str	r3, [sp, #0]
 8002bac:	4630      	mov	r0, r6
 8002bae:	4639      	mov	r1, r7
 8002bb0:	beab      	bkpt	0x00ab
 8002bb2:	4606      	mov	r6, r0
 8002bb4:	4630      	mov	r0, r6
 8002bb6:	f7ff ff99 	bl	8002aec <checkerror>
 8002bba:	1c43      	adds	r3, r0, #1
 8002bbc:	d0d0      	beq.n	8002b60 <_swilseek+0x16>
 8002bbe:	4404      	add	r4, r0
 8002bc0:	e7de      	b.n	8002b80 <_swilseek+0x36>

08002bc2 <_lseek>:
 8002bc2:	f7ff bfc2 	b.w	8002b4a <_swilseek>

08002bc6 <_swiwrite>:
 8002bc6:	b530      	push	{r4, r5, lr}
 8002bc8:	b085      	sub	sp, #20
 8002bca:	2405      	movs	r4, #5
 8002bcc:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8002bd0:	9203      	str	r2, [sp, #12]
 8002bd2:	ad01      	add	r5, sp, #4
 8002bd4:	4620      	mov	r0, r4
 8002bd6:	4629      	mov	r1, r5
 8002bd8:	beab      	bkpt	0x00ab
 8002bda:	4604      	mov	r4, r0
 8002bdc:	4620      	mov	r0, r4
 8002bde:	f7ff ff85 	bl	8002aec <checkerror>
 8002be2:	b005      	add	sp, #20
 8002be4:	bd30      	pop	{r4, r5, pc}

08002be6 <_write>:
 8002be6:	b570      	push	{r4, r5, r6, lr}
 8002be8:	460e      	mov	r6, r1
 8002bea:	4615      	mov	r5, r2
 8002bec:	f7ff ff56 	bl	8002a9c <findslot>
 8002bf0:	4604      	mov	r4, r0
 8002bf2:	b930      	cbnz	r0, 8002c02 <_write+0x1c>
 8002bf4:	f000 fc3e 	bl	8003474 <__errno>
 8002bf8:	2309      	movs	r3, #9
 8002bfa:	6003      	str	r3, [r0, #0]
 8002bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8002c00:	bd70      	pop	{r4, r5, r6, pc}
 8002c02:	462a      	mov	r2, r5
 8002c04:	4631      	mov	r1, r6
 8002c06:	6800      	ldr	r0, [r0, #0]
 8002c08:	f7ff ffdd 	bl	8002bc6 <_swiwrite>
 8002c0c:	1e03      	subs	r3, r0, #0
 8002c0e:	dbf5      	blt.n	8002bfc <_write+0x16>
 8002c10:	6862      	ldr	r2, [r4, #4]
 8002c12:	1ae8      	subs	r0, r5, r3
 8002c14:	4402      	add	r2, r0
 8002c16:	42ab      	cmp	r3, r5
 8002c18:	6062      	str	r2, [r4, #4]
 8002c1a:	d1f1      	bne.n	8002c00 <_write+0x1a>
 8002c1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002c20:	2000      	movs	r0, #0
 8002c22:	f7ff bf55 	b.w	8002ad0 <error>

08002c26 <_swiclose>:
 8002c26:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002c28:	2402      	movs	r4, #2
 8002c2a:	9001      	str	r0, [sp, #4]
 8002c2c:	ad01      	add	r5, sp, #4
 8002c2e:	4620      	mov	r0, r4
 8002c30:	4629      	mov	r1, r5
 8002c32:	beab      	bkpt	0x00ab
 8002c34:	4604      	mov	r4, r0
 8002c36:	4620      	mov	r0, r4
 8002c38:	f7ff ff58 	bl	8002aec <checkerror>
 8002c3c:	b003      	add	sp, #12
 8002c3e:	bd30      	pop	{r4, r5, pc}

08002c40 <_close>:
 8002c40:	b538      	push	{r3, r4, r5, lr}
 8002c42:	4605      	mov	r5, r0
 8002c44:	f7ff ff2a 	bl	8002a9c <findslot>
 8002c48:	4604      	mov	r4, r0
 8002c4a:	b930      	cbnz	r0, 8002c5a <_close+0x1a>
 8002c4c:	f000 fc12 	bl	8003474 <__errno>
 8002c50:	2309      	movs	r3, #9
 8002c52:	6003      	str	r3, [r0, #0]
 8002c54:	f04f 30ff 	mov.w	r0, #4294967295
 8002c58:	bd38      	pop	{r3, r4, r5, pc}
 8002c5a:	3d01      	subs	r5, #1
 8002c5c:	2d01      	cmp	r5, #1
 8002c5e:	d809      	bhi.n	8002c74 <_close+0x34>
 8002c60:	4b07      	ldr	r3, [pc, #28]	@ (8002c80 <_close+0x40>)
 8002c62:	689a      	ldr	r2, [r3, #8]
 8002c64:	691b      	ldr	r3, [r3, #16]
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d104      	bne.n	8002c74 <_close+0x34>
 8002c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c6e:	2000      	movs	r0, #0
 8002c70:	6023      	str	r3, [r4, #0]
 8002c72:	e7f1      	b.n	8002c58 <_close+0x18>
 8002c74:	6820      	ldr	r0, [r4, #0]
 8002c76:	f7ff ffd6 	bl	8002c26 <_swiclose>
 8002c7a:	2800      	cmp	r0, #0
 8002c7c:	d0f5      	beq.n	8002c6a <_close+0x2a>
 8002c7e:	e7eb      	b.n	8002c58 <_close+0x18>
 8002c80:	200001d4 	.word	0x200001d4

08002c84 <_swistat>:
 8002c84:	b570      	push	{r4, r5, r6, lr}
 8002c86:	460c      	mov	r4, r1
 8002c88:	f7ff ff08 	bl	8002a9c <findslot>
 8002c8c:	4605      	mov	r5, r0
 8002c8e:	b930      	cbnz	r0, 8002c9e <_swistat+0x1a>
 8002c90:	f000 fbf0 	bl	8003474 <__errno>
 8002c94:	2309      	movs	r3, #9
 8002c96:	6003      	str	r3, [r0, #0]
 8002c98:	f04f 30ff 	mov.w	r0, #4294967295
 8002c9c:	bd70      	pop	{r4, r5, r6, pc}
 8002c9e:	6863      	ldr	r3, [r4, #4]
 8002ca0:	260c      	movs	r6, #12
 8002ca2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002ca6:	6063      	str	r3, [r4, #4]
 8002ca8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002cac:	64a3      	str	r3, [r4, #72]	@ 0x48
 8002cae:	4630      	mov	r0, r6
 8002cb0:	4629      	mov	r1, r5
 8002cb2:	beab      	bkpt	0x00ab
 8002cb4:	4605      	mov	r5, r0
 8002cb6:	4628      	mov	r0, r5
 8002cb8:	f7ff ff18 	bl	8002aec <checkerror>
 8002cbc:	1c43      	adds	r3, r0, #1
 8002cbe:	d0eb      	beq.n	8002c98 <_swistat+0x14>
 8002cc0:	6120      	str	r0, [r4, #16]
 8002cc2:	2000      	movs	r0, #0
 8002cc4:	e7ea      	b.n	8002c9c <_swistat+0x18>

08002cc6 <_fstat>:
 8002cc6:	460b      	mov	r3, r1
 8002cc8:	b510      	push	{r4, lr}
 8002cca:	2100      	movs	r1, #0
 8002ccc:	4604      	mov	r4, r0
 8002cce:	2258      	movs	r2, #88	@ 0x58
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f000 fb80 	bl	80033d6 <memset>
 8002cd6:	4601      	mov	r1, r0
 8002cd8:	4620      	mov	r0, r4
 8002cda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002cde:	f7ff bfd1 	b.w	8002c84 <_swistat>

08002ce2 <_stat>:
 8002ce2:	b538      	push	{r3, r4, r5, lr}
 8002ce4:	460d      	mov	r5, r1
 8002ce6:	4604      	mov	r4, r0
 8002ce8:	2258      	movs	r2, #88	@ 0x58
 8002cea:	2100      	movs	r1, #0
 8002cec:	4628      	mov	r0, r5
 8002cee:	f000 fb72 	bl	80033d6 <memset>
 8002cf2:	4620      	mov	r0, r4
 8002cf4:	2100      	movs	r1, #0
 8002cf6:	f000 f811 	bl	8002d1c <_swiopen>
 8002cfa:	1c43      	adds	r3, r0, #1
 8002cfc:	4604      	mov	r4, r0
 8002cfe:	d00b      	beq.n	8002d18 <_stat+0x36>
 8002d00:	686b      	ldr	r3, [r5, #4]
 8002d02:	4629      	mov	r1, r5
 8002d04:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8002d08:	606b      	str	r3, [r5, #4]
 8002d0a:	f7ff ffbb 	bl	8002c84 <_swistat>
 8002d0e:	4605      	mov	r5, r0
 8002d10:	4620      	mov	r0, r4
 8002d12:	f7ff ff95 	bl	8002c40 <_close>
 8002d16:	462c      	mov	r4, r5
 8002d18:	4620      	mov	r0, r4
 8002d1a:	bd38      	pop	{r3, r4, r5, pc}

08002d1c <_swiopen>:
 8002d1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d20:	4682      	mov	sl, r0
 8002d22:	460e      	mov	r6, r1
 8002d24:	2400      	movs	r4, #0
 8002d26:	4f28      	ldr	r7, [pc, #160]	@ (8002dc8 <_swiopen+0xac>)
 8002d28:	b096      	sub	sp, #88	@ 0x58
 8002d2a:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
 8002d2e:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8002d32:	3301      	adds	r3, #1
 8002d34:	d00c      	beq.n	8002d50 <_swiopen+0x34>
 8002d36:	3401      	adds	r4, #1
 8002d38:	2c14      	cmp	r4, #20
 8002d3a:	d1f6      	bne.n	8002d2a <_swiopen+0xe>
 8002d3c:	f000 fb9a 	bl	8003474 <__errno>
 8002d40:	2318      	movs	r3, #24
 8002d42:	f04f 34ff 	mov.w	r4, #4294967295
 8002d46:	6003      	str	r3, [r0, #0]
 8002d48:	4620      	mov	r0, r4
 8002d4a:	b016      	add	sp, #88	@ 0x58
 8002d4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d50:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 8002d54:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8002d58:	46e9      	mov	r9, sp
 8002d5a:	d109      	bne.n	8002d70 <_swiopen+0x54>
 8002d5c:	4649      	mov	r1, r9
 8002d5e:	4650      	mov	r0, sl
 8002d60:	f7ff ffbf 	bl	8002ce2 <_stat>
 8002d64:	3001      	adds	r0, #1
 8002d66:	d003      	beq.n	8002d70 <_swiopen+0x54>
 8002d68:	f000 fb84 	bl	8003474 <__errno>
 8002d6c:	2311      	movs	r3, #17
 8002d6e:	e7e8      	b.n	8002d42 <_swiopen+0x26>
 8002d70:	f240 6301 	movw	r3, #1537	@ 0x601
 8002d74:	f3c6 4500 	ubfx	r5, r6, #16, #1
 8002d78:	07b2      	lsls	r2, r6, #30
 8002d7a:	bf48      	it	mi
 8002d7c:	f045 0502 	orrmi.w	r5, r5, #2
 8002d80:	421e      	tst	r6, r3
 8002d82:	bf18      	it	ne
 8002d84:	f045 0504 	orrne.w	r5, r5, #4
 8002d88:	0733      	lsls	r3, r6, #28
 8002d8a:	bf48      	it	mi
 8002d8c:	f025 0504 	bicmi.w	r5, r5, #4
 8002d90:	4650      	mov	r0, sl
 8002d92:	bf48      	it	mi
 8002d94:	f045 0508 	orrmi.w	r5, r5, #8
 8002d98:	f8cd a000 	str.w	sl, [sp]
 8002d9c:	f7fd f9d6 	bl	800014c <strlen>
 8002da0:	e9cd 5001 	strd	r5, r0, [sp, #4]
 8002da4:	2501      	movs	r5, #1
 8002da6:	4628      	mov	r0, r5
 8002da8:	4649      	mov	r1, r9
 8002daa:	beab      	bkpt	0x00ab
 8002dac:	4605      	mov	r5, r0
 8002dae:	2d00      	cmp	r5, #0
 8002db0:	db05      	blt.n	8002dbe <_swiopen+0xa2>
 8002db2:	2300      	movs	r3, #0
 8002db4:	f847 5034 	str.w	r5, [r7, r4, lsl #3]
 8002db8:	4447      	add	r7, r8
 8002dba:	607b      	str	r3, [r7, #4]
 8002dbc:	e7c4      	b.n	8002d48 <_swiopen+0x2c>
 8002dbe:	4628      	mov	r0, r5
 8002dc0:	f7ff fe86 	bl	8002ad0 <error>
 8002dc4:	4604      	mov	r4, r0
 8002dc6:	e7bf      	b.n	8002d48 <_swiopen+0x2c>
 8002dc8:	200001d4 	.word	0x200001d4

08002dcc <_get_semihosting_exts>:
 8002dcc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002dd0:	4606      	mov	r6, r0
 8002dd2:	460f      	mov	r7, r1
 8002dd4:	4829      	ldr	r0, [pc, #164]	@ (8002e7c <_get_semihosting_exts+0xb0>)
 8002dd6:	2100      	movs	r1, #0
 8002dd8:	4615      	mov	r5, r2
 8002dda:	f7ff ff9f 	bl	8002d1c <_swiopen>
 8002dde:	4604      	mov	r4, r0
 8002de0:	462a      	mov	r2, r5
 8002de2:	2100      	movs	r1, #0
 8002de4:	4630      	mov	r0, r6
 8002de6:	f000 faf6 	bl	80033d6 <memset>
 8002dea:	1c63      	adds	r3, r4, #1
 8002dec:	d014      	beq.n	8002e18 <_get_semihosting_exts+0x4c>
 8002dee:	4620      	mov	r0, r4
 8002df0:	f7ff fe54 	bl	8002a9c <findslot>
 8002df4:	f04f 080c 	mov.w	r8, #12
 8002df8:	4681      	mov	r9, r0
 8002dfa:	4640      	mov	r0, r8
 8002dfc:	4649      	mov	r1, r9
 8002dfe:	beab      	bkpt	0x00ab
 8002e00:	4680      	mov	r8, r0
 8002e02:	4640      	mov	r0, r8
 8002e04:	f7ff fe72 	bl	8002aec <checkerror>
 8002e08:	2803      	cmp	r0, #3
 8002e0a:	dd02      	ble.n	8002e12 <_get_semihosting_exts+0x46>
 8002e0c:	1ec3      	subs	r3, r0, #3
 8002e0e:	42ab      	cmp	r3, r5
 8002e10:	dc07      	bgt.n	8002e22 <_get_semihosting_exts+0x56>
 8002e12:	4620      	mov	r0, r4
 8002e14:	f7ff ff14 	bl	8002c40 <_close>
 8002e18:	f04f 30ff 	mov.w	r0, #4294967295
 8002e1c:	b003      	add	sp, #12
 8002e1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002e22:	2204      	movs	r2, #4
 8002e24:	4620      	mov	r0, r4
 8002e26:	eb0d 0102 	add.w	r1, sp, r2
 8002e2a:	f7ff fe74 	bl	8002b16 <_read>
 8002e2e:	2803      	cmp	r0, #3
 8002e30:	ddef      	ble.n	8002e12 <_get_semihosting_exts+0x46>
 8002e32:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002e36:	2b53      	cmp	r3, #83	@ 0x53
 8002e38:	d1eb      	bne.n	8002e12 <_get_semihosting_exts+0x46>
 8002e3a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8002e3e:	2b48      	cmp	r3, #72	@ 0x48
 8002e40:	d1e7      	bne.n	8002e12 <_get_semihosting_exts+0x46>
 8002e42:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8002e46:	2b46      	cmp	r3, #70	@ 0x46
 8002e48:	d1e3      	bne.n	8002e12 <_get_semihosting_exts+0x46>
 8002e4a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002e4e:	2b42      	cmp	r3, #66	@ 0x42
 8002e50:	d1df      	bne.n	8002e12 <_get_semihosting_exts+0x46>
 8002e52:	2201      	movs	r2, #1
 8002e54:	4639      	mov	r1, r7
 8002e56:	4620      	mov	r0, r4
 8002e58:	f7ff fe77 	bl	8002b4a <_swilseek>
 8002e5c:	2800      	cmp	r0, #0
 8002e5e:	dbd8      	blt.n	8002e12 <_get_semihosting_exts+0x46>
 8002e60:	462a      	mov	r2, r5
 8002e62:	4631      	mov	r1, r6
 8002e64:	4620      	mov	r0, r4
 8002e66:	f7ff fe56 	bl	8002b16 <_read>
 8002e6a:	4605      	mov	r5, r0
 8002e6c:	4620      	mov	r0, r4
 8002e6e:	f7ff fee7 	bl	8002c40 <_close>
 8002e72:	4628      	mov	r0, r5
 8002e74:	f7ff fe3a 	bl	8002aec <checkerror>
 8002e78:	e7d0      	b.n	8002e1c <_get_semihosting_exts+0x50>
 8002e7a:	bf00      	nop
 8002e7c:	08004660 	.word	0x08004660

08002e80 <initialise_semihosting_exts>:
 8002e80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002e82:	2100      	movs	r1, #0
 8002e84:	2201      	movs	r2, #1
 8002e86:	4d09      	ldr	r5, [pc, #36]	@ (8002eac <initialise_semihosting_exts+0x2c>)
 8002e88:	4c09      	ldr	r4, [pc, #36]	@ (8002eb0 <initialise_semihosting_exts+0x30>)
 8002e8a:	a801      	add	r0, sp, #4
 8002e8c:	6029      	str	r1, [r5, #0]
 8002e8e:	6022      	str	r2, [r4, #0]
 8002e90:	f7ff ff9c 	bl	8002dcc <_get_semihosting_exts>
 8002e94:	2800      	cmp	r0, #0
 8002e96:	dd07      	ble.n	8002ea8 <initialise_semihosting_exts+0x28>
 8002e98:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002e9c:	f003 0201 	and.w	r2, r3, #1
 8002ea0:	f003 0302 	and.w	r3, r3, #2
 8002ea4:	602a      	str	r2, [r5, #0]
 8002ea6:	6023      	str	r3, [r4, #0]
 8002ea8:	b003      	add	sp, #12
 8002eaa:	bd30      	pop	{r4, r5, pc}
 8002eac:	20000048 	.word	0x20000048
 8002eb0:	20000044 	.word	0x20000044

08002eb4 <_has_ext_stdout_stderr>:
 8002eb4:	b510      	push	{r4, lr}
 8002eb6:	4c04      	ldr	r4, [pc, #16]	@ (8002ec8 <_has_ext_stdout_stderr+0x14>)
 8002eb8:	6823      	ldr	r3, [r4, #0]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	da01      	bge.n	8002ec2 <_has_ext_stdout_stderr+0xe>
 8002ebe:	f7ff ffdf 	bl	8002e80 <initialise_semihosting_exts>
 8002ec2:	6820      	ldr	r0, [r4, #0]
 8002ec4:	bd10      	pop	{r4, pc}
 8002ec6:	bf00      	nop
 8002ec8:	20000044 	.word	0x20000044

08002ecc <initialise_monitor_handles>:
 8002ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	2400      	movs	r4, #0
 8002ed4:	f8df 90a0 	ldr.w	r9, [pc, #160]	@ 8002f78 <initialise_monitor_handles+0xac>
 8002ed8:	b085      	sub	sp, #20
 8002eda:	f8cd 9004 	str.w	r9, [sp, #4]
 8002ede:	af01      	add	r7, sp, #4
 8002ee0:	9303      	str	r3, [sp, #12]
 8002ee2:	2501      	movs	r5, #1
 8002ee4:	9402      	str	r4, [sp, #8]
 8002ee6:	4628      	mov	r0, r5
 8002ee8:	4639      	mov	r1, r7
 8002eea:	beab      	bkpt	0x00ab
 8002eec:	4605      	mov	r5, r0
 8002eee:	f04f 32ff 	mov.w	r2, #4294967295
 8002ef2:	f8df 8088 	ldr.w	r8, [pc, #136]	@ 8002f7c <initialise_monitor_handles+0xb0>
 8002ef6:	4623      	mov	r3, r4
 8002ef8:	4c21      	ldr	r4, [pc, #132]	@ (8002f80 <initialise_monitor_handles+0xb4>)
 8002efa:	f8c8 5000 	str.w	r5, [r8]
 8002efe:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8002f02:	3301      	adds	r3, #1
 8002f04:	2b14      	cmp	r3, #20
 8002f06:	d1fa      	bne.n	8002efe <initialise_monitor_handles+0x32>
 8002f08:	f7ff ffd4 	bl	8002eb4 <_has_ext_stdout_stderr>
 8002f0c:	4d1d      	ldr	r5, [pc, #116]	@ (8002f84 <initialise_monitor_handles+0xb8>)
 8002f0e:	b1d0      	cbz	r0, 8002f46 <initialise_monitor_handles+0x7a>
 8002f10:	f04f 0a03 	mov.w	sl, #3
 8002f14:	2304      	movs	r3, #4
 8002f16:	f8cd 9004 	str.w	r9, [sp, #4]
 8002f1a:	2601      	movs	r6, #1
 8002f1c:	f8cd a00c 	str.w	sl, [sp, #12]
 8002f20:	9302      	str	r3, [sp, #8]
 8002f22:	4630      	mov	r0, r6
 8002f24:	4639      	mov	r1, r7
 8002f26:	beab      	bkpt	0x00ab
 8002f28:	4683      	mov	fp, r0
 8002f2a:	4b17      	ldr	r3, [pc, #92]	@ (8002f88 <initialise_monitor_handles+0xbc>)
 8002f2c:	f8cd 9004 	str.w	r9, [sp, #4]
 8002f30:	f8c3 b000 	str.w	fp, [r3]
 8002f34:	2308      	movs	r3, #8
 8002f36:	f8cd a00c 	str.w	sl, [sp, #12]
 8002f3a:	9302      	str	r3, [sp, #8]
 8002f3c:	4630      	mov	r0, r6
 8002f3e:	4639      	mov	r1, r7
 8002f40:	beab      	bkpt	0x00ab
 8002f42:	4606      	mov	r6, r0
 8002f44:	602e      	str	r6, [r5, #0]
 8002f46:	2600      	movs	r6, #0
 8002f48:	682b      	ldr	r3, [r5, #0]
 8002f4a:	6066      	str	r6, [r4, #4]
 8002f4c:	3301      	adds	r3, #1
 8002f4e:	bf02      	ittt	eq
 8002f50:	4b0d      	ldreq	r3, [pc, #52]	@ (8002f88 <initialise_monitor_handles+0xbc>)
 8002f52:	681b      	ldreq	r3, [r3, #0]
 8002f54:	602b      	streq	r3, [r5, #0]
 8002f56:	f8d8 3000 	ldr.w	r3, [r8]
 8002f5a:	6023      	str	r3, [r4, #0]
 8002f5c:	f7ff ffaa 	bl	8002eb4 <_has_ext_stdout_stderr>
 8002f60:	b130      	cbz	r0, 8002f70 <initialise_monitor_handles+0xa4>
 8002f62:	4b09      	ldr	r3, [pc, #36]	@ (8002f88 <initialise_monitor_handles+0xbc>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8002f6a:	682b      	ldr	r3, [r5, #0]
 8002f6c:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8002f70:	b005      	add	sp, #20
 8002f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f76:	bf00      	nop
 8002f78:	08004676 	.word	0x08004676
 8002f7c:	200001d0 	.word	0x200001d0
 8002f80:	200001d4 	.word	0x200001d4
 8002f84:	200001c8 	.word	0x200001c8
 8002f88:	200001cc 	.word	0x200001cc

08002f8c <_isatty>:
 8002f8c:	b570      	push	{r4, r5, r6, lr}
 8002f8e:	f7ff fd85 	bl	8002a9c <findslot>
 8002f92:	2409      	movs	r4, #9
 8002f94:	4605      	mov	r5, r0
 8002f96:	b920      	cbnz	r0, 8002fa2 <_isatty+0x16>
 8002f98:	f000 fa6c 	bl	8003474 <__errno>
 8002f9c:	6004      	str	r4, [r0, #0]
 8002f9e:	2000      	movs	r0, #0
 8002fa0:	bd70      	pop	{r4, r5, r6, pc}
 8002fa2:	4620      	mov	r0, r4
 8002fa4:	4629      	mov	r1, r5
 8002fa6:	beab      	bkpt	0x00ab
 8002fa8:	4604      	mov	r4, r0
 8002faa:	2c01      	cmp	r4, #1
 8002fac:	4620      	mov	r0, r4
 8002fae:	d0f7      	beq.n	8002fa0 <_isatty+0x14>
 8002fb0:	f000 fa60 	bl	8003474 <__errno>
 8002fb4:	2513      	movs	r5, #19
 8002fb6:	4604      	mov	r4, r0
 8002fb8:	2600      	movs	r6, #0
 8002fba:	4628      	mov	r0, r5
 8002fbc:	4631      	mov	r1, r6
 8002fbe:	beab      	bkpt	0x00ab
 8002fc0:	4605      	mov	r5, r0
 8002fc2:	6025      	str	r5, [r4, #0]
 8002fc4:	e7eb      	b.n	8002f9e <_isatty+0x12>
	...

08002fc8 <__sflush_r>:
 8002fc8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fce:	0716      	lsls	r6, r2, #28
 8002fd0:	4605      	mov	r5, r0
 8002fd2:	460c      	mov	r4, r1
 8002fd4:	d454      	bmi.n	8003080 <__sflush_r+0xb8>
 8002fd6:	684b      	ldr	r3, [r1, #4]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	dc02      	bgt.n	8002fe2 <__sflush_r+0x1a>
 8002fdc:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	dd48      	ble.n	8003074 <__sflush_r+0xac>
 8002fe2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002fe4:	2e00      	cmp	r6, #0
 8002fe6:	d045      	beq.n	8003074 <__sflush_r+0xac>
 8002fe8:	2300      	movs	r3, #0
 8002fea:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002fee:	682f      	ldr	r7, [r5, #0]
 8002ff0:	6a21      	ldr	r1, [r4, #32]
 8002ff2:	602b      	str	r3, [r5, #0]
 8002ff4:	d030      	beq.n	8003058 <__sflush_r+0x90>
 8002ff6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002ff8:	89a3      	ldrh	r3, [r4, #12]
 8002ffa:	0759      	lsls	r1, r3, #29
 8002ffc:	d505      	bpl.n	800300a <__sflush_r+0x42>
 8002ffe:	6863      	ldr	r3, [r4, #4]
 8003000:	1ad2      	subs	r2, r2, r3
 8003002:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003004:	b10b      	cbz	r3, 800300a <__sflush_r+0x42>
 8003006:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003008:	1ad2      	subs	r2, r2, r3
 800300a:	2300      	movs	r3, #0
 800300c:	4628      	mov	r0, r5
 800300e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003010:	6a21      	ldr	r1, [r4, #32]
 8003012:	47b0      	blx	r6
 8003014:	1c43      	adds	r3, r0, #1
 8003016:	89a3      	ldrh	r3, [r4, #12]
 8003018:	d106      	bne.n	8003028 <__sflush_r+0x60>
 800301a:	6829      	ldr	r1, [r5, #0]
 800301c:	291d      	cmp	r1, #29
 800301e:	d82b      	bhi.n	8003078 <__sflush_r+0xb0>
 8003020:	4a28      	ldr	r2, [pc, #160]	@ (80030c4 <__sflush_r+0xfc>)
 8003022:	410a      	asrs	r2, r1
 8003024:	07d6      	lsls	r6, r2, #31
 8003026:	d427      	bmi.n	8003078 <__sflush_r+0xb0>
 8003028:	2200      	movs	r2, #0
 800302a:	6062      	str	r2, [r4, #4]
 800302c:	6922      	ldr	r2, [r4, #16]
 800302e:	04d9      	lsls	r1, r3, #19
 8003030:	6022      	str	r2, [r4, #0]
 8003032:	d504      	bpl.n	800303e <__sflush_r+0x76>
 8003034:	1c42      	adds	r2, r0, #1
 8003036:	d101      	bne.n	800303c <__sflush_r+0x74>
 8003038:	682b      	ldr	r3, [r5, #0]
 800303a:	b903      	cbnz	r3, 800303e <__sflush_r+0x76>
 800303c:	6560      	str	r0, [r4, #84]	@ 0x54
 800303e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003040:	602f      	str	r7, [r5, #0]
 8003042:	b1b9      	cbz	r1, 8003074 <__sflush_r+0xac>
 8003044:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003048:	4299      	cmp	r1, r3
 800304a:	d002      	beq.n	8003052 <__sflush_r+0x8a>
 800304c:	4628      	mov	r0, r5
 800304e:	f000 fa3f 	bl	80034d0 <_free_r>
 8003052:	2300      	movs	r3, #0
 8003054:	6363      	str	r3, [r4, #52]	@ 0x34
 8003056:	e00d      	b.n	8003074 <__sflush_r+0xac>
 8003058:	2301      	movs	r3, #1
 800305a:	4628      	mov	r0, r5
 800305c:	47b0      	blx	r6
 800305e:	4602      	mov	r2, r0
 8003060:	1c50      	adds	r0, r2, #1
 8003062:	d1c9      	bne.n	8002ff8 <__sflush_r+0x30>
 8003064:	682b      	ldr	r3, [r5, #0]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d0c6      	beq.n	8002ff8 <__sflush_r+0x30>
 800306a:	2b1d      	cmp	r3, #29
 800306c:	d001      	beq.n	8003072 <__sflush_r+0xaa>
 800306e:	2b16      	cmp	r3, #22
 8003070:	d11d      	bne.n	80030ae <__sflush_r+0xe6>
 8003072:	602f      	str	r7, [r5, #0]
 8003074:	2000      	movs	r0, #0
 8003076:	e021      	b.n	80030bc <__sflush_r+0xf4>
 8003078:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800307c:	b21b      	sxth	r3, r3
 800307e:	e01a      	b.n	80030b6 <__sflush_r+0xee>
 8003080:	690f      	ldr	r7, [r1, #16]
 8003082:	2f00      	cmp	r7, #0
 8003084:	d0f6      	beq.n	8003074 <__sflush_r+0xac>
 8003086:	0793      	lsls	r3, r2, #30
 8003088:	bf18      	it	ne
 800308a:	2300      	movne	r3, #0
 800308c:	680e      	ldr	r6, [r1, #0]
 800308e:	bf08      	it	eq
 8003090:	694b      	ldreq	r3, [r1, #20]
 8003092:	1bf6      	subs	r6, r6, r7
 8003094:	600f      	str	r7, [r1, #0]
 8003096:	608b      	str	r3, [r1, #8]
 8003098:	2e00      	cmp	r6, #0
 800309a:	ddeb      	ble.n	8003074 <__sflush_r+0xac>
 800309c:	4633      	mov	r3, r6
 800309e:	463a      	mov	r2, r7
 80030a0:	4628      	mov	r0, r5
 80030a2:	6a21      	ldr	r1, [r4, #32]
 80030a4:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80030a8:	47e0      	blx	ip
 80030aa:	2800      	cmp	r0, #0
 80030ac:	dc07      	bgt.n	80030be <__sflush_r+0xf6>
 80030ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80030b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80030b6:	f04f 30ff 	mov.w	r0, #4294967295
 80030ba:	81a3      	strh	r3, [r4, #12]
 80030bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80030be:	4407      	add	r7, r0
 80030c0:	1a36      	subs	r6, r6, r0
 80030c2:	e7e9      	b.n	8003098 <__sflush_r+0xd0>
 80030c4:	dfbffffe 	.word	0xdfbffffe

080030c8 <_fflush_r>:
 80030c8:	b538      	push	{r3, r4, r5, lr}
 80030ca:	690b      	ldr	r3, [r1, #16]
 80030cc:	4605      	mov	r5, r0
 80030ce:	460c      	mov	r4, r1
 80030d0:	b913      	cbnz	r3, 80030d8 <_fflush_r+0x10>
 80030d2:	2500      	movs	r5, #0
 80030d4:	4628      	mov	r0, r5
 80030d6:	bd38      	pop	{r3, r4, r5, pc}
 80030d8:	b118      	cbz	r0, 80030e2 <_fflush_r+0x1a>
 80030da:	6a03      	ldr	r3, [r0, #32]
 80030dc:	b90b      	cbnz	r3, 80030e2 <_fflush_r+0x1a>
 80030de:	f000 f8bb 	bl	8003258 <__sinit>
 80030e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d0f3      	beq.n	80030d2 <_fflush_r+0xa>
 80030ea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80030ec:	07d0      	lsls	r0, r2, #31
 80030ee:	d404      	bmi.n	80030fa <_fflush_r+0x32>
 80030f0:	0599      	lsls	r1, r3, #22
 80030f2:	d402      	bmi.n	80030fa <_fflush_r+0x32>
 80030f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80030f6:	f000 f9e8 	bl	80034ca <__retarget_lock_acquire_recursive>
 80030fa:	4628      	mov	r0, r5
 80030fc:	4621      	mov	r1, r4
 80030fe:	f7ff ff63 	bl	8002fc8 <__sflush_r>
 8003102:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003104:	4605      	mov	r5, r0
 8003106:	07da      	lsls	r2, r3, #31
 8003108:	d4e4      	bmi.n	80030d4 <_fflush_r+0xc>
 800310a:	89a3      	ldrh	r3, [r4, #12]
 800310c:	059b      	lsls	r3, r3, #22
 800310e:	d4e1      	bmi.n	80030d4 <_fflush_r+0xc>
 8003110:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003112:	f000 f9db 	bl	80034cc <__retarget_lock_release_recursive>
 8003116:	e7dd      	b.n	80030d4 <_fflush_r+0xc>

08003118 <fflush>:
 8003118:	4601      	mov	r1, r0
 800311a:	b920      	cbnz	r0, 8003126 <fflush+0xe>
 800311c:	4a04      	ldr	r2, [pc, #16]	@ (8003130 <fflush+0x18>)
 800311e:	4905      	ldr	r1, [pc, #20]	@ (8003134 <fflush+0x1c>)
 8003120:	4805      	ldr	r0, [pc, #20]	@ (8003138 <fflush+0x20>)
 8003122:	f000 b8b1 	b.w	8003288 <_fwalk_sglue>
 8003126:	4b05      	ldr	r3, [pc, #20]	@ (800313c <fflush+0x24>)
 8003128:	6818      	ldr	r0, [r3, #0]
 800312a:	f7ff bfcd 	b.w	80030c8 <_fflush_r>
 800312e:	bf00      	nop
 8003130:	2000004c 	.word	0x2000004c
 8003134:	080030c9 	.word	0x080030c9
 8003138:	2000005c 	.word	0x2000005c
 800313c:	20000058 	.word	0x20000058

08003140 <std>:
 8003140:	2300      	movs	r3, #0
 8003142:	b510      	push	{r4, lr}
 8003144:	4604      	mov	r4, r0
 8003146:	e9c0 3300 	strd	r3, r3, [r0]
 800314a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800314e:	6083      	str	r3, [r0, #8]
 8003150:	8181      	strh	r1, [r0, #12]
 8003152:	6643      	str	r3, [r0, #100]	@ 0x64
 8003154:	81c2      	strh	r2, [r0, #14]
 8003156:	6183      	str	r3, [r0, #24]
 8003158:	4619      	mov	r1, r3
 800315a:	2208      	movs	r2, #8
 800315c:	305c      	adds	r0, #92	@ 0x5c
 800315e:	f000 f93a 	bl	80033d6 <memset>
 8003162:	4b0d      	ldr	r3, [pc, #52]	@ (8003198 <std+0x58>)
 8003164:	6224      	str	r4, [r4, #32]
 8003166:	6263      	str	r3, [r4, #36]	@ 0x24
 8003168:	4b0c      	ldr	r3, [pc, #48]	@ (800319c <std+0x5c>)
 800316a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800316c:	4b0c      	ldr	r3, [pc, #48]	@ (80031a0 <std+0x60>)
 800316e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003170:	4b0c      	ldr	r3, [pc, #48]	@ (80031a4 <std+0x64>)
 8003172:	6323      	str	r3, [r4, #48]	@ 0x30
 8003174:	4b0c      	ldr	r3, [pc, #48]	@ (80031a8 <std+0x68>)
 8003176:	429c      	cmp	r4, r3
 8003178:	d006      	beq.n	8003188 <std+0x48>
 800317a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800317e:	4294      	cmp	r4, r2
 8003180:	d002      	beq.n	8003188 <std+0x48>
 8003182:	33d0      	adds	r3, #208	@ 0xd0
 8003184:	429c      	cmp	r4, r3
 8003186:	d105      	bne.n	8003194 <std+0x54>
 8003188:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800318c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003190:	f000 b99a 	b.w	80034c8 <__retarget_lock_init_recursive>
 8003194:	bd10      	pop	{r4, pc}
 8003196:	bf00      	nop
 8003198:	08003351 	.word	0x08003351
 800319c:	08003373 	.word	0x08003373
 80031a0:	080033ab 	.word	0x080033ab
 80031a4:	080033cf 	.word	0x080033cf
 80031a8:	20000274 	.word	0x20000274

080031ac <stdio_exit_handler>:
 80031ac:	4a02      	ldr	r2, [pc, #8]	@ (80031b8 <stdio_exit_handler+0xc>)
 80031ae:	4903      	ldr	r1, [pc, #12]	@ (80031bc <stdio_exit_handler+0x10>)
 80031b0:	4803      	ldr	r0, [pc, #12]	@ (80031c0 <stdio_exit_handler+0x14>)
 80031b2:	f000 b869 	b.w	8003288 <_fwalk_sglue>
 80031b6:	bf00      	nop
 80031b8:	2000004c 	.word	0x2000004c
 80031bc:	080030c9 	.word	0x080030c9
 80031c0:	2000005c 	.word	0x2000005c

080031c4 <cleanup_stdio>:
 80031c4:	6841      	ldr	r1, [r0, #4]
 80031c6:	4b0c      	ldr	r3, [pc, #48]	@ (80031f8 <cleanup_stdio+0x34>)
 80031c8:	b510      	push	{r4, lr}
 80031ca:	4299      	cmp	r1, r3
 80031cc:	4604      	mov	r4, r0
 80031ce:	d001      	beq.n	80031d4 <cleanup_stdio+0x10>
 80031d0:	f7ff ff7a 	bl	80030c8 <_fflush_r>
 80031d4:	68a1      	ldr	r1, [r4, #8]
 80031d6:	4b09      	ldr	r3, [pc, #36]	@ (80031fc <cleanup_stdio+0x38>)
 80031d8:	4299      	cmp	r1, r3
 80031da:	d002      	beq.n	80031e2 <cleanup_stdio+0x1e>
 80031dc:	4620      	mov	r0, r4
 80031de:	f7ff ff73 	bl	80030c8 <_fflush_r>
 80031e2:	68e1      	ldr	r1, [r4, #12]
 80031e4:	4b06      	ldr	r3, [pc, #24]	@ (8003200 <cleanup_stdio+0x3c>)
 80031e6:	4299      	cmp	r1, r3
 80031e8:	d004      	beq.n	80031f4 <cleanup_stdio+0x30>
 80031ea:	4620      	mov	r0, r4
 80031ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80031f0:	f7ff bf6a 	b.w	80030c8 <_fflush_r>
 80031f4:	bd10      	pop	{r4, pc}
 80031f6:	bf00      	nop
 80031f8:	20000274 	.word	0x20000274
 80031fc:	200002dc 	.word	0x200002dc
 8003200:	20000344 	.word	0x20000344

08003204 <global_stdio_init.part.0>:
 8003204:	b510      	push	{r4, lr}
 8003206:	4b0b      	ldr	r3, [pc, #44]	@ (8003234 <global_stdio_init.part.0+0x30>)
 8003208:	4c0b      	ldr	r4, [pc, #44]	@ (8003238 <global_stdio_init.part.0+0x34>)
 800320a:	4a0c      	ldr	r2, [pc, #48]	@ (800323c <global_stdio_init.part.0+0x38>)
 800320c:	4620      	mov	r0, r4
 800320e:	601a      	str	r2, [r3, #0]
 8003210:	2104      	movs	r1, #4
 8003212:	2200      	movs	r2, #0
 8003214:	f7ff ff94 	bl	8003140 <std>
 8003218:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800321c:	2201      	movs	r2, #1
 800321e:	2109      	movs	r1, #9
 8003220:	f7ff ff8e 	bl	8003140 <std>
 8003224:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003228:	2202      	movs	r2, #2
 800322a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800322e:	2112      	movs	r1, #18
 8003230:	f7ff bf86 	b.w	8003140 <std>
 8003234:	200003ac 	.word	0x200003ac
 8003238:	20000274 	.word	0x20000274
 800323c:	080031ad 	.word	0x080031ad

08003240 <__sfp_lock_acquire>:
 8003240:	4801      	ldr	r0, [pc, #4]	@ (8003248 <__sfp_lock_acquire+0x8>)
 8003242:	f000 b942 	b.w	80034ca <__retarget_lock_acquire_recursive>
 8003246:	bf00      	nop
 8003248:	200003b5 	.word	0x200003b5

0800324c <__sfp_lock_release>:
 800324c:	4801      	ldr	r0, [pc, #4]	@ (8003254 <__sfp_lock_release+0x8>)
 800324e:	f000 b93d 	b.w	80034cc <__retarget_lock_release_recursive>
 8003252:	bf00      	nop
 8003254:	200003b5 	.word	0x200003b5

08003258 <__sinit>:
 8003258:	b510      	push	{r4, lr}
 800325a:	4604      	mov	r4, r0
 800325c:	f7ff fff0 	bl	8003240 <__sfp_lock_acquire>
 8003260:	6a23      	ldr	r3, [r4, #32]
 8003262:	b11b      	cbz	r3, 800326c <__sinit+0x14>
 8003264:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003268:	f7ff bff0 	b.w	800324c <__sfp_lock_release>
 800326c:	4b04      	ldr	r3, [pc, #16]	@ (8003280 <__sinit+0x28>)
 800326e:	6223      	str	r3, [r4, #32]
 8003270:	4b04      	ldr	r3, [pc, #16]	@ (8003284 <__sinit+0x2c>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d1f5      	bne.n	8003264 <__sinit+0xc>
 8003278:	f7ff ffc4 	bl	8003204 <global_stdio_init.part.0>
 800327c:	e7f2      	b.n	8003264 <__sinit+0xc>
 800327e:	bf00      	nop
 8003280:	080031c5 	.word	0x080031c5
 8003284:	200003ac 	.word	0x200003ac

08003288 <_fwalk_sglue>:
 8003288:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800328c:	4607      	mov	r7, r0
 800328e:	4688      	mov	r8, r1
 8003290:	4614      	mov	r4, r2
 8003292:	2600      	movs	r6, #0
 8003294:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003298:	f1b9 0901 	subs.w	r9, r9, #1
 800329c:	d505      	bpl.n	80032aa <_fwalk_sglue+0x22>
 800329e:	6824      	ldr	r4, [r4, #0]
 80032a0:	2c00      	cmp	r4, #0
 80032a2:	d1f7      	bne.n	8003294 <_fwalk_sglue+0xc>
 80032a4:	4630      	mov	r0, r6
 80032a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80032aa:	89ab      	ldrh	r3, [r5, #12]
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d907      	bls.n	80032c0 <_fwalk_sglue+0x38>
 80032b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80032b4:	3301      	adds	r3, #1
 80032b6:	d003      	beq.n	80032c0 <_fwalk_sglue+0x38>
 80032b8:	4629      	mov	r1, r5
 80032ba:	4638      	mov	r0, r7
 80032bc:	47c0      	blx	r8
 80032be:	4306      	orrs	r6, r0
 80032c0:	3568      	adds	r5, #104	@ 0x68
 80032c2:	e7e9      	b.n	8003298 <_fwalk_sglue+0x10>

080032c4 <iprintf>:
 80032c4:	b40f      	push	{r0, r1, r2, r3}
 80032c6:	b507      	push	{r0, r1, r2, lr}
 80032c8:	4906      	ldr	r1, [pc, #24]	@ (80032e4 <iprintf+0x20>)
 80032ca:	ab04      	add	r3, sp, #16
 80032cc:	6808      	ldr	r0, [r1, #0]
 80032ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80032d2:	6881      	ldr	r1, [r0, #8]
 80032d4:	9301      	str	r3, [sp, #4]
 80032d6:	f000 fb71 	bl	80039bc <_vfiprintf_r>
 80032da:	b003      	add	sp, #12
 80032dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80032e0:	b004      	add	sp, #16
 80032e2:	4770      	bx	lr
 80032e4:	20000058 	.word	0x20000058

080032e8 <sniprintf>:
 80032e8:	b40c      	push	{r2, r3}
 80032ea:	b530      	push	{r4, r5, lr}
 80032ec:	4b17      	ldr	r3, [pc, #92]	@ (800334c <sniprintf+0x64>)
 80032ee:	1e0c      	subs	r4, r1, #0
 80032f0:	681d      	ldr	r5, [r3, #0]
 80032f2:	b09d      	sub	sp, #116	@ 0x74
 80032f4:	da08      	bge.n	8003308 <sniprintf+0x20>
 80032f6:	238b      	movs	r3, #139	@ 0x8b
 80032f8:	f04f 30ff 	mov.w	r0, #4294967295
 80032fc:	602b      	str	r3, [r5, #0]
 80032fe:	b01d      	add	sp, #116	@ 0x74
 8003300:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003304:	b002      	add	sp, #8
 8003306:	4770      	bx	lr
 8003308:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800330c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003310:	bf0c      	ite	eq
 8003312:	4623      	moveq	r3, r4
 8003314:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003318:	9304      	str	r3, [sp, #16]
 800331a:	9307      	str	r3, [sp, #28]
 800331c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003320:	9002      	str	r0, [sp, #8]
 8003322:	9006      	str	r0, [sp, #24]
 8003324:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003328:	4628      	mov	r0, r5
 800332a:	ab21      	add	r3, sp, #132	@ 0x84
 800332c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800332e:	a902      	add	r1, sp, #8
 8003330:	9301      	str	r3, [sp, #4]
 8003332:	f000 fa1f 	bl	8003774 <_svfiprintf_r>
 8003336:	1c43      	adds	r3, r0, #1
 8003338:	bfbc      	itt	lt
 800333a:	238b      	movlt	r3, #139	@ 0x8b
 800333c:	602b      	strlt	r3, [r5, #0]
 800333e:	2c00      	cmp	r4, #0
 8003340:	d0dd      	beq.n	80032fe <sniprintf+0x16>
 8003342:	2200      	movs	r2, #0
 8003344:	9b02      	ldr	r3, [sp, #8]
 8003346:	701a      	strb	r2, [r3, #0]
 8003348:	e7d9      	b.n	80032fe <sniprintf+0x16>
 800334a:	bf00      	nop
 800334c:	20000058 	.word	0x20000058

08003350 <__sread>:
 8003350:	b510      	push	{r4, lr}
 8003352:	460c      	mov	r4, r1
 8003354:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003358:	f000 f868 	bl	800342c <_read_r>
 800335c:	2800      	cmp	r0, #0
 800335e:	bfab      	itete	ge
 8003360:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003362:	89a3      	ldrhlt	r3, [r4, #12]
 8003364:	181b      	addge	r3, r3, r0
 8003366:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800336a:	bfac      	ite	ge
 800336c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800336e:	81a3      	strhlt	r3, [r4, #12]
 8003370:	bd10      	pop	{r4, pc}

08003372 <__swrite>:
 8003372:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003376:	461f      	mov	r7, r3
 8003378:	898b      	ldrh	r3, [r1, #12]
 800337a:	4605      	mov	r5, r0
 800337c:	05db      	lsls	r3, r3, #23
 800337e:	460c      	mov	r4, r1
 8003380:	4616      	mov	r6, r2
 8003382:	d505      	bpl.n	8003390 <__swrite+0x1e>
 8003384:	2302      	movs	r3, #2
 8003386:	2200      	movs	r2, #0
 8003388:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800338c:	f000 f83c 	bl	8003408 <_lseek_r>
 8003390:	89a3      	ldrh	r3, [r4, #12]
 8003392:	4632      	mov	r2, r6
 8003394:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003398:	81a3      	strh	r3, [r4, #12]
 800339a:	4628      	mov	r0, r5
 800339c:	463b      	mov	r3, r7
 800339e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80033a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80033a6:	f000 b853 	b.w	8003450 <_write_r>

080033aa <__sseek>:
 80033aa:	b510      	push	{r4, lr}
 80033ac:	460c      	mov	r4, r1
 80033ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80033b2:	f000 f829 	bl	8003408 <_lseek_r>
 80033b6:	1c43      	adds	r3, r0, #1
 80033b8:	89a3      	ldrh	r3, [r4, #12]
 80033ba:	bf15      	itete	ne
 80033bc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80033be:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80033c2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80033c6:	81a3      	strheq	r3, [r4, #12]
 80033c8:	bf18      	it	ne
 80033ca:	81a3      	strhne	r3, [r4, #12]
 80033cc:	bd10      	pop	{r4, pc}

080033ce <__sclose>:
 80033ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80033d2:	f000 b809 	b.w	80033e8 <_close_r>

080033d6 <memset>:
 80033d6:	4603      	mov	r3, r0
 80033d8:	4402      	add	r2, r0
 80033da:	4293      	cmp	r3, r2
 80033dc:	d100      	bne.n	80033e0 <memset+0xa>
 80033de:	4770      	bx	lr
 80033e0:	f803 1b01 	strb.w	r1, [r3], #1
 80033e4:	e7f9      	b.n	80033da <memset+0x4>
	...

080033e8 <_close_r>:
 80033e8:	b538      	push	{r3, r4, r5, lr}
 80033ea:	2300      	movs	r3, #0
 80033ec:	4d05      	ldr	r5, [pc, #20]	@ (8003404 <_close_r+0x1c>)
 80033ee:	4604      	mov	r4, r0
 80033f0:	4608      	mov	r0, r1
 80033f2:	602b      	str	r3, [r5, #0]
 80033f4:	f7ff fc24 	bl	8002c40 <_close>
 80033f8:	1c43      	adds	r3, r0, #1
 80033fa:	d102      	bne.n	8003402 <_close_r+0x1a>
 80033fc:	682b      	ldr	r3, [r5, #0]
 80033fe:	b103      	cbz	r3, 8003402 <_close_r+0x1a>
 8003400:	6023      	str	r3, [r4, #0]
 8003402:	bd38      	pop	{r3, r4, r5, pc}
 8003404:	200003b0 	.word	0x200003b0

08003408 <_lseek_r>:
 8003408:	b538      	push	{r3, r4, r5, lr}
 800340a:	4604      	mov	r4, r0
 800340c:	4608      	mov	r0, r1
 800340e:	4611      	mov	r1, r2
 8003410:	2200      	movs	r2, #0
 8003412:	4d05      	ldr	r5, [pc, #20]	@ (8003428 <_lseek_r+0x20>)
 8003414:	602a      	str	r2, [r5, #0]
 8003416:	461a      	mov	r2, r3
 8003418:	f7ff fbd3 	bl	8002bc2 <_lseek>
 800341c:	1c43      	adds	r3, r0, #1
 800341e:	d102      	bne.n	8003426 <_lseek_r+0x1e>
 8003420:	682b      	ldr	r3, [r5, #0]
 8003422:	b103      	cbz	r3, 8003426 <_lseek_r+0x1e>
 8003424:	6023      	str	r3, [r4, #0]
 8003426:	bd38      	pop	{r3, r4, r5, pc}
 8003428:	200003b0 	.word	0x200003b0

0800342c <_read_r>:
 800342c:	b538      	push	{r3, r4, r5, lr}
 800342e:	4604      	mov	r4, r0
 8003430:	4608      	mov	r0, r1
 8003432:	4611      	mov	r1, r2
 8003434:	2200      	movs	r2, #0
 8003436:	4d05      	ldr	r5, [pc, #20]	@ (800344c <_read_r+0x20>)
 8003438:	602a      	str	r2, [r5, #0]
 800343a:	461a      	mov	r2, r3
 800343c:	f7ff fb6b 	bl	8002b16 <_read>
 8003440:	1c43      	adds	r3, r0, #1
 8003442:	d102      	bne.n	800344a <_read_r+0x1e>
 8003444:	682b      	ldr	r3, [r5, #0]
 8003446:	b103      	cbz	r3, 800344a <_read_r+0x1e>
 8003448:	6023      	str	r3, [r4, #0]
 800344a:	bd38      	pop	{r3, r4, r5, pc}
 800344c:	200003b0 	.word	0x200003b0

08003450 <_write_r>:
 8003450:	b538      	push	{r3, r4, r5, lr}
 8003452:	4604      	mov	r4, r0
 8003454:	4608      	mov	r0, r1
 8003456:	4611      	mov	r1, r2
 8003458:	2200      	movs	r2, #0
 800345a:	4d05      	ldr	r5, [pc, #20]	@ (8003470 <_write_r+0x20>)
 800345c:	602a      	str	r2, [r5, #0]
 800345e:	461a      	mov	r2, r3
 8003460:	f7ff fbc1 	bl	8002be6 <_write>
 8003464:	1c43      	adds	r3, r0, #1
 8003466:	d102      	bne.n	800346e <_write_r+0x1e>
 8003468:	682b      	ldr	r3, [r5, #0]
 800346a:	b103      	cbz	r3, 800346e <_write_r+0x1e>
 800346c:	6023      	str	r3, [r4, #0]
 800346e:	bd38      	pop	{r3, r4, r5, pc}
 8003470:	200003b0 	.word	0x200003b0

08003474 <__errno>:
 8003474:	4b01      	ldr	r3, [pc, #4]	@ (800347c <__errno+0x8>)
 8003476:	6818      	ldr	r0, [r3, #0]
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop
 800347c:	20000058 	.word	0x20000058

08003480 <__libc_init_array>:
 8003480:	b570      	push	{r4, r5, r6, lr}
 8003482:	2600      	movs	r6, #0
 8003484:	4d0c      	ldr	r5, [pc, #48]	@ (80034b8 <__libc_init_array+0x38>)
 8003486:	4c0d      	ldr	r4, [pc, #52]	@ (80034bc <__libc_init_array+0x3c>)
 8003488:	1b64      	subs	r4, r4, r5
 800348a:	10a4      	asrs	r4, r4, #2
 800348c:	42a6      	cmp	r6, r4
 800348e:	d109      	bne.n	80034a4 <__libc_init_array+0x24>
 8003490:	f000 fed2 	bl	8004238 <_init>
 8003494:	2600      	movs	r6, #0
 8003496:	4d0a      	ldr	r5, [pc, #40]	@ (80034c0 <__libc_init_array+0x40>)
 8003498:	4c0a      	ldr	r4, [pc, #40]	@ (80034c4 <__libc_init_array+0x44>)
 800349a:	1b64      	subs	r4, r4, r5
 800349c:	10a4      	asrs	r4, r4, #2
 800349e:	42a6      	cmp	r6, r4
 80034a0:	d105      	bne.n	80034ae <__libc_init_array+0x2e>
 80034a2:	bd70      	pop	{r4, r5, r6, pc}
 80034a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80034a8:	4798      	blx	r3
 80034aa:	3601      	adds	r6, #1
 80034ac:	e7ee      	b.n	800348c <__libc_init_array+0xc>
 80034ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80034b2:	4798      	blx	r3
 80034b4:	3601      	adds	r6, #1
 80034b6:	e7f2      	b.n	800349e <__libc_init_array+0x1e>
 80034b8:	080046b8 	.word	0x080046b8
 80034bc:	080046b8 	.word	0x080046b8
 80034c0:	080046b8 	.word	0x080046b8
 80034c4:	080046bc 	.word	0x080046bc

080034c8 <__retarget_lock_init_recursive>:
 80034c8:	4770      	bx	lr

080034ca <__retarget_lock_acquire_recursive>:
 80034ca:	4770      	bx	lr

080034cc <__retarget_lock_release_recursive>:
 80034cc:	4770      	bx	lr
	...

080034d0 <_free_r>:
 80034d0:	b538      	push	{r3, r4, r5, lr}
 80034d2:	4605      	mov	r5, r0
 80034d4:	2900      	cmp	r1, #0
 80034d6:	d040      	beq.n	800355a <_free_r+0x8a>
 80034d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80034dc:	1f0c      	subs	r4, r1, #4
 80034de:	2b00      	cmp	r3, #0
 80034e0:	bfb8      	it	lt
 80034e2:	18e4      	addlt	r4, r4, r3
 80034e4:	f000 f8de 	bl	80036a4 <__malloc_lock>
 80034e8:	4a1c      	ldr	r2, [pc, #112]	@ (800355c <_free_r+0x8c>)
 80034ea:	6813      	ldr	r3, [r2, #0]
 80034ec:	b933      	cbnz	r3, 80034fc <_free_r+0x2c>
 80034ee:	6063      	str	r3, [r4, #4]
 80034f0:	6014      	str	r4, [r2, #0]
 80034f2:	4628      	mov	r0, r5
 80034f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80034f8:	f000 b8da 	b.w	80036b0 <__malloc_unlock>
 80034fc:	42a3      	cmp	r3, r4
 80034fe:	d908      	bls.n	8003512 <_free_r+0x42>
 8003500:	6820      	ldr	r0, [r4, #0]
 8003502:	1821      	adds	r1, r4, r0
 8003504:	428b      	cmp	r3, r1
 8003506:	bf01      	itttt	eq
 8003508:	6819      	ldreq	r1, [r3, #0]
 800350a:	685b      	ldreq	r3, [r3, #4]
 800350c:	1809      	addeq	r1, r1, r0
 800350e:	6021      	streq	r1, [r4, #0]
 8003510:	e7ed      	b.n	80034ee <_free_r+0x1e>
 8003512:	461a      	mov	r2, r3
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	b10b      	cbz	r3, 800351c <_free_r+0x4c>
 8003518:	42a3      	cmp	r3, r4
 800351a:	d9fa      	bls.n	8003512 <_free_r+0x42>
 800351c:	6811      	ldr	r1, [r2, #0]
 800351e:	1850      	adds	r0, r2, r1
 8003520:	42a0      	cmp	r0, r4
 8003522:	d10b      	bne.n	800353c <_free_r+0x6c>
 8003524:	6820      	ldr	r0, [r4, #0]
 8003526:	4401      	add	r1, r0
 8003528:	1850      	adds	r0, r2, r1
 800352a:	4283      	cmp	r3, r0
 800352c:	6011      	str	r1, [r2, #0]
 800352e:	d1e0      	bne.n	80034f2 <_free_r+0x22>
 8003530:	6818      	ldr	r0, [r3, #0]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	4408      	add	r0, r1
 8003536:	6010      	str	r0, [r2, #0]
 8003538:	6053      	str	r3, [r2, #4]
 800353a:	e7da      	b.n	80034f2 <_free_r+0x22>
 800353c:	d902      	bls.n	8003544 <_free_r+0x74>
 800353e:	230c      	movs	r3, #12
 8003540:	602b      	str	r3, [r5, #0]
 8003542:	e7d6      	b.n	80034f2 <_free_r+0x22>
 8003544:	6820      	ldr	r0, [r4, #0]
 8003546:	1821      	adds	r1, r4, r0
 8003548:	428b      	cmp	r3, r1
 800354a:	bf01      	itttt	eq
 800354c:	6819      	ldreq	r1, [r3, #0]
 800354e:	685b      	ldreq	r3, [r3, #4]
 8003550:	1809      	addeq	r1, r1, r0
 8003552:	6021      	streq	r1, [r4, #0]
 8003554:	6063      	str	r3, [r4, #4]
 8003556:	6054      	str	r4, [r2, #4]
 8003558:	e7cb      	b.n	80034f2 <_free_r+0x22>
 800355a:	bd38      	pop	{r3, r4, r5, pc}
 800355c:	200003bc 	.word	0x200003bc

08003560 <sbrk_aligned>:
 8003560:	b570      	push	{r4, r5, r6, lr}
 8003562:	4e0f      	ldr	r6, [pc, #60]	@ (80035a0 <sbrk_aligned+0x40>)
 8003564:	460c      	mov	r4, r1
 8003566:	6831      	ldr	r1, [r6, #0]
 8003568:	4605      	mov	r5, r0
 800356a:	b911      	cbnz	r1, 8003572 <sbrk_aligned+0x12>
 800356c:	f000 fd7e 	bl	800406c <_sbrk_r>
 8003570:	6030      	str	r0, [r6, #0]
 8003572:	4621      	mov	r1, r4
 8003574:	4628      	mov	r0, r5
 8003576:	f000 fd79 	bl	800406c <_sbrk_r>
 800357a:	1c43      	adds	r3, r0, #1
 800357c:	d103      	bne.n	8003586 <sbrk_aligned+0x26>
 800357e:	f04f 34ff 	mov.w	r4, #4294967295
 8003582:	4620      	mov	r0, r4
 8003584:	bd70      	pop	{r4, r5, r6, pc}
 8003586:	1cc4      	adds	r4, r0, #3
 8003588:	f024 0403 	bic.w	r4, r4, #3
 800358c:	42a0      	cmp	r0, r4
 800358e:	d0f8      	beq.n	8003582 <sbrk_aligned+0x22>
 8003590:	1a21      	subs	r1, r4, r0
 8003592:	4628      	mov	r0, r5
 8003594:	f000 fd6a 	bl	800406c <_sbrk_r>
 8003598:	3001      	adds	r0, #1
 800359a:	d1f2      	bne.n	8003582 <sbrk_aligned+0x22>
 800359c:	e7ef      	b.n	800357e <sbrk_aligned+0x1e>
 800359e:	bf00      	nop
 80035a0:	200003b8 	.word	0x200003b8

080035a4 <_malloc_r>:
 80035a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80035a8:	1ccd      	adds	r5, r1, #3
 80035aa:	f025 0503 	bic.w	r5, r5, #3
 80035ae:	3508      	adds	r5, #8
 80035b0:	2d0c      	cmp	r5, #12
 80035b2:	bf38      	it	cc
 80035b4:	250c      	movcc	r5, #12
 80035b6:	2d00      	cmp	r5, #0
 80035b8:	4606      	mov	r6, r0
 80035ba:	db01      	blt.n	80035c0 <_malloc_r+0x1c>
 80035bc:	42a9      	cmp	r1, r5
 80035be:	d904      	bls.n	80035ca <_malloc_r+0x26>
 80035c0:	230c      	movs	r3, #12
 80035c2:	6033      	str	r3, [r6, #0]
 80035c4:	2000      	movs	r0, #0
 80035c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80035ca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80036a0 <_malloc_r+0xfc>
 80035ce:	f000 f869 	bl	80036a4 <__malloc_lock>
 80035d2:	f8d8 3000 	ldr.w	r3, [r8]
 80035d6:	461c      	mov	r4, r3
 80035d8:	bb44      	cbnz	r4, 800362c <_malloc_r+0x88>
 80035da:	4629      	mov	r1, r5
 80035dc:	4630      	mov	r0, r6
 80035de:	f7ff ffbf 	bl	8003560 <sbrk_aligned>
 80035e2:	1c43      	adds	r3, r0, #1
 80035e4:	4604      	mov	r4, r0
 80035e6:	d158      	bne.n	800369a <_malloc_r+0xf6>
 80035e8:	f8d8 4000 	ldr.w	r4, [r8]
 80035ec:	4627      	mov	r7, r4
 80035ee:	2f00      	cmp	r7, #0
 80035f0:	d143      	bne.n	800367a <_malloc_r+0xd6>
 80035f2:	2c00      	cmp	r4, #0
 80035f4:	d04b      	beq.n	800368e <_malloc_r+0xea>
 80035f6:	6823      	ldr	r3, [r4, #0]
 80035f8:	4639      	mov	r1, r7
 80035fa:	4630      	mov	r0, r6
 80035fc:	eb04 0903 	add.w	r9, r4, r3
 8003600:	f000 fd34 	bl	800406c <_sbrk_r>
 8003604:	4581      	cmp	r9, r0
 8003606:	d142      	bne.n	800368e <_malloc_r+0xea>
 8003608:	6821      	ldr	r1, [r4, #0]
 800360a:	4630      	mov	r0, r6
 800360c:	1a6d      	subs	r5, r5, r1
 800360e:	4629      	mov	r1, r5
 8003610:	f7ff ffa6 	bl	8003560 <sbrk_aligned>
 8003614:	3001      	adds	r0, #1
 8003616:	d03a      	beq.n	800368e <_malloc_r+0xea>
 8003618:	6823      	ldr	r3, [r4, #0]
 800361a:	442b      	add	r3, r5
 800361c:	6023      	str	r3, [r4, #0]
 800361e:	f8d8 3000 	ldr.w	r3, [r8]
 8003622:	685a      	ldr	r2, [r3, #4]
 8003624:	bb62      	cbnz	r2, 8003680 <_malloc_r+0xdc>
 8003626:	f8c8 7000 	str.w	r7, [r8]
 800362a:	e00f      	b.n	800364c <_malloc_r+0xa8>
 800362c:	6822      	ldr	r2, [r4, #0]
 800362e:	1b52      	subs	r2, r2, r5
 8003630:	d420      	bmi.n	8003674 <_malloc_r+0xd0>
 8003632:	2a0b      	cmp	r2, #11
 8003634:	d917      	bls.n	8003666 <_malloc_r+0xc2>
 8003636:	1961      	adds	r1, r4, r5
 8003638:	42a3      	cmp	r3, r4
 800363a:	6025      	str	r5, [r4, #0]
 800363c:	bf18      	it	ne
 800363e:	6059      	strne	r1, [r3, #4]
 8003640:	6863      	ldr	r3, [r4, #4]
 8003642:	bf08      	it	eq
 8003644:	f8c8 1000 	streq.w	r1, [r8]
 8003648:	5162      	str	r2, [r4, r5]
 800364a:	604b      	str	r3, [r1, #4]
 800364c:	4630      	mov	r0, r6
 800364e:	f000 f82f 	bl	80036b0 <__malloc_unlock>
 8003652:	f104 000b 	add.w	r0, r4, #11
 8003656:	1d23      	adds	r3, r4, #4
 8003658:	f020 0007 	bic.w	r0, r0, #7
 800365c:	1ac2      	subs	r2, r0, r3
 800365e:	bf1c      	itt	ne
 8003660:	1a1b      	subne	r3, r3, r0
 8003662:	50a3      	strne	r3, [r4, r2]
 8003664:	e7af      	b.n	80035c6 <_malloc_r+0x22>
 8003666:	6862      	ldr	r2, [r4, #4]
 8003668:	42a3      	cmp	r3, r4
 800366a:	bf0c      	ite	eq
 800366c:	f8c8 2000 	streq.w	r2, [r8]
 8003670:	605a      	strne	r2, [r3, #4]
 8003672:	e7eb      	b.n	800364c <_malloc_r+0xa8>
 8003674:	4623      	mov	r3, r4
 8003676:	6864      	ldr	r4, [r4, #4]
 8003678:	e7ae      	b.n	80035d8 <_malloc_r+0x34>
 800367a:	463c      	mov	r4, r7
 800367c:	687f      	ldr	r7, [r7, #4]
 800367e:	e7b6      	b.n	80035ee <_malloc_r+0x4a>
 8003680:	461a      	mov	r2, r3
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	42a3      	cmp	r3, r4
 8003686:	d1fb      	bne.n	8003680 <_malloc_r+0xdc>
 8003688:	2300      	movs	r3, #0
 800368a:	6053      	str	r3, [r2, #4]
 800368c:	e7de      	b.n	800364c <_malloc_r+0xa8>
 800368e:	230c      	movs	r3, #12
 8003690:	4630      	mov	r0, r6
 8003692:	6033      	str	r3, [r6, #0]
 8003694:	f000 f80c 	bl	80036b0 <__malloc_unlock>
 8003698:	e794      	b.n	80035c4 <_malloc_r+0x20>
 800369a:	6005      	str	r5, [r0, #0]
 800369c:	e7d6      	b.n	800364c <_malloc_r+0xa8>
 800369e:	bf00      	nop
 80036a0:	200003bc 	.word	0x200003bc

080036a4 <__malloc_lock>:
 80036a4:	4801      	ldr	r0, [pc, #4]	@ (80036ac <__malloc_lock+0x8>)
 80036a6:	f7ff bf10 	b.w	80034ca <__retarget_lock_acquire_recursive>
 80036aa:	bf00      	nop
 80036ac:	200003b4 	.word	0x200003b4

080036b0 <__malloc_unlock>:
 80036b0:	4801      	ldr	r0, [pc, #4]	@ (80036b8 <__malloc_unlock+0x8>)
 80036b2:	f7ff bf0b 	b.w	80034cc <__retarget_lock_release_recursive>
 80036b6:	bf00      	nop
 80036b8:	200003b4 	.word	0x200003b4

080036bc <__ssputs_r>:
 80036bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036c0:	461f      	mov	r7, r3
 80036c2:	688e      	ldr	r6, [r1, #8]
 80036c4:	4682      	mov	sl, r0
 80036c6:	42be      	cmp	r6, r7
 80036c8:	460c      	mov	r4, r1
 80036ca:	4690      	mov	r8, r2
 80036cc:	680b      	ldr	r3, [r1, #0]
 80036ce:	d82d      	bhi.n	800372c <__ssputs_r+0x70>
 80036d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80036d4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80036d8:	d026      	beq.n	8003728 <__ssputs_r+0x6c>
 80036da:	6965      	ldr	r5, [r4, #20]
 80036dc:	6909      	ldr	r1, [r1, #16]
 80036de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80036e2:	eba3 0901 	sub.w	r9, r3, r1
 80036e6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80036ea:	1c7b      	adds	r3, r7, #1
 80036ec:	444b      	add	r3, r9
 80036ee:	106d      	asrs	r5, r5, #1
 80036f0:	429d      	cmp	r5, r3
 80036f2:	bf38      	it	cc
 80036f4:	461d      	movcc	r5, r3
 80036f6:	0553      	lsls	r3, r2, #21
 80036f8:	d527      	bpl.n	800374a <__ssputs_r+0x8e>
 80036fa:	4629      	mov	r1, r5
 80036fc:	f7ff ff52 	bl	80035a4 <_malloc_r>
 8003700:	4606      	mov	r6, r0
 8003702:	b360      	cbz	r0, 800375e <__ssputs_r+0xa2>
 8003704:	464a      	mov	r2, r9
 8003706:	6921      	ldr	r1, [r4, #16]
 8003708:	f000 fcce 	bl	80040a8 <memcpy>
 800370c:	89a3      	ldrh	r3, [r4, #12]
 800370e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003712:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003716:	81a3      	strh	r3, [r4, #12]
 8003718:	6126      	str	r6, [r4, #16]
 800371a:	444e      	add	r6, r9
 800371c:	6026      	str	r6, [r4, #0]
 800371e:	463e      	mov	r6, r7
 8003720:	6165      	str	r5, [r4, #20]
 8003722:	eba5 0509 	sub.w	r5, r5, r9
 8003726:	60a5      	str	r5, [r4, #8]
 8003728:	42be      	cmp	r6, r7
 800372a:	d900      	bls.n	800372e <__ssputs_r+0x72>
 800372c:	463e      	mov	r6, r7
 800372e:	4632      	mov	r2, r6
 8003730:	4641      	mov	r1, r8
 8003732:	6820      	ldr	r0, [r4, #0]
 8003734:	f000 fc80 	bl	8004038 <memmove>
 8003738:	2000      	movs	r0, #0
 800373a:	68a3      	ldr	r3, [r4, #8]
 800373c:	1b9b      	subs	r3, r3, r6
 800373e:	60a3      	str	r3, [r4, #8]
 8003740:	6823      	ldr	r3, [r4, #0]
 8003742:	4433      	add	r3, r6
 8003744:	6023      	str	r3, [r4, #0]
 8003746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800374a:	462a      	mov	r2, r5
 800374c:	f000 fcba 	bl	80040c4 <_realloc_r>
 8003750:	4606      	mov	r6, r0
 8003752:	2800      	cmp	r0, #0
 8003754:	d1e0      	bne.n	8003718 <__ssputs_r+0x5c>
 8003756:	4650      	mov	r0, sl
 8003758:	6921      	ldr	r1, [r4, #16]
 800375a:	f7ff feb9 	bl	80034d0 <_free_r>
 800375e:	230c      	movs	r3, #12
 8003760:	f8ca 3000 	str.w	r3, [sl]
 8003764:	89a3      	ldrh	r3, [r4, #12]
 8003766:	f04f 30ff 	mov.w	r0, #4294967295
 800376a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800376e:	81a3      	strh	r3, [r4, #12]
 8003770:	e7e9      	b.n	8003746 <__ssputs_r+0x8a>
	...

08003774 <_svfiprintf_r>:
 8003774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003778:	4698      	mov	r8, r3
 800377a:	898b      	ldrh	r3, [r1, #12]
 800377c:	4607      	mov	r7, r0
 800377e:	061b      	lsls	r3, r3, #24
 8003780:	460d      	mov	r5, r1
 8003782:	4614      	mov	r4, r2
 8003784:	b09d      	sub	sp, #116	@ 0x74
 8003786:	d510      	bpl.n	80037aa <_svfiprintf_r+0x36>
 8003788:	690b      	ldr	r3, [r1, #16]
 800378a:	b973      	cbnz	r3, 80037aa <_svfiprintf_r+0x36>
 800378c:	2140      	movs	r1, #64	@ 0x40
 800378e:	f7ff ff09 	bl	80035a4 <_malloc_r>
 8003792:	6028      	str	r0, [r5, #0]
 8003794:	6128      	str	r0, [r5, #16]
 8003796:	b930      	cbnz	r0, 80037a6 <_svfiprintf_r+0x32>
 8003798:	230c      	movs	r3, #12
 800379a:	603b      	str	r3, [r7, #0]
 800379c:	f04f 30ff 	mov.w	r0, #4294967295
 80037a0:	b01d      	add	sp, #116	@ 0x74
 80037a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037a6:	2340      	movs	r3, #64	@ 0x40
 80037a8:	616b      	str	r3, [r5, #20]
 80037aa:	2300      	movs	r3, #0
 80037ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80037ae:	2320      	movs	r3, #32
 80037b0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80037b4:	2330      	movs	r3, #48	@ 0x30
 80037b6:	f04f 0901 	mov.w	r9, #1
 80037ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80037be:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8003958 <_svfiprintf_r+0x1e4>
 80037c2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80037c6:	4623      	mov	r3, r4
 80037c8:	469a      	mov	sl, r3
 80037ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80037ce:	b10a      	cbz	r2, 80037d4 <_svfiprintf_r+0x60>
 80037d0:	2a25      	cmp	r2, #37	@ 0x25
 80037d2:	d1f9      	bne.n	80037c8 <_svfiprintf_r+0x54>
 80037d4:	ebba 0b04 	subs.w	fp, sl, r4
 80037d8:	d00b      	beq.n	80037f2 <_svfiprintf_r+0x7e>
 80037da:	465b      	mov	r3, fp
 80037dc:	4622      	mov	r2, r4
 80037de:	4629      	mov	r1, r5
 80037e0:	4638      	mov	r0, r7
 80037e2:	f7ff ff6b 	bl	80036bc <__ssputs_r>
 80037e6:	3001      	adds	r0, #1
 80037e8:	f000 80a7 	beq.w	800393a <_svfiprintf_r+0x1c6>
 80037ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80037ee:	445a      	add	r2, fp
 80037f0:	9209      	str	r2, [sp, #36]	@ 0x24
 80037f2:	f89a 3000 	ldrb.w	r3, [sl]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	f000 809f 	beq.w	800393a <_svfiprintf_r+0x1c6>
 80037fc:	2300      	movs	r3, #0
 80037fe:	f04f 32ff 	mov.w	r2, #4294967295
 8003802:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003806:	f10a 0a01 	add.w	sl, sl, #1
 800380a:	9304      	str	r3, [sp, #16]
 800380c:	9307      	str	r3, [sp, #28]
 800380e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003812:	931a      	str	r3, [sp, #104]	@ 0x68
 8003814:	4654      	mov	r4, sl
 8003816:	2205      	movs	r2, #5
 8003818:	f814 1b01 	ldrb.w	r1, [r4], #1
 800381c:	484e      	ldr	r0, [pc, #312]	@ (8003958 <_svfiprintf_r+0x1e4>)
 800381e:	f000 fc35 	bl	800408c <memchr>
 8003822:	9a04      	ldr	r2, [sp, #16]
 8003824:	b9d8      	cbnz	r0, 800385e <_svfiprintf_r+0xea>
 8003826:	06d0      	lsls	r0, r2, #27
 8003828:	bf44      	itt	mi
 800382a:	2320      	movmi	r3, #32
 800382c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003830:	0711      	lsls	r1, r2, #28
 8003832:	bf44      	itt	mi
 8003834:	232b      	movmi	r3, #43	@ 0x2b
 8003836:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800383a:	f89a 3000 	ldrb.w	r3, [sl]
 800383e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003840:	d015      	beq.n	800386e <_svfiprintf_r+0xfa>
 8003842:	4654      	mov	r4, sl
 8003844:	2000      	movs	r0, #0
 8003846:	f04f 0c0a 	mov.w	ip, #10
 800384a:	9a07      	ldr	r2, [sp, #28]
 800384c:	4621      	mov	r1, r4
 800384e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003852:	3b30      	subs	r3, #48	@ 0x30
 8003854:	2b09      	cmp	r3, #9
 8003856:	d94b      	bls.n	80038f0 <_svfiprintf_r+0x17c>
 8003858:	b1b0      	cbz	r0, 8003888 <_svfiprintf_r+0x114>
 800385a:	9207      	str	r2, [sp, #28]
 800385c:	e014      	b.n	8003888 <_svfiprintf_r+0x114>
 800385e:	eba0 0308 	sub.w	r3, r0, r8
 8003862:	fa09 f303 	lsl.w	r3, r9, r3
 8003866:	4313      	orrs	r3, r2
 8003868:	46a2      	mov	sl, r4
 800386a:	9304      	str	r3, [sp, #16]
 800386c:	e7d2      	b.n	8003814 <_svfiprintf_r+0xa0>
 800386e:	9b03      	ldr	r3, [sp, #12]
 8003870:	1d19      	adds	r1, r3, #4
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	9103      	str	r1, [sp, #12]
 8003876:	2b00      	cmp	r3, #0
 8003878:	bfbb      	ittet	lt
 800387a:	425b      	neglt	r3, r3
 800387c:	f042 0202 	orrlt.w	r2, r2, #2
 8003880:	9307      	strge	r3, [sp, #28]
 8003882:	9307      	strlt	r3, [sp, #28]
 8003884:	bfb8      	it	lt
 8003886:	9204      	strlt	r2, [sp, #16]
 8003888:	7823      	ldrb	r3, [r4, #0]
 800388a:	2b2e      	cmp	r3, #46	@ 0x2e
 800388c:	d10a      	bne.n	80038a4 <_svfiprintf_r+0x130>
 800388e:	7863      	ldrb	r3, [r4, #1]
 8003890:	2b2a      	cmp	r3, #42	@ 0x2a
 8003892:	d132      	bne.n	80038fa <_svfiprintf_r+0x186>
 8003894:	9b03      	ldr	r3, [sp, #12]
 8003896:	3402      	adds	r4, #2
 8003898:	1d1a      	adds	r2, r3, #4
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	9203      	str	r2, [sp, #12]
 800389e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80038a2:	9305      	str	r3, [sp, #20]
 80038a4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800395c <_svfiprintf_r+0x1e8>
 80038a8:	2203      	movs	r2, #3
 80038aa:	4650      	mov	r0, sl
 80038ac:	7821      	ldrb	r1, [r4, #0]
 80038ae:	f000 fbed 	bl	800408c <memchr>
 80038b2:	b138      	cbz	r0, 80038c4 <_svfiprintf_r+0x150>
 80038b4:	2240      	movs	r2, #64	@ 0x40
 80038b6:	9b04      	ldr	r3, [sp, #16]
 80038b8:	eba0 000a 	sub.w	r0, r0, sl
 80038bc:	4082      	lsls	r2, r0
 80038be:	4313      	orrs	r3, r2
 80038c0:	3401      	adds	r4, #1
 80038c2:	9304      	str	r3, [sp, #16]
 80038c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80038c8:	2206      	movs	r2, #6
 80038ca:	4825      	ldr	r0, [pc, #148]	@ (8003960 <_svfiprintf_r+0x1ec>)
 80038cc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80038d0:	f000 fbdc 	bl	800408c <memchr>
 80038d4:	2800      	cmp	r0, #0
 80038d6:	d036      	beq.n	8003946 <_svfiprintf_r+0x1d2>
 80038d8:	4b22      	ldr	r3, [pc, #136]	@ (8003964 <_svfiprintf_r+0x1f0>)
 80038da:	bb1b      	cbnz	r3, 8003924 <_svfiprintf_r+0x1b0>
 80038dc:	9b03      	ldr	r3, [sp, #12]
 80038de:	3307      	adds	r3, #7
 80038e0:	f023 0307 	bic.w	r3, r3, #7
 80038e4:	3308      	adds	r3, #8
 80038e6:	9303      	str	r3, [sp, #12]
 80038e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80038ea:	4433      	add	r3, r6
 80038ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80038ee:	e76a      	b.n	80037c6 <_svfiprintf_r+0x52>
 80038f0:	460c      	mov	r4, r1
 80038f2:	2001      	movs	r0, #1
 80038f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80038f8:	e7a8      	b.n	800384c <_svfiprintf_r+0xd8>
 80038fa:	2300      	movs	r3, #0
 80038fc:	f04f 0c0a 	mov.w	ip, #10
 8003900:	4619      	mov	r1, r3
 8003902:	3401      	adds	r4, #1
 8003904:	9305      	str	r3, [sp, #20]
 8003906:	4620      	mov	r0, r4
 8003908:	f810 2b01 	ldrb.w	r2, [r0], #1
 800390c:	3a30      	subs	r2, #48	@ 0x30
 800390e:	2a09      	cmp	r2, #9
 8003910:	d903      	bls.n	800391a <_svfiprintf_r+0x1a6>
 8003912:	2b00      	cmp	r3, #0
 8003914:	d0c6      	beq.n	80038a4 <_svfiprintf_r+0x130>
 8003916:	9105      	str	r1, [sp, #20]
 8003918:	e7c4      	b.n	80038a4 <_svfiprintf_r+0x130>
 800391a:	4604      	mov	r4, r0
 800391c:	2301      	movs	r3, #1
 800391e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003922:	e7f0      	b.n	8003906 <_svfiprintf_r+0x192>
 8003924:	ab03      	add	r3, sp, #12
 8003926:	9300      	str	r3, [sp, #0]
 8003928:	462a      	mov	r2, r5
 800392a:	4638      	mov	r0, r7
 800392c:	4b0e      	ldr	r3, [pc, #56]	@ (8003968 <_svfiprintf_r+0x1f4>)
 800392e:	a904      	add	r1, sp, #16
 8003930:	f3af 8000 	nop.w
 8003934:	1c42      	adds	r2, r0, #1
 8003936:	4606      	mov	r6, r0
 8003938:	d1d6      	bne.n	80038e8 <_svfiprintf_r+0x174>
 800393a:	89ab      	ldrh	r3, [r5, #12]
 800393c:	065b      	lsls	r3, r3, #25
 800393e:	f53f af2d 	bmi.w	800379c <_svfiprintf_r+0x28>
 8003942:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003944:	e72c      	b.n	80037a0 <_svfiprintf_r+0x2c>
 8003946:	ab03      	add	r3, sp, #12
 8003948:	9300      	str	r3, [sp, #0]
 800394a:	462a      	mov	r2, r5
 800394c:	4638      	mov	r0, r7
 800394e:	4b06      	ldr	r3, [pc, #24]	@ (8003968 <_svfiprintf_r+0x1f4>)
 8003950:	a904      	add	r1, sp, #16
 8003952:	f000 f9bd 	bl	8003cd0 <_printf_i>
 8003956:	e7ed      	b.n	8003934 <_svfiprintf_r+0x1c0>
 8003958:	0800467a 	.word	0x0800467a
 800395c:	08004680 	.word	0x08004680
 8003960:	08004684 	.word	0x08004684
 8003964:	00000000 	.word	0x00000000
 8003968:	080036bd 	.word	0x080036bd

0800396c <__sfputc_r>:
 800396c:	6893      	ldr	r3, [r2, #8]
 800396e:	b410      	push	{r4}
 8003970:	3b01      	subs	r3, #1
 8003972:	2b00      	cmp	r3, #0
 8003974:	6093      	str	r3, [r2, #8]
 8003976:	da07      	bge.n	8003988 <__sfputc_r+0x1c>
 8003978:	6994      	ldr	r4, [r2, #24]
 800397a:	42a3      	cmp	r3, r4
 800397c:	db01      	blt.n	8003982 <__sfputc_r+0x16>
 800397e:	290a      	cmp	r1, #10
 8003980:	d102      	bne.n	8003988 <__sfputc_r+0x1c>
 8003982:	bc10      	pop	{r4}
 8003984:	f000 bac4 	b.w	8003f10 <__swbuf_r>
 8003988:	6813      	ldr	r3, [r2, #0]
 800398a:	1c58      	adds	r0, r3, #1
 800398c:	6010      	str	r0, [r2, #0]
 800398e:	7019      	strb	r1, [r3, #0]
 8003990:	4608      	mov	r0, r1
 8003992:	bc10      	pop	{r4}
 8003994:	4770      	bx	lr

08003996 <__sfputs_r>:
 8003996:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003998:	4606      	mov	r6, r0
 800399a:	460f      	mov	r7, r1
 800399c:	4614      	mov	r4, r2
 800399e:	18d5      	adds	r5, r2, r3
 80039a0:	42ac      	cmp	r4, r5
 80039a2:	d101      	bne.n	80039a8 <__sfputs_r+0x12>
 80039a4:	2000      	movs	r0, #0
 80039a6:	e007      	b.n	80039b8 <__sfputs_r+0x22>
 80039a8:	463a      	mov	r2, r7
 80039aa:	4630      	mov	r0, r6
 80039ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039b0:	f7ff ffdc 	bl	800396c <__sfputc_r>
 80039b4:	1c43      	adds	r3, r0, #1
 80039b6:	d1f3      	bne.n	80039a0 <__sfputs_r+0xa>
 80039b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080039bc <_vfiprintf_r>:
 80039bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039c0:	460d      	mov	r5, r1
 80039c2:	4614      	mov	r4, r2
 80039c4:	4698      	mov	r8, r3
 80039c6:	4606      	mov	r6, r0
 80039c8:	b09d      	sub	sp, #116	@ 0x74
 80039ca:	b118      	cbz	r0, 80039d4 <_vfiprintf_r+0x18>
 80039cc:	6a03      	ldr	r3, [r0, #32]
 80039ce:	b90b      	cbnz	r3, 80039d4 <_vfiprintf_r+0x18>
 80039d0:	f7ff fc42 	bl	8003258 <__sinit>
 80039d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80039d6:	07d9      	lsls	r1, r3, #31
 80039d8:	d405      	bmi.n	80039e6 <_vfiprintf_r+0x2a>
 80039da:	89ab      	ldrh	r3, [r5, #12]
 80039dc:	059a      	lsls	r2, r3, #22
 80039de:	d402      	bmi.n	80039e6 <_vfiprintf_r+0x2a>
 80039e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80039e2:	f7ff fd72 	bl	80034ca <__retarget_lock_acquire_recursive>
 80039e6:	89ab      	ldrh	r3, [r5, #12]
 80039e8:	071b      	lsls	r3, r3, #28
 80039ea:	d501      	bpl.n	80039f0 <_vfiprintf_r+0x34>
 80039ec:	692b      	ldr	r3, [r5, #16]
 80039ee:	b99b      	cbnz	r3, 8003a18 <_vfiprintf_r+0x5c>
 80039f0:	4629      	mov	r1, r5
 80039f2:	4630      	mov	r0, r6
 80039f4:	f000 faca 	bl	8003f8c <__swsetup_r>
 80039f8:	b170      	cbz	r0, 8003a18 <_vfiprintf_r+0x5c>
 80039fa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80039fc:	07dc      	lsls	r4, r3, #31
 80039fe:	d504      	bpl.n	8003a0a <_vfiprintf_r+0x4e>
 8003a00:	f04f 30ff 	mov.w	r0, #4294967295
 8003a04:	b01d      	add	sp, #116	@ 0x74
 8003a06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a0a:	89ab      	ldrh	r3, [r5, #12]
 8003a0c:	0598      	lsls	r0, r3, #22
 8003a0e:	d4f7      	bmi.n	8003a00 <_vfiprintf_r+0x44>
 8003a10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003a12:	f7ff fd5b 	bl	80034cc <__retarget_lock_release_recursive>
 8003a16:	e7f3      	b.n	8003a00 <_vfiprintf_r+0x44>
 8003a18:	2300      	movs	r3, #0
 8003a1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8003a1c:	2320      	movs	r3, #32
 8003a1e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003a22:	2330      	movs	r3, #48	@ 0x30
 8003a24:	f04f 0901 	mov.w	r9, #1
 8003a28:	f8cd 800c 	str.w	r8, [sp, #12]
 8003a2c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8003bd8 <_vfiprintf_r+0x21c>
 8003a30:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003a34:	4623      	mov	r3, r4
 8003a36:	469a      	mov	sl, r3
 8003a38:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003a3c:	b10a      	cbz	r2, 8003a42 <_vfiprintf_r+0x86>
 8003a3e:	2a25      	cmp	r2, #37	@ 0x25
 8003a40:	d1f9      	bne.n	8003a36 <_vfiprintf_r+0x7a>
 8003a42:	ebba 0b04 	subs.w	fp, sl, r4
 8003a46:	d00b      	beq.n	8003a60 <_vfiprintf_r+0xa4>
 8003a48:	465b      	mov	r3, fp
 8003a4a:	4622      	mov	r2, r4
 8003a4c:	4629      	mov	r1, r5
 8003a4e:	4630      	mov	r0, r6
 8003a50:	f7ff ffa1 	bl	8003996 <__sfputs_r>
 8003a54:	3001      	adds	r0, #1
 8003a56:	f000 80a7 	beq.w	8003ba8 <_vfiprintf_r+0x1ec>
 8003a5a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003a5c:	445a      	add	r2, fp
 8003a5e:	9209      	str	r2, [sp, #36]	@ 0x24
 8003a60:	f89a 3000 	ldrb.w	r3, [sl]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	f000 809f 	beq.w	8003ba8 <_vfiprintf_r+0x1ec>
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8003a70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003a74:	f10a 0a01 	add.w	sl, sl, #1
 8003a78:	9304      	str	r3, [sp, #16]
 8003a7a:	9307      	str	r3, [sp, #28]
 8003a7c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003a80:	931a      	str	r3, [sp, #104]	@ 0x68
 8003a82:	4654      	mov	r4, sl
 8003a84:	2205      	movs	r2, #5
 8003a86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a8a:	4853      	ldr	r0, [pc, #332]	@ (8003bd8 <_vfiprintf_r+0x21c>)
 8003a8c:	f000 fafe 	bl	800408c <memchr>
 8003a90:	9a04      	ldr	r2, [sp, #16]
 8003a92:	b9d8      	cbnz	r0, 8003acc <_vfiprintf_r+0x110>
 8003a94:	06d1      	lsls	r1, r2, #27
 8003a96:	bf44      	itt	mi
 8003a98:	2320      	movmi	r3, #32
 8003a9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003a9e:	0713      	lsls	r3, r2, #28
 8003aa0:	bf44      	itt	mi
 8003aa2:	232b      	movmi	r3, #43	@ 0x2b
 8003aa4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003aa8:	f89a 3000 	ldrb.w	r3, [sl]
 8003aac:	2b2a      	cmp	r3, #42	@ 0x2a
 8003aae:	d015      	beq.n	8003adc <_vfiprintf_r+0x120>
 8003ab0:	4654      	mov	r4, sl
 8003ab2:	2000      	movs	r0, #0
 8003ab4:	f04f 0c0a 	mov.w	ip, #10
 8003ab8:	9a07      	ldr	r2, [sp, #28]
 8003aba:	4621      	mov	r1, r4
 8003abc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003ac0:	3b30      	subs	r3, #48	@ 0x30
 8003ac2:	2b09      	cmp	r3, #9
 8003ac4:	d94b      	bls.n	8003b5e <_vfiprintf_r+0x1a2>
 8003ac6:	b1b0      	cbz	r0, 8003af6 <_vfiprintf_r+0x13a>
 8003ac8:	9207      	str	r2, [sp, #28]
 8003aca:	e014      	b.n	8003af6 <_vfiprintf_r+0x13a>
 8003acc:	eba0 0308 	sub.w	r3, r0, r8
 8003ad0:	fa09 f303 	lsl.w	r3, r9, r3
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	46a2      	mov	sl, r4
 8003ad8:	9304      	str	r3, [sp, #16]
 8003ada:	e7d2      	b.n	8003a82 <_vfiprintf_r+0xc6>
 8003adc:	9b03      	ldr	r3, [sp, #12]
 8003ade:	1d19      	adds	r1, r3, #4
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	9103      	str	r1, [sp, #12]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	bfbb      	ittet	lt
 8003ae8:	425b      	neglt	r3, r3
 8003aea:	f042 0202 	orrlt.w	r2, r2, #2
 8003aee:	9307      	strge	r3, [sp, #28]
 8003af0:	9307      	strlt	r3, [sp, #28]
 8003af2:	bfb8      	it	lt
 8003af4:	9204      	strlt	r2, [sp, #16]
 8003af6:	7823      	ldrb	r3, [r4, #0]
 8003af8:	2b2e      	cmp	r3, #46	@ 0x2e
 8003afa:	d10a      	bne.n	8003b12 <_vfiprintf_r+0x156>
 8003afc:	7863      	ldrb	r3, [r4, #1]
 8003afe:	2b2a      	cmp	r3, #42	@ 0x2a
 8003b00:	d132      	bne.n	8003b68 <_vfiprintf_r+0x1ac>
 8003b02:	9b03      	ldr	r3, [sp, #12]
 8003b04:	3402      	adds	r4, #2
 8003b06:	1d1a      	adds	r2, r3, #4
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	9203      	str	r2, [sp, #12]
 8003b0c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003b10:	9305      	str	r3, [sp, #20]
 8003b12:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8003bdc <_vfiprintf_r+0x220>
 8003b16:	2203      	movs	r2, #3
 8003b18:	4650      	mov	r0, sl
 8003b1a:	7821      	ldrb	r1, [r4, #0]
 8003b1c:	f000 fab6 	bl	800408c <memchr>
 8003b20:	b138      	cbz	r0, 8003b32 <_vfiprintf_r+0x176>
 8003b22:	2240      	movs	r2, #64	@ 0x40
 8003b24:	9b04      	ldr	r3, [sp, #16]
 8003b26:	eba0 000a 	sub.w	r0, r0, sl
 8003b2a:	4082      	lsls	r2, r0
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	3401      	adds	r4, #1
 8003b30:	9304      	str	r3, [sp, #16]
 8003b32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b36:	2206      	movs	r2, #6
 8003b38:	4829      	ldr	r0, [pc, #164]	@ (8003be0 <_vfiprintf_r+0x224>)
 8003b3a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003b3e:	f000 faa5 	bl	800408c <memchr>
 8003b42:	2800      	cmp	r0, #0
 8003b44:	d03f      	beq.n	8003bc6 <_vfiprintf_r+0x20a>
 8003b46:	4b27      	ldr	r3, [pc, #156]	@ (8003be4 <_vfiprintf_r+0x228>)
 8003b48:	bb1b      	cbnz	r3, 8003b92 <_vfiprintf_r+0x1d6>
 8003b4a:	9b03      	ldr	r3, [sp, #12]
 8003b4c:	3307      	adds	r3, #7
 8003b4e:	f023 0307 	bic.w	r3, r3, #7
 8003b52:	3308      	adds	r3, #8
 8003b54:	9303      	str	r3, [sp, #12]
 8003b56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003b58:	443b      	add	r3, r7
 8003b5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8003b5c:	e76a      	b.n	8003a34 <_vfiprintf_r+0x78>
 8003b5e:	460c      	mov	r4, r1
 8003b60:	2001      	movs	r0, #1
 8003b62:	fb0c 3202 	mla	r2, ip, r2, r3
 8003b66:	e7a8      	b.n	8003aba <_vfiprintf_r+0xfe>
 8003b68:	2300      	movs	r3, #0
 8003b6a:	f04f 0c0a 	mov.w	ip, #10
 8003b6e:	4619      	mov	r1, r3
 8003b70:	3401      	adds	r4, #1
 8003b72:	9305      	str	r3, [sp, #20]
 8003b74:	4620      	mov	r0, r4
 8003b76:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b7a:	3a30      	subs	r2, #48	@ 0x30
 8003b7c:	2a09      	cmp	r2, #9
 8003b7e:	d903      	bls.n	8003b88 <_vfiprintf_r+0x1cc>
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d0c6      	beq.n	8003b12 <_vfiprintf_r+0x156>
 8003b84:	9105      	str	r1, [sp, #20]
 8003b86:	e7c4      	b.n	8003b12 <_vfiprintf_r+0x156>
 8003b88:	4604      	mov	r4, r0
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003b90:	e7f0      	b.n	8003b74 <_vfiprintf_r+0x1b8>
 8003b92:	ab03      	add	r3, sp, #12
 8003b94:	9300      	str	r3, [sp, #0]
 8003b96:	462a      	mov	r2, r5
 8003b98:	4630      	mov	r0, r6
 8003b9a:	4b13      	ldr	r3, [pc, #76]	@ (8003be8 <_vfiprintf_r+0x22c>)
 8003b9c:	a904      	add	r1, sp, #16
 8003b9e:	f3af 8000 	nop.w
 8003ba2:	4607      	mov	r7, r0
 8003ba4:	1c78      	adds	r0, r7, #1
 8003ba6:	d1d6      	bne.n	8003b56 <_vfiprintf_r+0x19a>
 8003ba8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003baa:	07d9      	lsls	r1, r3, #31
 8003bac:	d405      	bmi.n	8003bba <_vfiprintf_r+0x1fe>
 8003bae:	89ab      	ldrh	r3, [r5, #12]
 8003bb0:	059a      	lsls	r2, r3, #22
 8003bb2:	d402      	bmi.n	8003bba <_vfiprintf_r+0x1fe>
 8003bb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003bb6:	f7ff fc89 	bl	80034cc <__retarget_lock_release_recursive>
 8003bba:	89ab      	ldrh	r3, [r5, #12]
 8003bbc:	065b      	lsls	r3, r3, #25
 8003bbe:	f53f af1f 	bmi.w	8003a00 <_vfiprintf_r+0x44>
 8003bc2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003bc4:	e71e      	b.n	8003a04 <_vfiprintf_r+0x48>
 8003bc6:	ab03      	add	r3, sp, #12
 8003bc8:	9300      	str	r3, [sp, #0]
 8003bca:	462a      	mov	r2, r5
 8003bcc:	4630      	mov	r0, r6
 8003bce:	4b06      	ldr	r3, [pc, #24]	@ (8003be8 <_vfiprintf_r+0x22c>)
 8003bd0:	a904      	add	r1, sp, #16
 8003bd2:	f000 f87d 	bl	8003cd0 <_printf_i>
 8003bd6:	e7e4      	b.n	8003ba2 <_vfiprintf_r+0x1e6>
 8003bd8:	0800467a 	.word	0x0800467a
 8003bdc:	08004680 	.word	0x08004680
 8003be0:	08004684 	.word	0x08004684
 8003be4:	00000000 	.word	0x00000000
 8003be8:	08003997 	.word	0x08003997

08003bec <_printf_common>:
 8003bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bf0:	4616      	mov	r6, r2
 8003bf2:	4698      	mov	r8, r3
 8003bf4:	688a      	ldr	r2, [r1, #8]
 8003bf6:	690b      	ldr	r3, [r1, #16]
 8003bf8:	4607      	mov	r7, r0
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	bfb8      	it	lt
 8003bfe:	4613      	movlt	r3, r2
 8003c00:	6033      	str	r3, [r6, #0]
 8003c02:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003c06:	460c      	mov	r4, r1
 8003c08:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003c0c:	b10a      	cbz	r2, 8003c12 <_printf_common+0x26>
 8003c0e:	3301      	adds	r3, #1
 8003c10:	6033      	str	r3, [r6, #0]
 8003c12:	6823      	ldr	r3, [r4, #0]
 8003c14:	0699      	lsls	r1, r3, #26
 8003c16:	bf42      	ittt	mi
 8003c18:	6833      	ldrmi	r3, [r6, #0]
 8003c1a:	3302      	addmi	r3, #2
 8003c1c:	6033      	strmi	r3, [r6, #0]
 8003c1e:	6825      	ldr	r5, [r4, #0]
 8003c20:	f015 0506 	ands.w	r5, r5, #6
 8003c24:	d106      	bne.n	8003c34 <_printf_common+0x48>
 8003c26:	f104 0a19 	add.w	sl, r4, #25
 8003c2a:	68e3      	ldr	r3, [r4, #12]
 8003c2c:	6832      	ldr	r2, [r6, #0]
 8003c2e:	1a9b      	subs	r3, r3, r2
 8003c30:	42ab      	cmp	r3, r5
 8003c32:	dc2b      	bgt.n	8003c8c <_printf_common+0xa0>
 8003c34:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003c38:	6822      	ldr	r2, [r4, #0]
 8003c3a:	3b00      	subs	r3, #0
 8003c3c:	bf18      	it	ne
 8003c3e:	2301      	movne	r3, #1
 8003c40:	0692      	lsls	r2, r2, #26
 8003c42:	d430      	bmi.n	8003ca6 <_printf_common+0xba>
 8003c44:	4641      	mov	r1, r8
 8003c46:	4638      	mov	r0, r7
 8003c48:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003c4c:	47c8      	blx	r9
 8003c4e:	3001      	adds	r0, #1
 8003c50:	d023      	beq.n	8003c9a <_printf_common+0xae>
 8003c52:	6823      	ldr	r3, [r4, #0]
 8003c54:	6922      	ldr	r2, [r4, #16]
 8003c56:	f003 0306 	and.w	r3, r3, #6
 8003c5a:	2b04      	cmp	r3, #4
 8003c5c:	bf14      	ite	ne
 8003c5e:	2500      	movne	r5, #0
 8003c60:	6833      	ldreq	r3, [r6, #0]
 8003c62:	f04f 0600 	mov.w	r6, #0
 8003c66:	bf08      	it	eq
 8003c68:	68e5      	ldreq	r5, [r4, #12]
 8003c6a:	f104 041a 	add.w	r4, r4, #26
 8003c6e:	bf08      	it	eq
 8003c70:	1aed      	subeq	r5, r5, r3
 8003c72:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003c76:	bf08      	it	eq
 8003c78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	bfc4      	itt	gt
 8003c80:	1a9b      	subgt	r3, r3, r2
 8003c82:	18ed      	addgt	r5, r5, r3
 8003c84:	42b5      	cmp	r5, r6
 8003c86:	d11a      	bne.n	8003cbe <_printf_common+0xd2>
 8003c88:	2000      	movs	r0, #0
 8003c8a:	e008      	b.n	8003c9e <_printf_common+0xb2>
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	4652      	mov	r2, sl
 8003c90:	4641      	mov	r1, r8
 8003c92:	4638      	mov	r0, r7
 8003c94:	47c8      	blx	r9
 8003c96:	3001      	adds	r0, #1
 8003c98:	d103      	bne.n	8003ca2 <_printf_common+0xb6>
 8003c9a:	f04f 30ff 	mov.w	r0, #4294967295
 8003c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ca2:	3501      	adds	r5, #1
 8003ca4:	e7c1      	b.n	8003c2a <_printf_common+0x3e>
 8003ca6:	2030      	movs	r0, #48	@ 0x30
 8003ca8:	18e1      	adds	r1, r4, r3
 8003caa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003cae:	1c5a      	adds	r2, r3, #1
 8003cb0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003cb4:	4422      	add	r2, r4
 8003cb6:	3302      	adds	r3, #2
 8003cb8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003cbc:	e7c2      	b.n	8003c44 <_printf_common+0x58>
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	4622      	mov	r2, r4
 8003cc2:	4641      	mov	r1, r8
 8003cc4:	4638      	mov	r0, r7
 8003cc6:	47c8      	blx	r9
 8003cc8:	3001      	adds	r0, #1
 8003cca:	d0e6      	beq.n	8003c9a <_printf_common+0xae>
 8003ccc:	3601      	adds	r6, #1
 8003cce:	e7d9      	b.n	8003c84 <_printf_common+0x98>

08003cd0 <_printf_i>:
 8003cd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003cd4:	7e0f      	ldrb	r7, [r1, #24]
 8003cd6:	4691      	mov	r9, r2
 8003cd8:	2f78      	cmp	r7, #120	@ 0x78
 8003cda:	4680      	mov	r8, r0
 8003cdc:	460c      	mov	r4, r1
 8003cde:	469a      	mov	sl, r3
 8003ce0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003ce2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003ce6:	d807      	bhi.n	8003cf8 <_printf_i+0x28>
 8003ce8:	2f62      	cmp	r7, #98	@ 0x62
 8003cea:	d80a      	bhi.n	8003d02 <_printf_i+0x32>
 8003cec:	2f00      	cmp	r7, #0
 8003cee:	f000 80d3 	beq.w	8003e98 <_printf_i+0x1c8>
 8003cf2:	2f58      	cmp	r7, #88	@ 0x58
 8003cf4:	f000 80ba 	beq.w	8003e6c <_printf_i+0x19c>
 8003cf8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003cfc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003d00:	e03a      	b.n	8003d78 <_printf_i+0xa8>
 8003d02:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003d06:	2b15      	cmp	r3, #21
 8003d08:	d8f6      	bhi.n	8003cf8 <_printf_i+0x28>
 8003d0a:	a101      	add	r1, pc, #4	@ (adr r1, 8003d10 <_printf_i+0x40>)
 8003d0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003d10:	08003d69 	.word	0x08003d69
 8003d14:	08003d7d 	.word	0x08003d7d
 8003d18:	08003cf9 	.word	0x08003cf9
 8003d1c:	08003cf9 	.word	0x08003cf9
 8003d20:	08003cf9 	.word	0x08003cf9
 8003d24:	08003cf9 	.word	0x08003cf9
 8003d28:	08003d7d 	.word	0x08003d7d
 8003d2c:	08003cf9 	.word	0x08003cf9
 8003d30:	08003cf9 	.word	0x08003cf9
 8003d34:	08003cf9 	.word	0x08003cf9
 8003d38:	08003cf9 	.word	0x08003cf9
 8003d3c:	08003e7f 	.word	0x08003e7f
 8003d40:	08003da7 	.word	0x08003da7
 8003d44:	08003e39 	.word	0x08003e39
 8003d48:	08003cf9 	.word	0x08003cf9
 8003d4c:	08003cf9 	.word	0x08003cf9
 8003d50:	08003ea1 	.word	0x08003ea1
 8003d54:	08003cf9 	.word	0x08003cf9
 8003d58:	08003da7 	.word	0x08003da7
 8003d5c:	08003cf9 	.word	0x08003cf9
 8003d60:	08003cf9 	.word	0x08003cf9
 8003d64:	08003e41 	.word	0x08003e41
 8003d68:	6833      	ldr	r3, [r6, #0]
 8003d6a:	1d1a      	adds	r2, r3, #4
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	6032      	str	r2, [r6, #0]
 8003d70:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003d74:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e09e      	b.n	8003eba <_printf_i+0x1ea>
 8003d7c:	6833      	ldr	r3, [r6, #0]
 8003d7e:	6820      	ldr	r0, [r4, #0]
 8003d80:	1d19      	adds	r1, r3, #4
 8003d82:	6031      	str	r1, [r6, #0]
 8003d84:	0606      	lsls	r6, r0, #24
 8003d86:	d501      	bpl.n	8003d8c <_printf_i+0xbc>
 8003d88:	681d      	ldr	r5, [r3, #0]
 8003d8a:	e003      	b.n	8003d94 <_printf_i+0xc4>
 8003d8c:	0645      	lsls	r5, r0, #25
 8003d8e:	d5fb      	bpl.n	8003d88 <_printf_i+0xb8>
 8003d90:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003d94:	2d00      	cmp	r5, #0
 8003d96:	da03      	bge.n	8003da0 <_printf_i+0xd0>
 8003d98:	232d      	movs	r3, #45	@ 0x2d
 8003d9a:	426d      	negs	r5, r5
 8003d9c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003da0:	230a      	movs	r3, #10
 8003da2:	4859      	ldr	r0, [pc, #356]	@ (8003f08 <_printf_i+0x238>)
 8003da4:	e011      	b.n	8003dca <_printf_i+0xfa>
 8003da6:	6821      	ldr	r1, [r4, #0]
 8003da8:	6833      	ldr	r3, [r6, #0]
 8003daa:	0608      	lsls	r0, r1, #24
 8003dac:	f853 5b04 	ldr.w	r5, [r3], #4
 8003db0:	d402      	bmi.n	8003db8 <_printf_i+0xe8>
 8003db2:	0649      	lsls	r1, r1, #25
 8003db4:	bf48      	it	mi
 8003db6:	b2ad      	uxthmi	r5, r5
 8003db8:	2f6f      	cmp	r7, #111	@ 0x6f
 8003dba:	6033      	str	r3, [r6, #0]
 8003dbc:	bf14      	ite	ne
 8003dbe:	230a      	movne	r3, #10
 8003dc0:	2308      	moveq	r3, #8
 8003dc2:	4851      	ldr	r0, [pc, #324]	@ (8003f08 <_printf_i+0x238>)
 8003dc4:	2100      	movs	r1, #0
 8003dc6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003dca:	6866      	ldr	r6, [r4, #4]
 8003dcc:	2e00      	cmp	r6, #0
 8003dce:	bfa8      	it	ge
 8003dd0:	6821      	ldrge	r1, [r4, #0]
 8003dd2:	60a6      	str	r6, [r4, #8]
 8003dd4:	bfa4      	itt	ge
 8003dd6:	f021 0104 	bicge.w	r1, r1, #4
 8003dda:	6021      	strge	r1, [r4, #0]
 8003ddc:	b90d      	cbnz	r5, 8003de2 <_printf_i+0x112>
 8003dde:	2e00      	cmp	r6, #0
 8003de0:	d04b      	beq.n	8003e7a <_printf_i+0x1aa>
 8003de2:	4616      	mov	r6, r2
 8003de4:	fbb5 f1f3 	udiv	r1, r5, r3
 8003de8:	fb03 5711 	mls	r7, r3, r1, r5
 8003dec:	5dc7      	ldrb	r7, [r0, r7]
 8003dee:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003df2:	462f      	mov	r7, r5
 8003df4:	42bb      	cmp	r3, r7
 8003df6:	460d      	mov	r5, r1
 8003df8:	d9f4      	bls.n	8003de4 <_printf_i+0x114>
 8003dfa:	2b08      	cmp	r3, #8
 8003dfc:	d10b      	bne.n	8003e16 <_printf_i+0x146>
 8003dfe:	6823      	ldr	r3, [r4, #0]
 8003e00:	07df      	lsls	r7, r3, #31
 8003e02:	d508      	bpl.n	8003e16 <_printf_i+0x146>
 8003e04:	6923      	ldr	r3, [r4, #16]
 8003e06:	6861      	ldr	r1, [r4, #4]
 8003e08:	4299      	cmp	r1, r3
 8003e0a:	bfde      	ittt	le
 8003e0c:	2330      	movle	r3, #48	@ 0x30
 8003e0e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003e12:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003e16:	1b92      	subs	r2, r2, r6
 8003e18:	6122      	str	r2, [r4, #16]
 8003e1a:	464b      	mov	r3, r9
 8003e1c:	4621      	mov	r1, r4
 8003e1e:	4640      	mov	r0, r8
 8003e20:	f8cd a000 	str.w	sl, [sp]
 8003e24:	aa03      	add	r2, sp, #12
 8003e26:	f7ff fee1 	bl	8003bec <_printf_common>
 8003e2a:	3001      	adds	r0, #1
 8003e2c:	d14a      	bne.n	8003ec4 <_printf_i+0x1f4>
 8003e2e:	f04f 30ff 	mov.w	r0, #4294967295
 8003e32:	b004      	add	sp, #16
 8003e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e38:	6823      	ldr	r3, [r4, #0]
 8003e3a:	f043 0320 	orr.w	r3, r3, #32
 8003e3e:	6023      	str	r3, [r4, #0]
 8003e40:	2778      	movs	r7, #120	@ 0x78
 8003e42:	4832      	ldr	r0, [pc, #200]	@ (8003f0c <_printf_i+0x23c>)
 8003e44:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003e48:	6823      	ldr	r3, [r4, #0]
 8003e4a:	6831      	ldr	r1, [r6, #0]
 8003e4c:	061f      	lsls	r7, r3, #24
 8003e4e:	f851 5b04 	ldr.w	r5, [r1], #4
 8003e52:	d402      	bmi.n	8003e5a <_printf_i+0x18a>
 8003e54:	065f      	lsls	r7, r3, #25
 8003e56:	bf48      	it	mi
 8003e58:	b2ad      	uxthmi	r5, r5
 8003e5a:	6031      	str	r1, [r6, #0]
 8003e5c:	07d9      	lsls	r1, r3, #31
 8003e5e:	bf44      	itt	mi
 8003e60:	f043 0320 	orrmi.w	r3, r3, #32
 8003e64:	6023      	strmi	r3, [r4, #0]
 8003e66:	b11d      	cbz	r5, 8003e70 <_printf_i+0x1a0>
 8003e68:	2310      	movs	r3, #16
 8003e6a:	e7ab      	b.n	8003dc4 <_printf_i+0xf4>
 8003e6c:	4826      	ldr	r0, [pc, #152]	@ (8003f08 <_printf_i+0x238>)
 8003e6e:	e7e9      	b.n	8003e44 <_printf_i+0x174>
 8003e70:	6823      	ldr	r3, [r4, #0]
 8003e72:	f023 0320 	bic.w	r3, r3, #32
 8003e76:	6023      	str	r3, [r4, #0]
 8003e78:	e7f6      	b.n	8003e68 <_printf_i+0x198>
 8003e7a:	4616      	mov	r6, r2
 8003e7c:	e7bd      	b.n	8003dfa <_printf_i+0x12a>
 8003e7e:	6833      	ldr	r3, [r6, #0]
 8003e80:	6825      	ldr	r5, [r4, #0]
 8003e82:	1d18      	adds	r0, r3, #4
 8003e84:	6961      	ldr	r1, [r4, #20]
 8003e86:	6030      	str	r0, [r6, #0]
 8003e88:	062e      	lsls	r6, r5, #24
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	d501      	bpl.n	8003e92 <_printf_i+0x1c2>
 8003e8e:	6019      	str	r1, [r3, #0]
 8003e90:	e002      	b.n	8003e98 <_printf_i+0x1c8>
 8003e92:	0668      	lsls	r0, r5, #25
 8003e94:	d5fb      	bpl.n	8003e8e <_printf_i+0x1be>
 8003e96:	8019      	strh	r1, [r3, #0]
 8003e98:	2300      	movs	r3, #0
 8003e9a:	4616      	mov	r6, r2
 8003e9c:	6123      	str	r3, [r4, #16]
 8003e9e:	e7bc      	b.n	8003e1a <_printf_i+0x14a>
 8003ea0:	6833      	ldr	r3, [r6, #0]
 8003ea2:	2100      	movs	r1, #0
 8003ea4:	1d1a      	adds	r2, r3, #4
 8003ea6:	6032      	str	r2, [r6, #0]
 8003ea8:	681e      	ldr	r6, [r3, #0]
 8003eaa:	6862      	ldr	r2, [r4, #4]
 8003eac:	4630      	mov	r0, r6
 8003eae:	f000 f8ed 	bl	800408c <memchr>
 8003eb2:	b108      	cbz	r0, 8003eb8 <_printf_i+0x1e8>
 8003eb4:	1b80      	subs	r0, r0, r6
 8003eb6:	6060      	str	r0, [r4, #4]
 8003eb8:	6863      	ldr	r3, [r4, #4]
 8003eba:	6123      	str	r3, [r4, #16]
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003ec2:	e7aa      	b.n	8003e1a <_printf_i+0x14a>
 8003ec4:	4632      	mov	r2, r6
 8003ec6:	4649      	mov	r1, r9
 8003ec8:	4640      	mov	r0, r8
 8003eca:	6923      	ldr	r3, [r4, #16]
 8003ecc:	47d0      	blx	sl
 8003ece:	3001      	adds	r0, #1
 8003ed0:	d0ad      	beq.n	8003e2e <_printf_i+0x15e>
 8003ed2:	6823      	ldr	r3, [r4, #0]
 8003ed4:	079b      	lsls	r3, r3, #30
 8003ed6:	d413      	bmi.n	8003f00 <_printf_i+0x230>
 8003ed8:	68e0      	ldr	r0, [r4, #12]
 8003eda:	9b03      	ldr	r3, [sp, #12]
 8003edc:	4298      	cmp	r0, r3
 8003ede:	bfb8      	it	lt
 8003ee0:	4618      	movlt	r0, r3
 8003ee2:	e7a6      	b.n	8003e32 <_printf_i+0x162>
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	4632      	mov	r2, r6
 8003ee8:	4649      	mov	r1, r9
 8003eea:	4640      	mov	r0, r8
 8003eec:	47d0      	blx	sl
 8003eee:	3001      	adds	r0, #1
 8003ef0:	d09d      	beq.n	8003e2e <_printf_i+0x15e>
 8003ef2:	3501      	adds	r5, #1
 8003ef4:	68e3      	ldr	r3, [r4, #12]
 8003ef6:	9903      	ldr	r1, [sp, #12]
 8003ef8:	1a5b      	subs	r3, r3, r1
 8003efa:	42ab      	cmp	r3, r5
 8003efc:	dcf2      	bgt.n	8003ee4 <_printf_i+0x214>
 8003efe:	e7eb      	b.n	8003ed8 <_printf_i+0x208>
 8003f00:	2500      	movs	r5, #0
 8003f02:	f104 0619 	add.w	r6, r4, #25
 8003f06:	e7f5      	b.n	8003ef4 <_printf_i+0x224>
 8003f08:	0800468b 	.word	0x0800468b
 8003f0c:	0800469c 	.word	0x0800469c

08003f10 <__swbuf_r>:
 8003f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f12:	460e      	mov	r6, r1
 8003f14:	4614      	mov	r4, r2
 8003f16:	4605      	mov	r5, r0
 8003f18:	b118      	cbz	r0, 8003f22 <__swbuf_r+0x12>
 8003f1a:	6a03      	ldr	r3, [r0, #32]
 8003f1c:	b90b      	cbnz	r3, 8003f22 <__swbuf_r+0x12>
 8003f1e:	f7ff f99b 	bl	8003258 <__sinit>
 8003f22:	69a3      	ldr	r3, [r4, #24]
 8003f24:	60a3      	str	r3, [r4, #8]
 8003f26:	89a3      	ldrh	r3, [r4, #12]
 8003f28:	071a      	lsls	r2, r3, #28
 8003f2a:	d501      	bpl.n	8003f30 <__swbuf_r+0x20>
 8003f2c:	6923      	ldr	r3, [r4, #16]
 8003f2e:	b943      	cbnz	r3, 8003f42 <__swbuf_r+0x32>
 8003f30:	4621      	mov	r1, r4
 8003f32:	4628      	mov	r0, r5
 8003f34:	f000 f82a 	bl	8003f8c <__swsetup_r>
 8003f38:	b118      	cbz	r0, 8003f42 <__swbuf_r+0x32>
 8003f3a:	f04f 37ff 	mov.w	r7, #4294967295
 8003f3e:	4638      	mov	r0, r7
 8003f40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f42:	6823      	ldr	r3, [r4, #0]
 8003f44:	6922      	ldr	r2, [r4, #16]
 8003f46:	b2f6      	uxtb	r6, r6
 8003f48:	1a98      	subs	r0, r3, r2
 8003f4a:	6963      	ldr	r3, [r4, #20]
 8003f4c:	4637      	mov	r7, r6
 8003f4e:	4283      	cmp	r3, r0
 8003f50:	dc05      	bgt.n	8003f5e <__swbuf_r+0x4e>
 8003f52:	4621      	mov	r1, r4
 8003f54:	4628      	mov	r0, r5
 8003f56:	f7ff f8b7 	bl	80030c8 <_fflush_r>
 8003f5a:	2800      	cmp	r0, #0
 8003f5c:	d1ed      	bne.n	8003f3a <__swbuf_r+0x2a>
 8003f5e:	68a3      	ldr	r3, [r4, #8]
 8003f60:	3b01      	subs	r3, #1
 8003f62:	60a3      	str	r3, [r4, #8]
 8003f64:	6823      	ldr	r3, [r4, #0]
 8003f66:	1c5a      	adds	r2, r3, #1
 8003f68:	6022      	str	r2, [r4, #0]
 8003f6a:	701e      	strb	r6, [r3, #0]
 8003f6c:	6962      	ldr	r2, [r4, #20]
 8003f6e:	1c43      	adds	r3, r0, #1
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d004      	beq.n	8003f7e <__swbuf_r+0x6e>
 8003f74:	89a3      	ldrh	r3, [r4, #12]
 8003f76:	07db      	lsls	r3, r3, #31
 8003f78:	d5e1      	bpl.n	8003f3e <__swbuf_r+0x2e>
 8003f7a:	2e0a      	cmp	r6, #10
 8003f7c:	d1df      	bne.n	8003f3e <__swbuf_r+0x2e>
 8003f7e:	4621      	mov	r1, r4
 8003f80:	4628      	mov	r0, r5
 8003f82:	f7ff f8a1 	bl	80030c8 <_fflush_r>
 8003f86:	2800      	cmp	r0, #0
 8003f88:	d0d9      	beq.n	8003f3e <__swbuf_r+0x2e>
 8003f8a:	e7d6      	b.n	8003f3a <__swbuf_r+0x2a>

08003f8c <__swsetup_r>:
 8003f8c:	b538      	push	{r3, r4, r5, lr}
 8003f8e:	4b29      	ldr	r3, [pc, #164]	@ (8004034 <__swsetup_r+0xa8>)
 8003f90:	4605      	mov	r5, r0
 8003f92:	6818      	ldr	r0, [r3, #0]
 8003f94:	460c      	mov	r4, r1
 8003f96:	b118      	cbz	r0, 8003fa0 <__swsetup_r+0x14>
 8003f98:	6a03      	ldr	r3, [r0, #32]
 8003f9a:	b90b      	cbnz	r3, 8003fa0 <__swsetup_r+0x14>
 8003f9c:	f7ff f95c 	bl	8003258 <__sinit>
 8003fa0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003fa4:	0719      	lsls	r1, r3, #28
 8003fa6:	d422      	bmi.n	8003fee <__swsetup_r+0x62>
 8003fa8:	06da      	lsls	r2, r3, #27
 8003faa:	d407      	bmi.n	8003fbc <__swsetup_r+0x30>
 8003fac:	2209      	movs	r2, #9
 8003fae:	602a      	str	r2, [r5, #0]
 8003fb0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8003fb8:	81a3      	strh	r3, [r4, #12]
 8003fba:	e033      	b.n	8004024 <__swsetup_r+0x98>
 8003fbc:	0758      	lsls	r0, r3, #29
 8003fbe:	d512      	bpl.n	8003fe6 <__swsetup_r+0x5a>
 8003fc0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003fc2:	b141      	cbz	r1, 8003fd6 <__swsetup_r+0x4a>
 8003fc4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003fc8:	4299      	cmp	r1, r3
 8003fca:	d002      	beq.n	8003fd2 <__swsetup_r+0x46>
 8003fcc:	4628      	mov	r0, r5
 8003fce:	f7ff fa7f 	bl	80034d0 <_free_r>
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	6363      	str	r3, [r4, #52]	@ 0x34
 8003fd6:	89a3      	ldrh	r3, [r4, #12]
 8003fd8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003fdc:	81a3      	strh	r3, [r4, #12]
 8003fde:	2300      	movs	r3, #0
 8003fe0:	6063      	str	r3, [r4, #4]
 8003fe2:	6923      	ldr	r3, [r4, #16]
 8003fe4:	6023      	str	r3, [r4, #0]
 8003fe6:	89a3      	ldrh	r3, [r4, #12]
 8003fe8:	f043 0308 	orr.w	r3, r3, #8
 8003fec:	81a3      	strh	r3, [r4, #12]
 8003fee:	6923      	ldr	r3, [r4, #16]
 8003ff0:	b94b      	cbnz	r3, 8004006 <__swsetup_r+0x7a>
 8003ff2:	89a3      	ldrh	r3, [r4, #12]
 8003ff4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003ff8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ffc:	d003      	beq.n	8004006 <__swsetup_r+0x7a>
 8003ffe:	4621      	mov	r1, r4
 8004000:	4628      	mov	r0, r5
 8004002:	f000 f8b2 	bl	800416a <__smakebuf_r>
 8004006:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800400a:	f013 0201 	ands.w	r2, r3, #1
 800400e:	d00a      	beq.n	8004026 <__swsetup_r+0x9a>
 8004010:	2200      	movs	r2, #0
 8004012:	60a2      	str	r2, [r4, #8]
 8004014:	6962      	ldr	r2, [r4, #20]
 8004016:	4252      	negs	r2, r2
 8004018:	61a2      	str	r2, [r4, #24]
 800401a:	6922      	ldr	r2, [r4, #16]
 800401c:	b942      	cbnz	r2, 8004030 <__swsetup_r+0xa4>
 800401e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004022:	d1c5      	bne.n	8003fb0 <__swsetup_r+0x24>
 8004024:	bd38      	pop	{r3, r4, r5, pc}
 8004026:	0799      	lsls	r1, r3, #30
 8004028:	bf58      	it	pl
 800402a:	6962      	ldrpl	r2, [r4, #20]
 800402c:	60a2      	str	r2, [r4, #8]
 800402e:	e7f4      	b.n	800401a <__swsetup_r+0x8e>
 8004030:	2000      	movs	r0, #0
 8004032:	e7f7      	b.n	8004024 <__swsetup_r+0x98>
 8004034:	20000058 	.word	0x20000058

08004038 <memmove>:
 8004038:	4288      	cmp	r0, r1
 800403a:	b510      	push	{r4, lr}
 800403c:	eb01 0402 	add.w	r4, r1, r2
 8004040:	d902      	bls.n	8004048 <memmove+0x10>
 8004042:	4284      	cmp	r4, r0
 8004044:	4623      	mov	r3, r4
 8004046:	d807      	bhi.n	8004058 <memmove+0x20>
 8004048:	1e43      	subs	r3, r0, #1
 800404a:	42a1      	cmp	r1, r4
 800404c:	d008      	beq.n	8004060 <memmove+0x28>
 800404e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004052:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004056:	e7f8      	b.n	800404a <memmove+0x12>
 8004058:	4601      	mov	r1, r0
 800405a:	4402      	add	r2, r0
 800405c:	428a      	cmp	r2, r1
 800405e:	d100      	bne.n	8004062 <memmove+0x2a>
 8004060:	bd10      	pop	{r4, pc}
 8004062:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004066:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800406a:	e7f7      	b.n	800405c <memmove+0x24>

0800406c <_sbrk_r>:
 800406c:	b538      	push	{r3, r4, r5, lr}
 800406e:	2300      	movs	r3, #0
 8004070:	4d05      	ldr	r5, [pc, #20]	@ (8004088 <_sbrk_r+0x1c>)
 8004072:	4604      	mov	r4, r0
 8004074:	4608      	mov	r0, r1
 8004076:	602b      	str	r3, [r5, #0]
 8004078:	f7fc fa18 	bl	80004ac <_sbrk>
 800407c:	1c43      	adds	r3, r0, #1
 800407e:	d102      	bne.n	8004086 <_sbrk_r+0x1a>
 8004080:	682b      	ldr	r3, [r5, #0]
 8004082:	b103      	cbz	r3, 8004086 <_sbrk_r+0x1a>
 8004084:	6023      	str	r3, [r4, #0]
 8004086:	bd38      	pop	{r3, r4, r5, pc}
 8004088:	200003b0 	.word	0x200003b0

0800408c <memchr>:
 800408c:	4603      	mov	r3, r0
 800408e:	b510      	push	{r4, lr}
 8004090:	b2c9      	uxtb	r1, r1
 8004092:	4402      	add	r2, r0
 8004094:	4293      	cmp	r3, r2
 8004096:	4618      	mov	r0, r3
 8004098:	d101      	bne.n	800409e <memchr+0x12>
 800409a:	2000      	movs	r0, #0
 800409c:	e003      	b.n	80040a6 <memchr+0x1a>
 800409e:	7804      	ldrb	r4, [r0, #0]
 80040a0:	3301      	adds	r3, #1
 80040a2:	428c      	cmp	r4, r1
 80040a4:	d1f6      	bne.n	8004094 <memchr+0x8>
 80040a6:	bd10      	pop	{r4, pc}

080040a8 <memcpy>:
 80040a8:	440a      	add	r2, r1
 80040aa:	4291      	cmp	r1, r2
 80040ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80040b0:	d100      	bne.n	80040b4 <memcpy+0xc>
 80040b2:	4770      	bx	lr
 80040b4:	b510      	push	{r4, lr}
 80040b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80040ba:	4291      	cmp	r1, r2
 80040bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80040c0:	d1f9      	bne.n	80040b6 <memcpy+0xe>
 80040c2:	bd10      	pop	{r4, pc}

080040c4 <_realloc_r>:
 80040c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040c8:	4680      	mov	r8, r0
 80040ca:	4615      	mov	r5, r2
 80040cc:	460c      	mov	r4, r1
 80040ce:	b921      	cbnz	r1, 80040da <_realloc_r+0x16>
 80040d0:	4611      	mov	r1, r2
 80040d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80040d6:	f7ff ba65 	b.w	80035a4 <_malloc_r>
 80040da:	b92a      	cbnz	r2, 80040e8 <_realloc_r+0x24>
 80040dc:	f7ff f9f8 	bl	80034d0 <_free_r>
 80040e0:	2400      	movs	r4, #0
 80040e2:	4620      	mov	r0, r4
 80040e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040e8:	f000 f89e 	bl	8004228 <_malloc_usable_size_r>
 80040ec:	4285      	cmp	r5, r0
 80040ee:	4606      	mov	r6, r0
 80040f0:	d802      	bhi.n	80040f8 <_realloc_r+0x34>
 80040f2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80040f6:	d8f4      	bhi.n	80040e2 <_realloc_r+0x1e>
 80040f8:	4629      	mov	r1, r5
 80040fa:	4640      	mov	r0, r8
 80040fc:	f7ff fa52 	bl	80035a4 <_malloc_r>
 8004100:	4607      	mov	r7, r0
 8004102:	2800      	cmp	r0, #0
 8004104:	d0ec      	beq.n	80040e0 <_realloc_r+0x1c>
 8004106:	42b5      	cmp	r5, r6
 8004108:	462a      	mov	r2, r5
 800410a:	4621      	mov	r1, r4
 800410c:	bf28      	it	cs
 800410e:	4632      	movcs	r2, r6
 8004110:	f7ff ffca 	bl	80040a8 <memcpy>
 8004114:	4621      	mov	r1, r4
 8004116:	4640      	mov	r0, r8
 8004118:	f7ff f9da 	bl	80034d0 <_free_r>
 800411c:	463c      	mov	r4, r7
 800411e:	e7e0      	b.n	80040e2 <_realloc_r+0x1e>

08004120 <__swhatbuf_r>:
 8004120:	b570      	push	{r4, r5, r6, lr}
 8004122:	460c      	mov	r4, r1
 8004124:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004128:	4615      	mov	r5, r2
 800412a:	2900      	cmp	r1, #0
 800412c:	461e      	mov	r6, r3
 800412e:	b096      	sub	sp, #88	@ 0x58
 8004130:	da0c      	bge.n	800414c <__swhatbuf_r+0x2c>
 8004132:	89a3      	ldrh	r3, [r4, #12]
 8004134:	2100      	movs	r1, #0
 8004136:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800413a:	bf14      	ite	ne
 800413c:	2340      	movne	r3, #64	@ 0x40
 800413e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004142:	2000      	movs	r0, #0
 8004144:	6031      	str	r1, [r6, #0]
 8004146:	602b      	str	r3, [r5, #0]
 8004148:	b016      	add	sp, #88	@ 0x58
 800414a:	bd70      	pop	{r4, r5, r6, pc}
 800414c:	466a      	mov	r2, sp
 800414e:	f000 f849 	bl	80041e4 <_fstat_r>
 8004152:	2800      	cmp	r0, #0
 8004154:	dbed      	blt.n	8004132 <__swhatbuf_r+0x12>
 8004156:	9901      	ldr	r1, [sp, #4]
 8004158:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800415c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004160:	4259      	negs	r1, r3
 8004162:	4159      	adcs	r1, r3
 8004164:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004168:	e7eb      	b.n	8004142 <__swhatbuf_r+0x22>

0800416a <__smakebuf_r>:
 800416a:	898b      	ldrh	r3, [r1, #12]
 800416c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800416e:	079d      	lsls	r5, r3, #30
 8004170:	4606      	mov	r6, r0
 8004172:	460c      	mov	r4, r1
 8004174:	d507      	bpl.n	8004186 <__smakebuf_r+0x1c>
 8004176:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800417a:	6023      	str	r3, [r4, #0]
 800417c:	6123      	str	r3, [r4, #16]
 800417e:	2301      	movs	r3, #1
 8004180:	6163      	str	r3, [r4, #20]
 8004182:	b003      	add	sp, #12
 8004184:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004186:	466a      	mov	r2, sp
 8004188:	ab01      	add	r3, sp, #4
 800418a:	f7ff ffc9 	bl	8004120 <__swhatbuf_r>
 800418e:	9f00      	ldr	r7, [sp, #0]
 8004190:	4605      	mov	r5, r0
 8004192:	4639      	mov	r1, r7
 8004194:	4630      	mov	r0, r6
 8004196:	f7ff fa05 	bl	80035a4 <_malloc_r>
 800419a:	b948      	cbnz	r0, 80041b0 <__smakebuf_r+0x46>
 800419c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80041a0:	059a      	lsls	r2, r3, #22
 80041a2:	d4ee      	bmi.n	8004182 <__smakebuf_r+0x18>
 80041a4:	f023 0303 	bic.w	r3, r3, #3
 80041a8:	f043 0302 	orr.w	r3, r3, #2
 80041ac:	81a3      	strh	r3, [r4, #12]
 80041ae:	e7e2      	b.n	8004176 <__smakebuf_r+0xc>
 80041b0:	89a3      	ldrh	r3, [r4, #12]
 80041b2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80041b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041ba:	81a3      	strh	r3, [r4, #12]
 80041bc:	9b01      	ldr	r3, [sp, #4]
 80041be:	6020      	str	r0, [r4, #0]
 80041c0:	b15b      	cbz	r3, 80041da <__smakebuf_r+0x70>
 80041c2:	4630      	mov	r0, r6
 80041c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80041c8:	f000 f81e 	bl	8004208 <_isatty_r>
 80041cc:	b128      	cbz	r0, 80041da <__smakebuf_r+0x70>
 80041ce:	89a3      	ldrh	r3, [r4, #12]
 80041d0:	f023 0303 	bic.w	r3, r3, #3
 80041d4:	f043 0301 	orr.w	r3, r3, #1
 80041d8:	81a3      	strh	r3, [r4, #12]
 80041da:	89a3      	ldrh	r3, [r4, #12]
 80041dc:	431d      	orrs	r5, r3
 80041de:	81a5      	strh	r5, [r4, #12]
 80041e0:	e7cf      	b.n	8004182 <__smakebuf_r+0x18>
	...

080041e4 <_fstat_r>:
 80041e4:	b538      	push	{r3, r4, r5, lr}
 80041e6:	2300      	movs	r3, #0
 80041e8:	4d06      	ldr	r5, [pc, #24]	@ (8004204 <_fstat_r+0x20>)
 80041ea:	4604      	mov	r4, r0
 80041ec:	4608      	mov	r0, r1
 80041ee:	4611      	mov	r1, r2
 80041f0:	602b      	str	r3, [r5, #0]
 80041f2:	f7fe fd68 	bl	8002cc6 <_fstat>
 80041f6:	1c43      	adds	r3, r0, #1
 80041f8:	d102      	bne.n	8004200 <_fstat_r+0x1c>
 80041fa:	682b      	ldr	r3, [r5, #0]
 80041fc:	b103      	cbz	r3, 8004200 <_fstat_r+0x1c>
 80041fe:	6023      	str	r3, [r4, #0]
 8004200:	bd38      	pop	{r3, r4, r5, pc}
 8004202:	bf00      	nop
 8004204:	200003b0 	.word	0x200003b0

08004208 <_isatty_r>:
 8004208:	b538      	push	{r3, r4, r5, lr}
 800420a:	2300      	movs	r3, #0
 800420c:	4d05      	ldr	r5, [pc, #20]	@ (8004224 <_isatty_r+0x1c>)
 800420e:	4604      	mov	r4, r0
 8004210:	4608      	mov	r0, r1
 8004212:	602b      	str	r3, [r5, #0]
 8004214:	f7fe feba 	bl	8002f8c <_isatty>
 8004218:	1c43      	adds	r3, r0, #1
 800421a:	d102      	bne.n	8004222 <_isatty_r+0x1a>
 800421c:	682b      	ldr	r3, [r5, #0]
 800421e:	b103      	cbz	r3, 8004222 <_isatty_r+0x1a>
 8004220:	6023      	str	r3, [r4, #0]
 8004222:	bd38      	pop	{r3, r4, r5, pc}
 8004224:	200003b0 	.word	0x200003b0

08004228 <_malloc_usable_size_r>:
 8004228:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800422c:	1f18      	subs	r0, r3, #4
 800422e:	2b00      	cmp	r3, #0
 8004230:	bfbc      	itt	lt
 8004232:	580b      	ldrlt	r3, [r1, r0]
 8004234:	18c0      	addlt	r0, r0, r3
 8004236:	4770      	bx	lr

08004238 <_init>:
 8004238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800423a:	bf00      	nop
 800423c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800423e:	bc08      	pop	{r3}
 8004240:	469e      	mov	lr, r3
 8004242:	4770      	bx	lr

08004244 <_fini>:
 8004244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004246:	bf00      	nop
 8004248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800424a:	bc08      	pop	{r3}
 800424c:	469e      	mov	lr, r3
 800424e:	4770      	bx	lr
