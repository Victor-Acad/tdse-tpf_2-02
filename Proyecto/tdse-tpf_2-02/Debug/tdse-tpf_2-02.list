
tdse-tpf_2-02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040a8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000458  080041b4  080041b4  000051b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800460c  0800460c  000060a8  2**0
                  CONTENTS
  4 .ARM          00000008  0800460c  0800460c  0000560c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004614  08004614  000060a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004614  08004614  00005614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004618  08004618  00005618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a8  20000000  0800461c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000318  200000a8  080046c4  000060a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003c0  080046c4  000063c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000060a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000084a6  00000000  00000000  000060d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fb6  00000000  00000000  0000e577  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000820  00000000  00000000  00010530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000060f  00000000  00000000  00010d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000187d1  00000000  00000000  0001135f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e015  00000000  00000000  00029b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083926  00000000  00000000  00037b45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bb46b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b00  00000000  00000000  000bb4b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000bdfb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000a8 	.word	0x200000a8
 8000128:	00000000 	.word	0x00000000
 800012c:	0800419c 	.word	0x0800419c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000ac 	.word	0x200000ac
 8000148:	0800419c 	.word	0x0800419c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	initialise_monitor_handles();
 8000160:	f002 fe66 	bl	8002e30 <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000164:	f000 fa7c 	bl	8000660 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000168:	f000 f809 	bl	800017e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016c:	f000 f876 	bl	800025c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000170:	f000 f846 	bl	8000200 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

	/* Application Init */
	app_init();
 8000174:	f001 fe30 	bl	8001dd8 <app_init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  /* Application Update */
	  app_update();
 8000178:	f001 fefa 	bl	8001f70 <app_update>
 800017c:	e7fc      	b.n	8000178 <main+0x1c>

0800017e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800017e:	b580      	push	{r7, lr}
 8000180:	b090      	sub	sp, #64	@ 0x40
 8000182:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000184:	f107 0318 	add.w	r3, r7, #24
 8000188:	2228      	movs	r2, #40	@ 0x28
 800018a:	2100      	movs	r1, #0
 800018c:	4618      	mov	r0, r3
 800018e:	f003 f8d4 	bl	800333a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000192:	1d3b      	adds	r3, r7, #4
 8000194:	2200      	movs	r2, #0
 8000196:	601a      	str	r2, [r3, #0]
 8000198:	605a      	str	r2, [r3, #4]
 800019a:	609a      	str	r2, [r3, #8]
 800019c:	60da      	str	r2, [r3, #12]
 800019e:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001a0:	2302      	movs	r3, #2
 80001a2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001a4:	2301      	movs	r3, #1
 80001a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001a8:	2310      	movs	r3, #16
 80001aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001ac:	2302      	movs	r3, #2
 80001ae:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80001b0:	2300      	movs	r3, #0
 80001b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80001b4:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 80001b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001ba:	f107 0318 	add.w	r3, r7, #24
 80001be:	4618      	mov	r0, r3
 80001c0:	f001 fa0e 	bl	80015e0 <HAL_RCC_OscConfig>
 80001c4:	4603      	mov	r3, r0
 80001c6:	2b00      	cmp	r3, #0
 80001c8:	d001      	beq.n	80001ce <SystemClock_Config+0x50>
  {
    Error_Handler();
 80001ca:	f000 f8cb 	bl	8000364 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001ce:	230f      	movs	r3, #15
 80001d0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001d2:	2302      	movs	r3, #2
 80001d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001d6:	2300      	movs	r3, #0
 80001d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80001de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001e0:	2300      	movs	r3, #0
 80001e2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001e4:	1d3b      	adds	r3, r7, #4
 80001e6:	2102      	movs	r1, #2
 80001e8:	4618      	mov	r0, r3
 80001ea:	f001 fc7b 	bl	8001ae4 <HAL_RCC_ClockConfig>
 80001ee:	4603      	mov	r3, r0
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d001      	beq.n	80001f8 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80001f4:	f000 f8b6 	bl	8000364 <Error_Handler>
  }
}
 80001f8:	bf00      	nop
 80001fa:	3740      	adds	r7, #64	@ 0x40
 80001fc:	46bd      	mov	sp, r7
 80001fe:	bd80      	pop	{r7, pc}

08000200 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000204:	4b12      	ldr	r3, [pc, #72]	@ (8000250 <MX_I2C1_Init+0x50>)
 8000206:	4a13      	ldr	r2, [pc, #76]	@ (8000254 <MX_I2C1_Init+0x54>)
 8000208:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800020a:	4b11      	ldr	r3, [pc, #68]	@ (8000250 <MX_I2C1_Init+0x50>)
 800020c:	4a12      	ldr	r2, [pc, #72]	@ (8000258 <MX_I2C1_Init+0x58>)
 800020e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000210:	4b0f      	ldr	r3, [pc, #60]	@ (8000250 <MX_I2C1_Init+0x50>)
 8000212:	2200      	movs	r2, #0
 8000214:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000216:	4b0e      	ldr	r3, [pc, #56]	@ (8000250 <MX_I2C1_Init+0x50>)
 8000218:	2200      	movs	r2, #0
 800021a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800021c:	4b0c      	ldr	r3, [pc, #48]	@ (8000250 <MX_I2C1_Init+0x50>)
 800021e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000222:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000224:	4b0a      	ldr	r3, [pc, #40]	@ (8000250 <MX_I2C1_Init+0x50>)
 8000226:	2200      	movs	r2, #0
 8000228:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800022a:	4b09      	ldr	r3, [pc, #36]	@ (8000250 <MX_I2C1_Init+0x50>)
 800022c:	2200      	movs	r2, #0
 800022e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000230:	4b07      	ldr	r3, [pc, #28]	@ (8000250 <MX_I2C1_Init+0x50>)
 8000232:	2200      	movs	r2, #0
 8000234:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000236:	4b06      	ldr	r3, [pc, #24]	@ (8000250 <MX_I2C1_Init+0x50>)
 8000238:	2200      	movs	r2, #0
 800023a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800023c:	4804      	ldr	r0, [pc, #16]	@ (8000250 <MX_I2C1_Init+0x50>)
 800023e:	f000 fd33 	bl	8000ca8 <HAL_I2C_Init>
 8000242:	4603      	mov	r3, r0
 8000244:	2b00      	cmp	r3, #0
 8000246:	d001      	beq.n	800024c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000248:	f000 f88c 	bl	8000364 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800024c:	bf00      	nop
 800024e:	bd80      	pop	{r7, pc}
 8000250:	200000c4 	.word	0x200000c4
 8000254:	40005400 	.word	0x40005400
 8000258:	000186a0 	.word	0x000186a0

0800025c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b088      	sub	sp, #32
 8000260:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000262:	f107 0310 	add.w	r3, r7, #16
 8000266:	2200      	movs	r2, #0
 8000268:	601a      	str	r2, [r3, #0]
 800026a:	605a      	str	r2, [r3, #4]
 800026c:	609a      	str	r2, [r3, #8]
 800026e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000270:	4b38      	ldr	r3, [pc, #224]	@ (8000354 <MX_GPIO_Init+0xf8>)
 8000272:	699b      	ldr	r3, [r3, #24]
 8000274:	4a37      	ldr	r2, [pc, #220]	@ (8000354 <MX_GPIO_Init+0xf8>)
 8000276:	f043 0310 	orr.w	r3, r3, #16
 800027a:	6193      	str	r3, [r2, #24]
 800027c:	4b35      	ldr	r3, [pc, #212]	@ (8000354 <MX_GPIO_Init+0xf8>)
 800027e:	699b      	ldr	r3, [r3, #24]
 8000280:	f003 0310 	and.w	r3, r3, #16
 8000284:	60fb      	str	r3, [r7, #12]
 8000286:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000288:	4b32      	ldr	r3, [pc, #200]	@ (8000354 <MX_GPIO_Init+0xf8>)
 800028a:	699b      	ldr	r3, [r3, #24]
 800028c:	4a31      	ldr	r2, [pc, #196]	@ (8000354 <MX_GPIO_Init+0xf8>)
 800028e:	f043 0320 	orr.w	r3, r3, #32
 8000292:	6193      	str	r3, [r2, #24]
 8000294:	4b2f      	ldr	r3, [pc, #188]	@ (8000354 <MX_GPIO_Init+0xf8>)
 8000296:	699b      	ldr	r3, [r3, #24]
 8000298:	f003 0320 	and.w	r3, r3, #32
 800029c:	60bb      	str	r3, [r7, #8]
 800029e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002a0:	4b2c      	ldr	r3, [pc, #176]	@ (8000354 <MX_GPIO_Init+0xf8>)
 80002a2:	699b      	ldr	r3, [r3, #24]
 80002a4:	4a2b      	ldr	r2, [pc, #172]	@ (8000354 <MX_GPIO_Init+0xf8>)
 80002a6:	f043 0304 	orr.w	r3, r3, #4
 80002aa:	6193      	str	r3, [r2, #24]
 80002ac:	4b29      	ldr	r3, [pc, #164]	@ (8000354 <MX_GPIO_Init+0xf8>)
 80002ae:	699b      	ldr	r3, [r3, #24]
 80002b0:	f003 0304 	and.w	r3, r3, #4
 80002b4:	607b      	str	r3, [r7, #4]
 80002b6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002b8:	4b26      	ldr	r3, [pc, #152]	@ (8000354 <MX_GPIO_Init+0xf8>)
 80002ba:	699b      	ldr	r3, [r3, #24]
 80002bc:	4a25      	ldr	r2, [pc, #148]	@ (8000354 <MX_GPIO_Init+0xf8>)
 80002be:	f043 0308 	orr.w	r3, r3, #8
 80002c2:	6193      	str	r3, [r2, #24]
 80002c4:	4b23      	ldr	r3, [pc, #140]	@ (8000354 <MX_GPIO_Init+0xf8>)
 80002c6:	699b      	ldr	r3, [r3, #24]
 80002c8:	f003 0308 	and.w	r3, r3, #8
 80002cc:	603b      	str	r3, [r7, #0]
 80002ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, R4_Pin|R3_Pin|R2_Pin|R1_Pin, GPIO_PIN_RESET);
 80002d0:	2200      	movs	r2, #0
 80002d2:	21f0      	movs	r1, #240	@ 0xf0
 80002d4:	4820      	ldr	r0, [pc, #128]	@ (8000358 <MX_GPIO_Init+0xfc>)
 80002d6:	f000 fcce 	bl	8000c76 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|BUZ_Pin, GPIO_PIN_RESET);
 80002da:	2200      	movs	r2, #0
 80002dc:	2107      	movs	r1, #7
 80002de:	481f      	ldr	r0, [pc, #124]	@ (800035c <MX_GPIO_Init+0x100>)
 80002e0:	f000 fcc9 	bl	8000c76 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 80002e4:	2301      	movs	r3, #1
 80002e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002e8:	2300      	movs	r3, #0
 80002ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80002ec:	2301      	movs	r3, #1
 80002ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 80002f0:	f107 0310 	add.w	r3, r7, #16
 80002f4:	4619      	mov	r1, r3
 80002f6:	481a      	ldr	r0, [pc, #104]	@ (8000360 <MX_GPIO_Init+0x104>)
 80002f8:	f000 fb22 	bl	8000940 <HAL_GPIO_Init>

  /*Configure GPIO pins : C4_Pin C3_Pin C2_Pin C1_Pin */
  GPIO_InitStruct.Pin = C4_Pin|C3_Pin|C2_Pin|C1_Pin;
 80002fc:	230f      	movs	r3, #15
 80002fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000300:	2300      	movs	r3, #0
 8000302:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000304:	2301      	movs	r3, #1
 8000306:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000308:	f107 0310 	add.w	r3, r7, #16
 800030c:	4619      	mov	r1, r3
 800030e:	4812      	ldr	r0, [pc, #72]	@ (8000358 <MX_GPIO_Init+0xfc>)
 8000310:	f000 fb16 	bl	8000940 <HAL_GPIO_Init>

  /*Configure GPIO pins : R4_Pin R3_Pin R2_Pin R1_Pin */
  GPIO_InitStruct.Pin = R4_Pin|R3_Pin|R2_Pin|R1_Pin;
 8000314:	23f0      	movs	r3, #240	@ 0xf0
 8000316:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000318:	2301      	movs	r3, #1
 800031a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800031c:	2300      	movs	r3, #0
 800031e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000320:	2302      	movs	r3, #2
 8000322:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000324:	f107 0310 	add.w	r3, r7, #16
 8000328:	4619      	mov	r1, r3
 800032a:	480b      	ldr	r0, [pc, #44]	@ (8000358 <MX_GPIO_Init+0xfc>)
 800032c:	f000 fb08 	bl	8000940 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin BUZ_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|BUZ_Pin;
 8000330:	2307      	movs	r3, #7
 8000332:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000334:	2301      	movs	r3, #1
 8000336:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000338:	2300      	movs	r3, #0
 800033a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800033c:	2302      	movs	r3, #2
 800033e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000340:	f107 0310 	add.w	r3, r7, #16
 8000344:	4619      	mov	r1, r3
 8000346:	4805      	ldr	r0, [pc, #20]	@ (800035c <MX_GPIO_Init+0x100>)
 8000348:	f000 fafa 	bl	8000940 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800034c:	bf00      	nop
 800034e:	3720      	adds	r7, #32
 8000350:	46bd      	mov	sp, r7
 8000352:	bd80      	pop	{r7, pc}
 8000354:	40021000 	.word	0x40021000
 8000358:	40010800 	.word	0x40010800
 800035c:	40010c00 	.word	0x40010c00
 8000360:	40011000 	.word	0x40011000

08000364 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000364:	b480      	push	{r7}
 8000366:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000368:	b672      	cpsid	i
}
 800036a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800036c:	bf00      	nop
 800036e:	e7fd      	b.n	800036c <Error_Handler+0x8>

08000370 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000370:	b480      	push	{r7}
 8000372:	b085      	sub	sp, #20
 8000374:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000376:	4b15      	ldr	r3, [pc, #84]	@ (80003cc <HAL_MspInit+0x5c>)
 8000378:	699b      	ldr	r3, [r3, #24]
 800037a:	4a14      	ldr	r2, [pc, #80]	@ (80003cc <HAL_MspInit+0x5c>)
 800037c:	f043 0301 	orr.w	r3, r3, #1
 8000380:	6193      	str	r3, [r2, #24]
 8000382:	4b12      	ldr	r3, [pc, #72]	@ (80003cc <HAL_MspInit+0x5c>)
 8000384:	699b      	ldr	r3, [r3, #24]
 8000386:	f003 0301 	and.w	r3, r3, #1
 800038a:	60bb      	str	r3, [r7, #8]
 800038c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800038e:	4b0f      	ldr	r3, [pc, #60]	@ (80003cc <HAL_MspInit+0x5c>)
 8000390:	69db      	ldr	r3, [r3, #28]
 8000392:	4a0e      	ldr	r2, [pc, #56]	@ (80003cc <HAL_MspInit+0x5c>)
 8000394:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000398:	61d3      	str	r3, [r2, #28]
 800039a:	4b0c      	ldr	r3, [pc, #48]	@ (80003cc <HAL_MspInit+0x5c>)
 800039c:	69db      	ldr	r3, [r3, #28]
 800039e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80003a2:	607b      	str	r3, [r7, #4]
 80003a4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003a6:	4b0a      	ldr	r3, [pc, #40]	@ (80003d0 <HAL_MspInit+0x60>)
 80003a8:	685b      	ldr	r3, [r3, #4]
 80003aa:	60fb      	str	r3, [r7, #12]
 80003ac:	68fb      	ldr	r3, [r7, #12]
 80003ae:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80003b2:	60fb      	str	r3, [r7, #12]
 80003b4:	68fb      	ldr	r3, [r7, #12]
 80003b6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80003ba:	60fb      	str	r3, [r7, #12]
 80003bc:	4a04      	ldr	r2, [pc, #16]	@ (80003d0 <HAL_MspInit+0x60>)
 80003be:	68fb      	ldr	r3, [r7, #12]
 80003c0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003c2:	bf00      	nop
 80003c4:	3714      	adds	r7, #20
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bc80      	pop	{r7}
 80003ca:	4770      	bx	lr
 80003cc:	40021000 	.word	0x40021000
 80003d0:	40010000 	.word	0x40010000

080003d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b088      	sub	sp, #32
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003dc:	f107 0310 	add.w	r3, r7, #16
 80003e0:	2200      	movs	r2, #0
 80003e2:	601a      	str	r2, [r3, #0]
 80003e4:	605a      	str	r2, [r3, #4]
 80003e6:	609a      	str	r2, [r3, #8]
 80003e8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	4a15      	ldr	r2, [pc, #84]	@ (8000444 <HAL_I2C_MspInit+0x70>)
 80003f0:	4293      	cmp	r3, r2
 80003f2:	d123      	bne.n	800043c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80003f4:	4b14      	ldr	r3, [pc, #80]	@ (8000448 <HAL_I2C_MspInit+0x74>)
 80003f6:	699b      	ldr	r3, [r3, #24]
 80003f8:	4a13      	ldr	r2, [pc, #76]	@ (8000448 <HAL_I2C_MspInit+0x74>)
 80003fa:	f043 0308 	orr.w	r3, r3, #8
 80003fe:	6193      	str	r3, [r2, #24]
 8000400:	4b11      	ldr	r3, [pc, #68]	@ (8000448 <HAL_I2C_MspInit+0x74>)
 8000402:	699b      	ldr	r3, [r3, #24]
 8000404:	f003 0308 	and.w	r3, r3, #8
 8000408:	60fb      	str	r3, [r7, #12]
 800040a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800040c:	23c0      	movs	r3, #192	@ 0xc0
 800040e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000410:	2312      	movs	r3, #18
 8000412:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000414:	2303      	movs	r3, #3
 8000416:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000418:	f107 0310 	add.w	r3, r7, #16
 800041c:	4619      	mov	r1, r3
 800041e:	480b      	ldr	r0, [pc, #44]	@ (800044c <HAL_I2C_MspInit+0x78>)
 8000420:	f000 fa8e 	bl	8000940 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000424:	4b08      	ldr	r3, [pc, #32]	@ (8000448 <HAL_I2C_MspInit+0x74>)
 8000426:	69db      	ldr	r3, [r3, #28]
 8000428:	4a07      	ldr	r2, [pc, #28]	@ (8000448 <HAL_I2C_MspInit+0x74>)
 800042a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800042e:	61d3      	str	r3, [r2, #28]
 8000430:	4b05      	ldr	r3, [pc, #20]	@ (8000448 <HAL_I2C_MspInit+0x74>)
 8000432:	69db      	ldr	r3, [r3, #28]
 8000434:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000438:	60bb      	str	r3, [r7, #8]
 800043a:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800043c:	bf00      	nop
 800043e:	3720      	adds	r7, #32
 8000440:	46bd      	mov	sp, r7
 8000442:	bd80      	pop	{r7, pc}
 8000444:	40005400 	.word	0x40005400
 8000448:	40021000 	.word	0x40021000
 800044c:	40010c00 	.word	0x40010c00

08000450 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000450:	b480      	push	{r7}
 8000452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000454:	bf00      	nop
 8000456:	e7fd      	b.n	8000454 <NMI_Handler+0x4>

08000458 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000458:	b480      	push	{r7}
 800045a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800045c:	bf00      	nop
 800045e:	e7fd      	b.n	800045c <HardFault_Handler+0x4>

08000460 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000460:	b480      	push	{r7}
 8000462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000464:	bf00      	nop
 8000466:	e7fd      	b.n	8000464 <MemManage_Handler+0x4>

08000468 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000468:	b480      	push	{r7}
 800046a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800046c:	bf00      	nop
 800046e:	e7fd      	b.n	800046c <BusFault_Handler+0x4>

08000470 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000470:	b480      	push	{r7}
 8000472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000474:	bf00      	nop
 8000476:	e7fd      	b.n	8000474 <UsageFault_Handler+0x4>

08000478 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800047c:	bf00      	nop
 800047e:	46bd      	mov	sp, r7
 8000480:	bc80      	pop	{r7}
 8000482:	4770      	bx	lr

08000484 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000488:	bf00      	nop
 800048a:	46bd      	mov	sp, r7
 800048c:	bc80      	pop	{r7}
 800048e:	4770      	bx	lr

08000490 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000494:	bf00      	nop
 8000496:	46bd      	mov	sp, r7
 8000498:	bc80      	pop	{r7}
 800049a:	4770      	bx	lr

0800049c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004a0:	f000 f924 	bl	80006ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  	HAL_SYSTICK_IRQHandler();
 80004a4:	f000 fa45 	bl	8000932 <HAL_SYSTICK_IRQHandler>

  /* USER CODE END SysTick_IRQn 1 */
}
 80004a8:	bf00      	nop
 80004aa:	bd80      	pop	{r7, pc}

080004ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b086      	sub	sp, #24
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80004b4:	4a14      	ldr	r2, [pc, #80]	@ (8000508 <_sbrk+0x5c>)
 80004b6:	4b15      	ldr	r3, [pc, #84]	@ (800050c <_sbrk+0x60>)
 80004b8:	1ad3      	subs	r3, r2, r3
 80004ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004bc:	697b      	ldr	r3, [r7, #20]
 80004be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004c0:	4b13      	ldr	r3, [pc, #76]	@ (8000510 <_sbrk+0x64>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d102      	bne.n	80004ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80004c8:	4b11      	ldr	r3, [pc, #68]	@ (8000510 <_sbrk+0x64>)
 80004ca:	4a12      	ldr	r2, [pc, #72]	@ (8000514 <_sbrk+0x68>)
 80004cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80004ce:	4b10      	ldr	r3, [pc, #64]	@ (8000510 <_sbrk+0x64>)
 80004d0:	681a      	ldr	r2, [r3, #0]
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	4413      	add	r3, r2
 80004d6:	693a      	ldr	r2, [r7, #16]
 80004d8:	429a      	cmp	r2, r3
 80004da:	d207      	bcs.n	80004ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80004dc:	f002 ff7c 	bl	80033d8 <__errno>
 80004e0:	4603      	mov	r3, r0
 80004e2:	220c      	movs	r2, #12
 80004e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80004e6:	f04f 33ff 	mov.w	r3, #4294967295
 80004ea:	e009      	b.n	8000500 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80004ec:	4b08      	ldr	r3, [pc, #32]	@ (8000510 <_sbrk+0x64>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80004f2:	4b07      	ldr	r3, [pc, #28]	@ (8000510 <_sbrk+0x64>)
 80004f4:	681a      	ldr	r2, [r3, #0]
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	4413      	add	r3, r2
 80004fa:	4a05      	ldr	r2, [pc, #20]	@ (8000510 <_sbrk+0x64>)
 80004fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80004fe:	68fb      	ldr	r3, [r7, #12]
}
 8000500:	4618      	mov	r0, r3
 8000502:	3718      	adds	r7, #24
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}
 8000508:	20005000 	.word	0x20005000
 800050c:	00000400 	.word	0x00000400
 8000510:	20000118 	.word	0x20000118
 8000514:	200003c0 	.word	0x200003c0

08000518 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800051c:	bf00      	nop
 800051e:	46bd      	mov	sp, r7
 8000520:	bc80      	pop	{r7}
 8000522:	4770      	bx	lr

08000524 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000524:	f7ff fff8 	bl	8000518 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000528:	480b      	ldr	r0, [pc, #44]	@ (8000558 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800052a:	490c      	ldr	r1, [pc, #48]	@ (800055c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800052c:	4a0c      	ldr	r2, [pc, #48]	@ (8000560 <LoopFillZerobss+0x16>)
  movs r3, #0
 800052e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000530:	e002      	b.n	8000538 <LoopCopyDataInit>

08000532 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000532:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000534:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000536:	3304      	adds	r3, #4

08000538 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000538:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800053a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800053c:	d3f9      	bcc.n	8000532 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800053e:	4a09      	ldr	r2, [pc, #36]	@ (8000564 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000540:	4c09      	ldr	r4, [pc, #36]	@ (8000568 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000542:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000544:	e001      	b.n	800054a <LoopFillZerobss>

08000546 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000546:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000548:	3204      	adds	r2, #4

0800054a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800054a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800054c:	d3fb      	bcc.n	8000546 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800054e:	f002 ff49 	bl	80033e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000552:	f7ff fe03 	bl	800015c <main>
  bx lr
 8000556:	4770      	bx	lr
  ldr r0, =_sdata
 8000558:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800055c:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 8000560:	0800461c 	.word	0x0800461c
  ldr r2, =_sbss
 8000564:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8000568:	200003c0 	.word	0x200003c0

0800056c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800056c:	e7fe      	b.n	800056c <ADC1_2_IRQHandler>

0800056e <lcd_send_cmd>:
 * @param  lcd: Pointer to the LCD handle
 * @param  cmd: Command byte to send
 * @retval None
 */
void lcd_send_cmd(I2C_LCD_HandleTypeDef *lcd, char cmd)
{
 800056e:	b580      	push	{r7, lr}
 8000570:	b086      	sub	sp, #24
 8000572:	af02      	add	r7, sp, #8
 8000574:	6078      	str	r0, [r7, #4]
 8000576:	460b      	mov	r3, r1
 8000578:	70fb      	strb	r3, [r7, #3]
    char upper_nibble, lower_nibble;
    uint8_t data_t[4];

    upper_nibble = (cmd & 0xF0);            // Extract upper nibble
 800057a:	78fb      	ldrb	r3, [r7, #3]
 800057c:	f023 030f 	bic.w	r3, r3, #15
 8000580:	73fb      	strb	r3, [r7, #15]
    lower_nibble = ((cmd << 4) & 0xF0);     // Extract lower nibble
 8000582:	78fb      	ldrb	r3, [r7, #3]
 8000584:	011b      	lsls	r3, r3, #4
 8000586:	73bb      	strb	r3, [r7, #14]
    
    data_t[0] = upper_nibble | 0x0C;  // en=1, rs=0
 8000588:	7bfb      	ldrb	r3, [r7, #15]
 800058a:	f043 030c 	orr.w	r3, r3, #12
 800058e:	b2db      	uxtb	r3, r3
 8000590:	723b      	strb	r3, [r7, #8]
    data_t[1] = upper_nibble | 0x08;  // en=0, rs=0
 8000592:	7bfb      	ldrb	r3, [r7, #15]
 8000594:	f043 0308 	orr.w	r3, r3, #8
 8000598:	b2db      	uxtb	r3, r3
 800059a:	727b      	strb	r3, [r7, #9]
    data_t[2] = lower_nibble | 0x0C;  // en=1, rs=0
 800059c:	7bbb      	ldrb	r3, [r7, #14]
 800059e:	f043 030c 	orr.w	r3, r3, #12
 80005a2:	b2db      	uxtb	r3, r3
 80005a4:	72bb      	strb	r3, [r7, #10]
    data_t[3] = lower_nibble | 0x08;  // en=0, rs=0
 80005a6:	7bbb      	ldrb	r3, [r7, #14]
 80005a8:	f043 0308 	orr.w	r3, r3, #8
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	72fb      	strb	r3, [r7, #11]

    HAL_I2C_Master_Transmit(lcd->hi2c, lcd->address, data_t, 4, 100);
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	6818      	ldr	r0, [r3, #0]
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	791b      	ldrb	r3, [r3, #4]
 80005b8:	4619      	mov	r1, r3
 80005ba:	f107 0208 	add.w	r2, r7, #8
 80005be:	2364      	movs	r3, #100	@ 0x64
 80005c0:	9300      	str	r3, [sp, #0]
 80005c2:	2304      	movs	r3, #4
 80005c4:	f000 fcb4 	bl	8000f30 <HAL_I2C_Master_Transmit>
}
 80005c8:	bf00      	nop
 80005ca:	3710      	adds	r7, #16
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}

080005d0 <lcd_init>:
 * @brief  Initializes the LCD in 4-bit mode.
 * @param  lcd: Pointer to the LCD handle
 * @retval None
 */
void lcd_init(I2C_LCD_HandleTypeDef *lcd)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
    HAL_Delay(50);  // Wait for LCD power-up
 80005d8:	2032      	movs	r0, #50	@ 0x32
 80005da:	f000 f8a3 	bl	8000724 <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 80005de:	2130      	movs	r1, #48	@ 0x30
 80005e0:	6878      	ldr	r0, [r7, #4]
 80005e2:	f7ff ffc4 	bl	800056e <lcd_send_cmd>
    HAL_Delay(5);
 80005e6:	2005      	movs	r0, #5
 80005e8:	f000 f89c 	bl	8000724 <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 80005ec:	2130      	movs	r1, #48	@ 0x30
 80005ee:	6878      	ldr	r0, [r7, #4]
 80005f0:	f7ff ffbd 	bl	800056e <lcd_send_cmd>
    HAL_Delay(1);
 80005f4:	2001      	movs	r0, #1
 80005f6:	f000 f895 	bl	8000724 <HAL_Delay>
    lcd_send_cmd(lcd, 0x30);  // Wake up command
 80005fa:	2130      	movs	r1, #48	@ 0x30
 80005fc:	6878      	ldr	r0, [r7, #4]
 80005fe:	f7ff ffb6 	bl	800056e <lcd_send_cmd>
    HAL_Delay(10);
 8000602:	200a      	movs	r0, #10
 8000604:	f000 f88e 	bl	8000724 <HAL_Delay>
    lcd_send_cmd(lcd, 0x20);  // Set to 4-bit mode
 8000608:	2120      	movs	r1, #32
 800060a:	6878      	ldr	r0, [r7, #4]
 800060c:	f7ff ffaf 	bl	800056e <lcd_send_cmd>
    HAL_Delay(10);
 8000610:	200a      	movs	r0, #10
 8000612:	f000 f887 	bl	8000724 <HAL_Delay>

    // LCD configuration commands
    lcd_send_cmd(lcd, 0x28);  // 4-bit mode, 2 lines, 5x8 font
 8000616:	2128      	movs	r1, #40	@ 0x28
 8000618:	6878      	ldr	r0, [r7, #4]
 800061a:	f7ff ffa8 	bl	800056e <lcd_send_cmd>
    HAL_Delay(1);
 800061e:	2001      	movs	r0, #1
 8000620:	f000 f880 	bl	8000724 <HAL_Delay>
    lcd_send_cmd(lcd, 0x08);  // Display off, cursor off, blink off
 8000624:	2108      	movs	r1, #8
 8000626:	6878      	ldr	r0, [r7, #4]
 8000628:	f7ff ffa1 	bl	800056e <lcd_send_cmd>
    HAL_Delay(1);
 800062c:	2001      	movs	r0, #1
 800062e:	f000 f879 	bl	8000724 <HAL_Delay>
    lcd_send_cmd(lcd, 0x01);  // Clear display
 8000632:	2101      	movs	r1, #1
 8000634:	6878      	ldr	r0, [r7, #4]
 8000636:	f7ff ff9a 	bl	800056e <lcd_send_cmd>
    HAL_Delay(2);
 800063a:	2002      	movs	r0, #2
 800063c:	f000 f872 	bl	8000724 <HAL_Delay>
    lcd_send_cmd(lcd, 0x06);  // Entry mode: cursor moves right
 8000640:	2106      	movs	r1, #6
 8000642:	6878      	ldr	r0, [r7, #4]
 8000644:	f7ff ff93 	bl	800056e <lcd_send_cmd>
    HAL_Delay(1);
 8000648:	2001      	movs	r0, #1
 800064a:	f000 f86b 	bl	8000724 <HAL_Delay>
    lcd_send_cmd(lcd, 0x0C);  // Display on, cursor off, blink off
 800064e:	210c      	movs	r1, #12
 8000650:	6878      	ldr	r0, [r7, #4]
 8000652:	f7ff ff8c 	bl	800056e <lcd_send_cmd>
}
 8000656:	bf00      	nop
 8000658:	3708      	adds	r7, #8
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
	...

08000660 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000664:	4b08      	ldr	r3, [pc, #32]	@ (8000688 <HAL_Init+0x28>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a07      	ldr	r2, [pc, #28]	@ (8000688 <HAL_Init+0x28>)
 800066a:	f043 0310 	orr.w	r3, r3, #16
 800066e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000670:	2003      	movs	r0, #3
 8000672:	f000 f92b 	bl	80008cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000676:	200f      	movs	r0, #15
 8000678:	f000 f808 	bl	800068c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800067c:	f7ff fe78 	bl	8000370 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000680:	2300      	movs	r3, #0
}
 8000682:	4618      	mov	r0, r3
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	40022000 	.word	0x40022000

0800068c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000694:	4b12      	ldr	r3, [pc, #72]	@ (80006e0 <HAL_InitTick+0x54>)
 8000696:	681a      	ldr	r2, [r3, #0]
 8000698:	4b12      	ldr	r3, [pc, #72]	@ (80006e4 <HAL_InitTick+0x58>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	4619      	mov	r1, r3
 800069e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80006a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80006aa:	4618      	mov	r0, r3
 80006ac:	f000 f935 	bl	800091a <HAL_SYSTICK_Config>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006b6:	2301      	movs	r3, #1
 80006b8:	e00e      	b.n	80006d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	2b0f      	cmp	r3, #15
 80006be:	d80a      	bhi.n	80006d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006c0:	2200      	movs	r2, #0
 80006c2:	6879      	ldr	r1, [r7, #4]
 80006c4:	f04f 30ff 	mov.w	r0, #4294967295
 80006c8:	f000 f90b 	bl	80008e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006cc:	4a06      	ldr	r2, [pc, #24]	@ (80006e8 <HAL_InitTick+0x5c>)
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006d2:	2300      	movs	r3, #0
 80006d4:	e000      	b.n	80006d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006d6:	2301      	movs	r3, #1
}
 80006d8:	4618      	mov	r0, r3
 80006da:	3708      	adds	r7, #8
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	20000000 	.word	0x20000000
 80006e4:	20000008 	.word	0x20000008
 80006e8:	20000004 	.word	0x20000004

080006ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006f0:	4b05      	ldr	r3, [pc, #20]	@ (8000708 <HAL_IncTick+0x1c>)
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	461a      	mov	r2, r3
 80006f6:	4b05      	ldr	r3, [pc, #20]	@ (800070c <HAL_IncTick+0x20>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	4413      	add	r3, r2
 80006fc:	4a03      	ldr	r2, [pc, #12]	@ (800070c <HAL_IncTick+0x20>)
 80006fe:	6013      	str	r3, [r2, #0]
}
 8000700:	bf00      	nop
 8000702:	46bd      	mov	sp, r7
 8000704:	bc80      	pop	{r7}
 8000706:	4770      	bx	lr
 8000708:	20000008 	.word	0x20000008
 800070c:	2000011c 	.word	0x2000011c

08000710 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  return uwTick;
 8000714:	4b02      	ldr	r3, [pc, #8]	@ (8000720 <HAL_GetTick+0x10>)
 8000716:	681b      	ldr	r3, [r3, #0]
}
 8000718:	4618      	mov	r0, r3
 800071a:	46bd      	mov	sp, r7
 800071c:	bc80      	pop	{r7}
 800071e:	4770      	bx	lr
 8000720:	2000011c 	.word	0x2000011c

08000724 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b084      	sub	sp, #16
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800072c:	f7ff fff0 	bl	8000710 <HAL_GetTick>
 8000730:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800073c:	d005      	beq.n	800074a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800073e:	4b0a      	ldr	r3, [pc, #40]	@ (8000768 <HAL_Delay+0x44>)
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	461a      	mov	r2, r3
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	4413      	add	r3, r2
 8000748:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800074a:	bf00      	nop
 800074c:	f7ff ffe0 	bl	8000710 <HAL_GetTick>
 8000750:	4602      	mov	r2, r0
 8000752:	68bb      	ldr	r3, [r7, #8]
 8000754:	1ad3      	subs	r3, r2, r3
 8000756:	68fa      	ldr	r2, [r7, #12]
 8000758:	429a      	cmp	r2, r3
 800075a:	d8f7      	bhi.n	800074c <HAL_Delay+0x28>
  {
  }
}
 800075c:	bf00      	nop
 800075e:	bf00      	nop
 8000760:	3710      	adds	r7, #16
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	20000008 	.word	0x20000008

0800076c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800076c:	b480      	push	{r7}
 800076e:	b085      	sub	sp, #20
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	f003 0307 	and.w	r3, r3, #7
 800077a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800077c:	4b0c      	ldr	r3, [pc, #48]	@ (80007b0 <__NVIC_SetPriorityGrouping+0x44>)
 800077e:	68db      	ldr	r3, [r3, #12]
 8000780:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000782:	68ba      	ldr	r2, [r7, #8]
 8000784:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000788:	4013      	ands	r3, r2
 800078a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000790:	68bb      	ldr	r3, [r7, #8]
 8000792:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000794:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000798:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800079c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800079e:	4a04      	ldr	r2, [pc, #16]	@ (80007b0 <__NVIC_SetPriorityGrouping+0x44>)
 80007a0:	68bb      	ldr	r3, [r7, #8]
 80007a2:	60d3      	str	r3, [r2, #12]
}
 80007a4:	bf00      	nop
 80007a6:	3714      	adds	r7, #20
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bc80      	pop	{r7}
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop
 80007b0:	e000ed00 	.word	0xe000ed00

080007b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007b8:	4b04      	ldr	r3, [pc, #16]	@ (80007cc <__NVIC_GetPriorityGrouping+0x18>)
 80007ba:	68db      	ldr	r3, [r3, #12]
 80007bc:	0a1b      	lsrs	r3, r3, #8
 80007be:	f003 0307 	and.w	r3, r3, #7
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bc80      	pop	{r7}
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	e000ed00 	.word	0xe000ed00

080007d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	4603      	mov	r3, r0
 80007d8:	6039      	str	r1, [r7, #0]
 80007da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	db0a      	blt.n	80007fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	b2da      	uxtb	r2, r3
 80007e8:	490c      	ldr	r1, [pc, #48]	@ (800081c <__NVIC_SetPriority+0x4c>)
 80007ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ee:	0112      	lsls	r2, r2, #4
 80007f0:	b2d2      	uxtb	r2, r2
 80007f2:	440b      	add	r3, r1
 80007f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007f8:	e00a      	b.n	8000810 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007fa:	683b      	ldr	r3, [r7, #0]
 80007fc:	b2da      	uxtb	r2, r3
 80007fe:	4908      	ldr	r1, [pc, #32]	@ (8000820 <__NVIC_SetPriority+0x50>)
 8000800:	79fb      	ldrb	r3, [r7, #7]
 8000802:	f003 030f 	and.w	r3, r3, #15
 8000806:	3b04      	subs	r3, #4
 8000808:	0112      	lsls	r2, r2, #4
 800080a:	b2d2      	uxtb	r2, r2
 800080c:	440b      	add	r3, r1
 800080e:	761a      	strb	r2, [r3, #24]
}
 8000810:	bf00      	nop
 8000812:	370c      	adds	r7, #12
 8000814:	46bd      	mov	sp, r7
 8000816:	bc80      	pop	{r7}
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	e000e100 	.word	0xe000e100
 8000820:	e000ed00 	.word	0xe000ed00

08000824 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000824:	b480      	push	{r7}
 8000826:	b089      	sub	sp, #36	@ 0x24
 8000828:	af00      	add	r7, sp, #0
 800082a:	60f8      	str	r0, [r7, #12]
 800082c:	60b9      	str	r1, [r7, #8]
 800082e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	f003 0307 	and.w	r3, r3, #7
 8000836:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000838:	69fb      	ldr	r3, [r7, #28]
 800083a:	f1c3 0307 	rsb	r3, r3, #7
 800083e:	2b04      	cmp	r3, #4
 8000840:	bf28      	it	cs
 8000842:	2304      	movcs	r3, #4
 8000844:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000846:	69fb      	ldr	r3, [r7, #28]
 8000848:	3304      	adds	r3, #4
 800084a:	2b06      	cmp	r3, #6
 800084c:	d902      	bls.n	8000854 <NVIC_EncodePriority+0x30>
 800084e:	69fb      	ldr	r3, [r7, #28]
 8000850:	3b03      	subs	r3, #3
 8000852:	e000      	b.n	8000856 <NVIC_EncodePriority+0x32>
 8000854:	2300      	movs	r3, #0
 8000856:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000858:	f04f 32ff 	mov.w	r2, #4294967295
 800085c:	69bb      	ldr	r3, [r7, #24]
 800085e:	fa02 f303 	lsl.w	r3, r2, r3
 8000862:	43da      	mvns	r2, r3
 8000864:	68bb      	ldr	r3, [r7, #8]
 8000866:	401a      	ands	r2, r3
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800086c:	f04f 31ff 	mov.w	r1, #4294967295
 8000870:	697b      	ldr	r3, [r7, #20]
 8000872:	fa01 f303 	lsl.w	r3, r1, r3
 8000876:	43d9      	mvns	r1, r3
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800087c:	4313      	orrs	r3, r2
         );
}
 800087e:	4618      	mov	r0, r3
 8000880:	3724      	adds	r7, #36	@ 0x24
 8000882:	46bd      	mov	sp, r7
 8000884:	bc80      	pop	{r7}
 8000886:	4770      	bx	lr

08000888 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	3b01      	subs	r3, #1
 8000894:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000898:	d301      	bcc.n	800089e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800089a:	2301      	movs	r3, #1
 800089c:	e00f      	b.n	80008be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800089e:	4a0a      	ldr	r2, [pc, #40]	@ (80008c8 <SysTick_Config+0x40>)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	3b01      	subs	r3, #1
 80008a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008a6:	210f      	movs	r1, #15
 80008a8:	f04f 30ff 	mov.w	r0, #4294967295
 80008ac:	f7ff ff90 	bl	80007d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008b0:	4b05      	ldr	r3, [pc, #20]	@ (80008c8 <SysTick_Config+0x40>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008b6:	4b04      	ldr	r3, [pc, #16]	@ (80008c8 <SysTick_Config+0x40>)
 80008b8:	2207      	movs	r2, #7
 80008ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008bc:	2300      	movs	r3, #0
}
 80008be:	4618      	mov	r0, r3
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	e000e010 	.word	0xe000e010

080008cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008d4:	6878      	ldr	r0, [r7, #4]
 80008d6:	f7ff ff49 	bl	800076c <__NVIC_SetPriorityGrouping>
}
 80008da:	bf00      	nop
 80008dc:	3708      	adds	r7, #8
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}

080008e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008e2:	b580      	push	{r7, lr}
 80008e4:	b086      	sub	sp, #24
 80008e6:	af00      	add	r7, sp, #0
 80008e8:	4603      	mov	r3, r0
 80008ea:	60b9      	str	r1, [r7, #8]
 80008ec:	607a      	str	r2, [r7, #4]
 80008ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008f0:	2300      	movs	r3, #0
 80008f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008f4:	f7ff ff5e 	bl	80007b4 <__NVIC_GetPriorityGrouping>
 80008f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008fa:	687a      	ldr	r2, [r7, #4]
 80008fc:	68b9      	ldr	r1, [r7, #8]
 80008fe:	6978      	ldr	r0, [r7, #20]
 8000900:	f7ff ff90 	bl	8000824 <NVIC_EncodePriority>
 8000904:	4602      	mov	r2, r0
 8000906:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800090a:	4611      	mov	r1, r2
 800090c:	4618      	mov	r0, r3
 800090e:	f7ff ff5f 	bl	80007d0 <__NVIC_SetPriority>
}
 8000912:	bf00      	nop
 8000914:	3718      	adds	r7, #24
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}

0800091a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800091a:	b580      	push	{r7, lr}
 800091c:	b082      	sub	sp, #8
 800091e:	af00      	add	r7, sp, #0
 8000920:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000922:	6878      	ldr	r0, [r7, #4]
 8000924:	f7ff ffb0 	bl	8000888 <SysTick_Config>
 8000928:	4603      	mov	r3, r0
}
 800092a:	4618      	mov	r0, r3
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}

08000932 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000932:	b580      	push	{r7, lr}
 8000934:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000936:	f001 fb81 	bl	800203c <HAL_SYSTICK_Callback>
}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
	...

08000940 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000940:	b480      	push	{r7}
 8000942:	b08b      	sub	sp, #44	@ 0x2c
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
 8000948:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800094a:	2300      	movs	r3, #0
 800094c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800094e:	2300      	movs	r3, #0
 8000950:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000952:	e169      	b.n	8000c28 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000954:	2201      	movs	r2, #1
 8000956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000958:	fa02 f303 	lsl.w	r3, r2, r3
 800095c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	69fa      	ldr	r2, [r7, #28]
 8000964:	4013      	ands	r3, r2
 8000966:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000968:	69ba      	ldr	r2, [r7, #24]
 800096a:	69fb      	ldr	r3, [r7, #28]
 800096c:	429a      	cmp	r2, r3
 800096e:	f040 8158 	bne.w	8000c22 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	685b      	ldr	r3, [r3, #4]
 8000976:	4a9a      	ldr	r2, [pc, #616]	@ (8000be0 <HAL_GPIO_Init+0x2a0>)
 8000978:	4293      	cmp	r3, r2
 800097a:	d05e      	beq.n	8000a3a <HAL_GPIO_Init+0xfa>
 800097c:	4a98      	ldr	r2, [pc, #608]	@ (8000be0 <HAL_GPIO_Init+0x2a0>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d875      	bhi.n	8000a6e <HAL_GPIO_Init+0x12e>
 8000982:	4a98      	ldr	r2, [pc, #608]	@ (8000be4 <HAL_GPIO_Init+0x2a4>)
 8000984:	4293      	cmp	r3, r2
 8000986:	d058      	beq.n	8000a3a <HAL_GPIO_Init+0xfa>
 8000988:	4a96      	ldr	r2, [pc, #600]	@ (8000be4 <HAL_GPIO_Init+0x2a4>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d86f      	bhi.n	8000a6e <HAL_GPIO_Init+0x12e>
 800098e:	4a96      	ldr	r2, [pc, #600]	@ (8000be8 <HAL_GPIO_Init+0x2a8>)
 8000990:	4293      	cmp	r3, r2
 8000992:	d052      	beq.n	8000a3a <HAL_GPIO_Init+0xfa>
 8000994:	4a94      	ldr	r2, [pc, #592]	@ (8000be8 <HAL_GPIO_Init+0x2a8>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d869      	bhi.n	8000a6e <HAL_GPIO_Init+0x12e>
 800099a:	4a94      	ldr	r2, [pc, #592]	@ (8000bec <HAL_GPIO_Init+0x2ac>)
 800099c:	4293      	cmp	r3, r2
 800099e:	d04c      	beq.n	8000a3a <HAL_GPIO_Init+0xfa>
 80009a0:	4a92      	ldr	r2, [pc, #584]	@ (8000bec <HAL_GPIO_Init+0x2ac>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d863      	bhi.n	8000a6e <HAL_GPIO_Init+0x12e>
 80009a6:	4a92      	ldr	r2, [pc, #584]	@ (8000bf0 <HAL_GPIO_Init+0x2b0>)
 80009a8:	4293      	cmp	r3, r2
 80009aa:	d046      	beq.n	8000a3a <HAL_GPIO_Init+0xfa>
 80009ac:	4a90      	ldr	r2, [pc, #576]	@ (8000bf0 <HAL_GPIO_Init+0x2b0>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d85d      	bhi.n	8000a6e <HAL_GPIO_Init+0x12e>
 80009b2:	2b12      	cmp	r3, #18
 80009b4:	d82a      	bhi.n	8000a0c <HAL_GPIO_Init+0xcc>
 80009b6:	2b12      	cmp	r3, #18
 80009b8:	d859      	bhi.n	8000a6e <HAL_GPIO_Init+0x12e>
 80009ba:	a201      	add	r2, pc, #4	@ (adr r2, 80009c0 <HAL_GPIO_Init+0x80>)
 80009bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009c0:	08000a3b 	.word	0x08000a3b
 80009c4:	08000a15 	.word	0x08000a15
 80009c8:	08000a27 	.word	0x08000a27
 80009cc:	08000a69 	.word	0x08000a69
 80009d0:	08000a6f 	.word	0x08000a6f
 80009d4:	08000a6f 	.word	0x08000a6f
 80009d8:	08000a6f 	.word	0x08000a6f
 80009dc:	08000a6f 	.word	0x08000a6f
 80009e0:	08000a6f 	.word	0x08000a6f
 80009e4:	08000a6f 	.word	0x08000a6f
 80009e8:	08000a6f 	.word	0x08000a6f
 80009ec:	08000a6f 	.word	0x08000a6f
 80009f0:	08000a6f 	.word	0x08000a6f
 80009f4:	08000a6f 	.word	0x08000a6f
 80009f8:	08000a6f 	.word	0x08000a6f
 80009fc:	08000a6f 	.word	0x08000a6f
 8000a00:	08000a6f 	.word	0x08000a6f
 8000a04:	08000a1d 	.word	0x08000a1d
 8000a08:	08000a31 	.word	0x08000a31
 8000a0c:	4a79      	ldr	r2, [pc, #484]	@ (8000bf4 <HAL_GPIO_Init+0x2b4>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d013      	beq.n	8000a3a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a12:	e02c      	b.n	8000a6e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	68db      	ldr	r3, [r3, #12]
 8000a18:	623b      	str	r3, [r7, #32]
          break;
 8000a1a:	e029      	b.n	8000a70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	68db      	ldr	r3, [r3, #12]
 8000a20:	3304      	adds	r3, #4
 8000a22:	623b      	str	r3, [r7, #32]
          break;
 8000a24:	e024      	b.n	8000a70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	68db      	ldr	r3, [r3, #12]
 8000a2a:	3308      	adds	r3, #8
 8000a2c:	623b      	str	r3, [r7, #32]
          break;
 8000a2e:	e01f      	b.n	8000a70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	68db      	ldr	r3, [r3, #12]
 8000a34:	330c      	adds	r3, #12
 8000a36:	623b      	str	r3, [r7, #32]
          break;
 8000a38:	e01a      	b.n	8000a70 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	689b      	ldr	r3, [r3, #8]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d102      	bne.n	8000a48 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a42:	2304      	movs	r3, #4
 8000a44:	623b      	str	r3, [r7, #32]
          break;
 8000a46:	e013      	b.n	8000a70 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	689b      	ldr	r3, [r3, #8]
 8000a4c:	2b01      	cmp	r3, #1
 8000a4e:	d105      	bne.n	8000a5c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a50:	2308      	movs	r3, #8
 8000a52:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	69fa      	ldr	r2, [r7, #28]
 8000a58:	611a      	str	r2, [r3, #16]
          break;
 8000a5a:	e009      	b.n	8000a70 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a5c:	2308      	movs	r3, #8
 8000a5e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	69fa      	ldr	r2, [r7, #28]
 8000a64:	615a      	str	r2, [r3, #20]
          break;
 8000a66:	e003      	b.n	8000a70 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	623b      	str	r3, [r7, #32]
          break;
 8000a6c:	e000      	b.n	8000a70 <HAL_GPIO_Init+0x130>
          break;
 8000a6e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a70:	69bb      	ldr	r3, [r7, #24]
 8000a72:	2bff      	cmp	r3, #255	@ 0xff
 8000a74:	d801      	bhi.n	8000a7a <HAL_GPIO_Init+0x13a>
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	e001      	b.n	8000a7e <HAL_GPIO_Init+0x13e>
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	3304      	adds	r3, #4
 8000a7e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a80:	69bb      	ldr	r3, [r7, #24]
 8000a82:	2bff      	cmp	r3, #255	@ 0xff
 8000a84:	d802      	bhi.n	8000a8c <HAL_GPIO_Init+0x14c>
 8000a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a88:	009b      	lsls	r3, r3, #2
 8000a8a:	e002      	b.n	8000a92 <HAL_GPIO_Init+0x152>
 8000a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a8e:	3b08      	subs	r3, #8
 8000a90:	009b      	lsls	r3, r3, #2
 8000a92:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	681a      	ldr	r2, [r3, #0]
 8000a98:	210f      	movs	r1, #15
 8000a9a:	693b      	ldr	r3, [r7, #16]
 8000a9c:	fa01 f303 	lsl.w	r3, r1, r3
 8000aa0:	43db      	mvns	r3, r3
 8000aa2:	401a      	ands	r2, r3
 8000aa4:	6a39      	ldr	r1, [r7, #32]
 8000aa6:	693b      	ldr	r3, [r7, #16]
 8000aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8000aac:	431a      	orrs	r2, r3
 8000aae:	697b      	ldr	r3, [r7, #20]
 8000ab0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	685b      	ldr	r3, [r3, #4]
 8000ab6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	f000 80b1 	beq.w	8000c22 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ac0:	4b4d      	ldr	r3, [pc, #308]	@ (8000bf8 <HAL_GPIO_Init+0x2b8>)
 8000ac2:	699b      	ldr	r3, [r3, #24]
 8000ac4:	4a4c      	ldr	r2, [pc, #304]	@ (8000bf8 <HAL_GPIO_Init+0x2b8>)
 8000ac6:	f043 0301 	orr.w	r3, r3, #1
 8000aca:	6193      	str	r3, [r2, #24]
 8000acc:	4b4a      	ldr	r3, [pc, #296]	@ (8000bf8 <HAL_GPIO_Init+0x2b8>)
 8000ace:	699b      	ldr	r3, [r3, #24]
 8000ad0:	f003 0301 	and.w	r3, r3, #1
 8000ad4:	60bb      	str	r3, [r7, #8]
 8000ad6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ad8:	4a48      	ldr	r2, [pc, #288]	@ (8000bfc <HAL_GPIO_Init+0x2bc>)
 8000ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000adc:	089b      	lsrs	r3, r3, #2
 8000ade:	3302      	adds	r3, #2
 8000ae0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ae4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ae8:	f003 0303 	and.w	r3, r3, #3
 8000aec:	009b      	lsls	r3, r3, #2
 8000aee:	220f      	movs	r2, #15
 8000af0:	fa02 f303 	lsl.w	r3, r2, r3
 8000af4:	43db      	mvns	r3, r3
 8000af6:	68fa      	ldr	r2, [r7, #12]
 8000af8:	4013      	ands	r3, r2
 8000afa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	4a40      	ldr	r2, [pc, #256]	@ (8000c00 <HAL_GPIO_Init+0x2c0>)
 8000b00:	4293      	cmp	r3, r2
 8000b02:	d013      	beq.n	8000b2c <HAL_GPIO_Init+0x1ec>
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	4a3f      	ldr	r2, [pc, #252]	@ (8000c04 <HAL_GPIO_Init+0x2c4>)
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	d00d      	beq.n	8000b28 <HAL_GPIO_Init+0x1e8>
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	4a3e      	ldr	r2, [pc, #248]	@ (8000c08 <HAL_GPIO_Init+0x2c8>)
 8000b10:	4293      	cmp	r3, r2
 8000b12:	d007      	beq.n	8000b24 <HAL_GPIO_Init+0x1e4>
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	4a3d      	ldr	r2, [pc, #244]	@ (8000c0c <HAL_GPIO_Init+0x2cc>)
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	d101      	bne.n	8000b20 <HAL_GPIO_Init+0x1e0>
 8000b1c:	2303      	movs	r3, #3
 8000b1e:	e006      	b.n	8000b2e <HAL_GPIO_Init+0x1ee>
 8000b20:	2304      	movs	r3, #4
 8000b22:	e004      	b.n	8000b2e <HAL_GPIO_Init+0x1ee>
 8000b24:	2302      	movs	r3, #2
 8000b26:	e002      	b.n	8000b2e <HAL_GPIO_Init+0x1ee>
 8000b28:	2301      	movs	r3, #1
 8000b2a:	e000      	b.n	8000b2e <HAL_GPIO_Init+0x1ee>
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b30:	f002 0203 	and.w	r2, r2, #3
 8000b34:	0092      	lsls	r2, r2, #2
 8000b36:	4093      	lsls	r3, r2
 8000b38:	68fa      	ldr	r2, [r7, #12]
 8000b3a:	4313      	orrs	r3, r2
 8000b3c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b3e:	492f      	ldr	r1, [pc, #188]	@ (8000bfc <HAL_GPIO_Init+0x2bc>)
 8000b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b42:	089b      	lsrs	r3, r3, #2
 8000b44:	3302      	adds	r3, #2
 8000b46:	68fa      	ldr	r2, [r7, #12]
 8000b48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d006      	beq.n	8000b66 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b58:	4b2d      	ldr	r3, [pc, #180]	@ (8000c10 <HAL_GPIO_Init+0x2d0>)
 8000b5a:	689a      	ldr	r2, [r3, #8]
 8000b5c:	492c      	ldr	r1, [pc, #176]	@ (8000c10 <HAL_GPIO_Init+0x2d0>)
 8000b5e:	69bb      	ldr	r3, [r7, #24]
 8000b60:	4313      	orrs	r3, r2
 8000b62:	608b      	str	r3, [r1, #8]
 8000b64:	e006      	b.n	8000b74 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b66:	4b2a      	ldr	r3, [pc, #168]	@ (8000c10 <HAL_GPIO_Init+0x2d0>)
 8000b68:	689a      	ldr	r2, [r3, #8]
 8000b6a:	69bb      	ldr	r3, [r7, #24]
 8000b6c:	43db      	mvns	r3, r3
 8000b6e:	4928      	ldr	r1, [pc, #160]	@ (8000c10 <HAL_GPIO_Init+0x2d0>)
 8000b70:	4013      	ands	r3, r2
 8000b72:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	685b      	ldr	r3, [r3, #4]
 8000b78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d006      	beq.n	8000b8e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b80:	4b23      	ldr	r3, [pc, #140]	@ (8000c10 <HAL_GPIO_Init+0x2d0>)
 8000b82:	68da      	ldr	r2, [r3, #12]
 8000b84:	4922      	ldr	r1, [pc, #136]	@ (8000c10 <HAL_GPIO_Init+0x2d0>)
 8000b86:	69bb      	ldr	r3, [r7, #24]
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	60cb      	str	r3, [r1, #12]
 8000b8c:	e006      	b.n	8000b9c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b8e:	4b20      	ldr	r3, [pc, #128]	@ (8000c10 <HAL_GPIO_Init+0x2d0>)
 8000b90:	68da      	ldr	r2, [r3, #12]
 8000b92:	69bb      	ldr	r3, [r7, #24]
 8000b94:	43db      	mvns	r3, r3
 8000b96:	491e      	ldr	r1, [pc, #120]	@ (8000c10 <HAL_GPIO_Init+0x2d0>)
 8000b98:	4013      	ands	r3, r2
 8000b9a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d006      	beq.n	8000bb6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ba8:	4b19      	ldr	r3, [pc, #100]	@ (8000c10 <HAL_GPIO_Init+0x2d0>)
 8000baa:	685a      	ldr	r2, [r3, #4]
 8000bac:	4918      	ldr	r1, [pc, #96]	@ (8000c10 <HAL_GPIO_Init+0x2d0>)
 8000bae:	69bb      	ldr	r3, [r7, #24]
 8000bb0:	4313      	orrs	r3, r2
 8000bb2:	604b      	str	r3, [r1, #4]
 8000bb4:	e006      	b.n	8000bc4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000bb6:	4b16      	ldr	r3, [pc, #88]	@ (8000c10 <HAL_GPIO_Init+0x2d0>)
 8000bb8:	685a      	ldr	r2, [r3, #4]
 8000bba:	69bb      	ldr	r3, [r7, #24]
 8000bbc:	43db      	mvns	r3, r3
 8000bbe:	4914      	ldr	r1, [pc, #80]	@ (8000c10 <HAL_GPIO_Init+0x2d0>)
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d021      	beq.n	8000c14 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000bd0:	4b0f      	ldr	r3, [pc, #60]	@ (8000c10 <HAL_GPIO_Init+0x2d0>)
 8000bd2:	681a      	ldr	r2, [r3, #0]
 8000bd4:	490e      	ldr	r1, [pc, #56]	@ (8000c10 <HAL_GPIO_Init+0x2d0>)
 8000bd6:	69bb      	ldr	r3, [r7, #24]
 8000bd8:	4313      	orrs	r3, r2
 8000bda:	600b      	str	r3, [r1, #0]
 8000bdc:	e021      	b.n	8000c22 <HAL_GPIO_Init+0x2e2>
 8000bde:	bf00      	nop
 8000be0:	10320000 	.word	0x10320000
 8000be4:	10310000 	.word	0x10310000
 8000be8:	10220000 	.word	0x10220000
 8000bec:	10210000 	.word	0x10210000
 8000bf0:	10120000 	.word	0x10120000
 8000bf4:	10110000 	.word	0x10110000
 8000bf8:	40021000 	.word	0x40021000
 8000bfc:	40010000 	.word	0x40010000
 8000c00:	40010800 	.word	0x40010800
 8000c04:	40010c00 	.word	0x40010c00
 8000c08:	40011000 	.word	0x40011000
 8000c0c:	40011400 	.word	0x40011400
 8000c10:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c14:	4b0b      	ldr	r3, [pc, #44]	@ (8000c44 <HAL_GPIO_Init+0x304>)
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	69bb      	ldr	r3, [r7, #24]
 8000c1a:	43db      	mvns	r3, r3
 8000c1c:	4909      	ldr	r1, [pc, #36]	@ (8000c44 <HAL_GPIO_Init+0x304>)
 8000c1e:	4013      	ands	r3, r2
 8000c20:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c24:	3301      	adds	r3, #1
 8000c26:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	681a      	ldr	r2, [r3, #0]
 8000c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c2e:	fa22 f303 	lsr.w	r3, r2, r3
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	f47f ae8e 	bne.w	8000954 <HAL_GPIO_Init+0x14>
  }
}
 8000c38:	bf00      	nop
 8000c3a:	bf00      	nop
 8000c3c:	372c      	adds	r7, #44	@ 0x2c
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bc80      	pop	{r7}
 8000c42:	4770      	bx	lr
 8000c44:	40010400 	.word	0x40010400

08000c48 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b085      	sub	sp, #20
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
 8000c50:	460b      	mov	r3, r1
 8000c52:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	689a      	ldr	r2, [r3, #8]
 8000c58:	887b      	ldrh	r3, [r7, #2]
 8000c5a:	4013      	ands	r3, r2
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d002      	beq.n	8000c66 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000c60:	2301      	movs	r3, #1
 8000c62:	73fb      	strb	r3, [r7, #15]
 8000c64:	e001      	b.n	8000c6a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000c66:	2300      	movs	r3, #0
 8000c68:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000c6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3714      	adds	r7, #20
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bc80      	pop	{r7}
 8000c74:	4770      	bx	lr

08000c76 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c76:	b480      	push	{r7}
 8000c78:	b083      	sub	sp, #12
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	6078      	str	r0, [r7, #4]
 8000c7e:	460b      	mov	r3, r1
 8000c80:	807b      	strh	r3, [r7, #2]
 8000c82:	4613      	mov	r3, r2
 8000c84:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c86:	787b      	ldrb	r3, [r7, #1]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d003      	beq.n	8000c94 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c8c:	887a      	ldrh	r2, [r7, #2]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000c92:	e003      	b.n	8000c9c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c94:	887b      	ldrh	r3, [r7, #2]
 8000c96:	041a      	lsls	r2, r3, #16
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	611a      	str	r2, [r3, #16]
}
 8000c9c:	bf00      	nop
 8000c9e:	370c      	adds	r7, #12
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bc80      	pop	{r7}
 8000ca4:	4770      	bx	lr
	...

08000ca8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d101      	bne.n	8000cba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	e12b      	b.n	8000f12 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000cc0:	b2db      	uxtb	r3, r3
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d106      	bne.n	8000cd4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2200      	movs	r2, #0
 8000cca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000cce:	6878      	ldr	r0, [r7, #4]
 8000cd0:	f7ff fb80 	bl	80003d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	2224      	movs	r2, #36	@ 0x24
 8000cd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f022 0201 	bic.w	r2, r2, #1
 8000cea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000cfa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	681a      	ldr	r2, [r3, #0]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000d0a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000d0c:	f001 f832 	bl	8001d74 <HAL_RCC_GetPCLK1Freq>
 8000d10:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	4a81      	ldr	r2, [pc, #516]	@ (8000f1c <HAL_I2C_Init+0x274>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d807      	bhi.n	8000d2c <HAL_I2C_Init+0x84>
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	4a80      	ldr	r2, [pc, #512]	@ (8000f20 <HAL_I2C_Init+0x278>)
 8000d20:	4293      	cmp	r3, r2
 8000d22:	bf94      	ite	ls
 8000d24:	2301      	movls	r3, #1
 8000d26:	2300      	movhi	r3, #0
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	e006      	b.n	8000d3a <HAL_I2C_Init+0x92>
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	4a7d      	ldr	r2, [pc, #500]	@ (8000f24 <HAL_I2C_Init+0x27c>)
 8000d30:	4293      	cmp	r3, r2
 8000d32:	bf94      	ite	ls
 8000d34:	2301      	movls	r3, #1
 8000d36:	2300      	movhi	r3, #0
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	e0e7      	b.n	8000f12 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	4a78      	ldr	r2, [pc, #480]	@ (8000f28 <HAL_I2C_Init+0x280>)
 8000d46:	fba2 2303 	umull	r2, r3, r2, r3
 8000d4a:	0c9b      	lsrs	r3, r3, #18
 8000d4c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	68ba      	ldr	r2, [r7, #8]
 8000d5e:	430a      	orrs	r2, r1
 8000d60:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	6a1b      	ldr	r3, [r3, #32]
 8000d68:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	4a6a      	ldr	r2, [pc, #424]	@ (8000f1c <HAL_I2C_Init+0x274>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d802      	bhi.n	8000d7c <HAL_I2C_Init+0xd4>
 8000d76:	68bb      	ldr	r3, [r7, #8]
 8000d78:	3301      	adds	r3, #1
 8000d7a:	e009      	b.n	8000d90 <HAL_I2C_Init+0xe8>
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000d82:	fb02 f303 	mul.w	r3, r2, r3
 8000d86:	4a69      	ldr	r2, [pc, #420]	@ (8000f2c <HAL_I2C_Init+0x284>)
 8000d88:	fba2 2303 	umull	r2, r3, r2, r3
 8000d8c:	099b      	lsrs	r3, r3, #6
 8000d8e:	3301      	adds	r3, #1
 8000d90:	687a      	ldr	r2, [r7, #4]
 8000d92:	6812      	ldr	r2, [r2, #0]
 8000d94:	430b      	orrs	r3, r1
 8000d96:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	69db      	ldr	r3, [r3, #28]
 8000d9e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8000da2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	495c      	ldr	r1, [pc, #368]	@ (8000f1c <HAL_I2C_Init+0x274>)
 8000dac:	428b      	cmp	r3, r1
 8000dae:	d819      	bhi.n	8000de4 <HAL_I2C_Init+0x13c>
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	1e59      	subs	r1, r3, #1
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	fbb1 f3f3 	udiv	r3, r1, r3
 8000dbe:	1c59      	adds	r1, r3, #1
 8000dc0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8000dc4:	400b      	ands	r3, r1
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d00a      	beq.n	8000de0 <HAL_I2C_Init+0x138>
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	1e59      	subs	r1, r3, #1
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	005b      	lsls	r3, r3, #1
 8000dd4:	fbb1 f3f3 	udiv	r3, r1, r3
 8000dd8:	3301      	adds	r3, #1
 8000dda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000dde:	e051      	b.n	8000e84 <HAL_I2C_Init+0x1dc>
 8000de0:	2304      	movs	r3, #4
 8000de2:	e04f      	b.n	8000e84 <HAL_I2C_Init+0x1dc>
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	689b      	ldr	r3, [r3, #8]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d111      	bne.n	8000e10 <HAL_I2C_Init+0x168>
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	1e58      	subs	r0, r3, #1
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6859      	ldr	r1, [r3, #4]
 8000df4:	460b      	mov	r3, r1
 8000df6:	005b      	lsls	r3, r3, #1
 8000df8:	440b      	add	r3, r1
 8000dfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8000dfe:	3301      	adds	r3, #1
 8000e00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	bf0c      	ite	eq
 8000e08:	2301      	moveq	r3, #1
 8000e0a:	2300      	movne	r3, #0
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	e012      	b.n	8000e36 <HAL_I2C_Init+0x18e>
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	1e58      	subs	r0, r3, #1
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6859      	ldr	r1, [r3, #4]
 8000e18:	460b      	mov	r3, r1
 8000e1a:	009b      	lsls	r3, r3, #2
 8000e1c:	440b      	add	r3, r1
 8000e1e:	0099      	lsls	r1, r3, #2
 8000e20:	440b      	add	r3, r1
 8000e22:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e26:	3301      	adds	r3, #1
 8000e28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	bf0c      	ite	eq
 8000e30:	2301      	moveq	r3, #1
 8000e32:	2300      	movne	r3, #0
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <HAL_I2C_Init+0x196>
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	e022      	b.n	8000e84 <HAL_I2C_Init+0x1dc>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	689b      	ldr	r3, [r3, #8]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d10e      	bne.n	8000e64 <HAL_I2C_Init+0x1bc>
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	1e58      	subs	r0, r3, #1
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	6859      	ldr	r1, [r3, #4]
 8000e4e:	460b      	mov	r3, r1
 8000e50:	005b      	lsls	r3, r3, #1
 8000e52:	440b      	add	r3, r1
 8000e54:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e58:	3301      	adds	r3, #1
 8000e5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000e62:	e00f      	b.n	8000e84 <HAL_I2C_Init+0x1dc>
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	1e58      	subs	r0, r3, #1
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6859      	ldr	r1, [r3, #4]
 8000e6c:	460b      	mov	r3, r1
 8000e6e:	009b      	lsls	r3, r3, #2
 8000e70:	440b      	add	r3, r1
 8000e72:	0099      	lsls	r1, r3, #2
 8000e74:	440b      	add	r3, r1
 8000e76:	fbb0 f3f3 	udiv	r3, r0, r3
 8000e7a:	3301      	adds	r3, #1
 8000e7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000e80:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000e84:	6879      	ldr	r1, [r7, #4]
 8000e86:	6809      	ldr	r1, [r1, #0]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	69da      	ldr	r2, [r3, #28]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	6a1b      	ldr	r3, [r3, #32]
 8000e9e:	431a      	orrs	r2, r3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	430a      	orrs	r2, r1
 8000ea6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	689b      	ldr	r3, [r3, #8]
 8000eae:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8000eb2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000eb6:	687a      	ldr	r2, [r7, #4]
 8000eb8:	6911      	ldr	r1, [r2, #16]
 8000eba:	687a      	ldr	r2, [r7, #4]
 8000ebc:	68d2      	ldr	r2, [r2, #12]
 8000ebe:	4311      	orrs	r1, r2
 8000ec0:	687a      	ldr	r2, [r7, #4]
 8000ec2:	6812      	ldr	r2, [r2, #0]
 8000ec4:	430b      	orrs	r3, r1
 8000ec6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	68db      	ldr	r3, [r3, #12]
 8000ece:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	695a      	ldr	r2, [r3, #20]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	699b      	ldr	r3, [r3, #24]
 8000eda:	431a      	orrs	r2, r3
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	430a      	orrs	r2, r1
 8000ee2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f042 0201 	orr.w	r2, r2, #1
 8000ef2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2220      	movs	r2, #32
 8000efe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2200      	movs	r2, #0
 8000f06:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8000f10:	2300      	movs	r3, #0
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3710      	adds	r7, #16
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	000186a0 	.word	0x000186a0
 8000f20:	001e847f 	.word	0x001e847f
 8000f24:	003d08ff 	.word	0x003d08ff
 8000f28:	431bde83 	.word	0x431bde83
 8000f2c:	10624dd3 	.word	0x10624dd3

08000f30 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b088      	sub	sp, #32
 8000f34:	af02      	add	r7, sp, #8
 8000f36:	60f8      	str	r0, [r7, #12]
 8000f38:	607a      	str	r2, [r7, #4]
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	460b      	mov	r3, r1
 8000f3e:	817b      	strh	r3, [r7, #10]
 8000f40:	4613      	mov	r3, r2
 8000f42:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8000f44:	f7ff fbe4 	bl	8000710 <HAL_GetTick>
 8000f48:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	2b20      	cmp	r3, #32
 8000f54:	f040 80e0 	bne.w	8001118 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	9300      	str	r3, [sp, #0]
 8000f5c:	2319      	movs	r3, #25
 8000f5e:	2201      	movs	r2, #1
 8000f60:	4970      	ldr	r1, [pc, #448]	@ (8001124 <HAL_I2C_Master_Transmit+0x1f4>)
 8000f62:	68f8      	ldr	r0, [r7, #12]
 8000f64:	f000 f964 	bl	8001230 <I2C_WaitOnFlagUntilTimeout>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8000f6e:	2302      	movs	r3, #2
 8000f70:	e0d3      	b.n	800111a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d101      	bne.n	8000f80 <HAL_I2C_Master_Transmit+0x50>
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	e0cc      	b.n	800111a <HAL_I2C_Master_Transmit+0x1ea>
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	2201      	movs	r2, #1
 8000f84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f003 0301 	and.w	r3, r3, #1
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d007      	beq.n	8000fa6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f042 0201 	orr.w	r2, r2, #1
 8000fa4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000fb4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	2221      	movs	r2, #33	@ 0x21
 8000fba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	2210      	movs	r2, #16
 8000fc2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	2200      	movs	r2, #0
 8000fca:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	687a      	ldr	r2, [r7, #4]
 8000fd0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	893a      	ldrh	r2, [r7, #8]
 8000fd6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000fdc:	b29a      	uxth	r2, r3
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	4a50      	ldr	r2, [pc, #320]	@ (8001128 <HAL_I2C_Master_Transmit+0x1f8>)
 8000fe6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8000fe8:	8979      	ldrh	r1, [r7, #10]
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	6a3a      	ldr	r2, [r7, #32]
 8000fee:	68f8      	ldr	r0, [r7, #12]
 8000ff0:	f000 f89c 	bl	800112c <I2C_MasterRequestWrite>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e08d      	b.n	800111a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000ffe:	2300      	movs	r3, #0
 8001000:	613b      	str	r3, [r7, #16]
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	695b      	ldr	r3, [r3, #20]
 8001008:	613b      	str	r3, [r7, #16]
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	699b      	ldr	r3, [r3, #24]
 8001010:	613b      	str	r3, [r7, #16]
 8001012:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001014:	e066      	b.n	80010e4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001016:	697a      	ldr	r2, [r7, #20]
 8001018:	6a39      	ldr	r1, [r7, #32]
 800101a:	68f8      	ldr	r0, [r7, #12]
 800101c:	f000 fa22 	bl	8001464 <I2C_WaitOnTXEFlagUntilTimeout>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d00d      	beq.n	8001042 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800102a:	2b04      	cmp	r3, #4
 800102c:	d107      	bne.n	800103e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800103c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800103e:	2301      	movs	r3, #1
 8001040:	e06b      	b.n	800111a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001046:	781a      	ldrb	r2, [r3, #0]
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001052:	1c5a      	adds	r2, r3, #1
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800105c:	b29b      	uxth	r3, r3
 800105e:	3b01      	subs	r3, #1
 8001060:	b29a      	uxth	r2, r3
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800106a:	3b01      	subs	r3, #1
 800106c:	b29a      	uxth	r2, r3
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	695b      	ldr	r3, [r3, #20]
 8001078:	f003 0304 	and.w	r3, r3, #4
 800107c:	2b04      	cmp	r3, #4
 800107e:	d11b      	bne.n	80010b8 <HAL_I2C_Master_Transmit+0x188>
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001084:	2b00      	cmp	r3, #0
 8001086:	d017      	beq.n	80010b8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800108c:	781a      	ldrb	r2, [r3, #0]
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001098:	1c5a      	adds	r2, r3, #1
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80010a2:	b29b      	uxth	r3, r3
 80010a4:	3b01      	subs	r3, #1
 80010a6:	b29a      	uxth	r2, r3
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80010b0:	3b01      	subs	r3, #1
 80010b2:	b29a      	uxth	r2, r3
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80010b8:	697a      	ldr	r2, [r7, #20]
 80010ba:	6a39      	ldr	r1, [r7, #32]
 80010bc:	68f8      	ldr	r0, [r7, #12]
 80010be:	f000 fa19 	bl	80014f4 <I2C_WaitOnBTFFlagUntilTimeout>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d00d      	beq.n	80010e4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010cc:	2b04      	cmp	r3, #4
 80010ce:	d107      	bne.n	80010e0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80010de:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80010e0:	2301      	movs	r3, #1
 80010e2:	e01a      	b.n	800111a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d194      	bne.n	8001016 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80010fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	2220      	movs	r2, #32
 8001100:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	2200      	movs	r2, #0
 8001108:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	2200      	movs	r2, #0
 8001110:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001114:	2300      	movs	r3, #0
 8001116:	e000      	b.n	800111a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001118:	2302      	movs	r3, #2
  }
}
 800111a:	4618      	mov	r0, r3
 800111c:	3718      	adds	r7, #24
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	00100002 	.word	0x00100002
 8001128:	ffff0000 	.word	0xffff0000

0800112c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b088      	sub	sp, #32
 8001130:	af02      	add	r7, sp, #8
 8001132:	60f8      	str	r0, [r7, #12]
 8001134:	607a      	str	r2, [r7, #4]
 8001136:	603b      	str	r3, [r7, #0]
 8001138:	460b      	mov	r3, r1
 800113a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001140:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	2b08      	cmp	r3, #8
 8001146:	d006      	beq.n	8001156 <I2C_MasterRequestWrite+0x2a>
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	2b01      	cmp	r3, #1
 800114c:	d003      	beq.n	8001156 <I2C_MasterRequestWrite+0x2a>
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001154:	d108      	bne.n	8001168 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001164:	601a      	str	r2, [r3, #0]
 8001166:	e00b      	b.n	8001180 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116c:	2b12      	cmp	r3, #18
 800116e:	d107      	bne.n	8001180 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800117e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	9300      	str	r3, [sp, #0]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2200      	movs	r2, #0
 8001188:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800118c:	68f8      	ldr	r0, [r7, #12]
 800118e:	f000 f84f 	bl	8001230 <I2C_WaitOnFlagUntilTimeout>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d00d      	beq.n	80011b4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80011a6:	d103      	bne.n	80011b0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011ae:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80011b0:	2303      	movs	r3, #3
 80011b2:	e035      	b.n	8001220 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	691b      	ldr	r3, [r3, #16]
 80011b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80011bc:	d108      	bne.n	80011d0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80011be:	897b      	ldrh	r3, [r7, #10]
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	461a      	mov	r2, r3
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80011cc:	611a      	str	r2, [r3, #16]
 80011ce:	e01b      	b.n	8001208 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80011d0:	897b      	ldrh	r3, [r7, #10]
 80011d2:	11db      	asrs	r3, r3, #7
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	f003 0306 	and.w	r3, r3, #6
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	f063 030f 	orn	r3, r3, #15
 80011e0:	b2da      	uxtb	r2, r3
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	490e      	ldr	r1, [pc, #56]	@ (8001228 <I2C_MasterRequestWrite+0xfc>)
 80011ee:	68f8      	ldr	r0, [r7, #12]
 80011f0:	f000 f898 	bl	8001324 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e010      	b.n	8001220 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80011fe:	897b      	ldrh	r3, [r7, #10]
 8001200:	b2da      	uxtb	r2, r3
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	687a      	ldr	r2, [r7, #4]
 800120c:	4907      	ldr	r1, [pc, #28]	@ (800122c <I2C_MasterRequestWrite+0x100>)
 800120e:	68f8      	ldr	r0, [r7, #12]
 8001210:	f000 f888 	bl	8001324 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	e000      	b.n	8001220 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800121e:	2300      	movs	r3, #0
}
 8001220:	4618      	mov	r0, r3
 8001222:	3718      	adds	r7, #24
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	00010008 	.word	0x00010008
 800122c:	00010002 	.word	0x00010002

08001230 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	60f8      	str	r0, [r7, #12]
 8001238:	60b9      	str	r1, [r7, #8]
 800123a:	603b      	str	r3, [r7, #0]
 800123c:	4613      	mov	r3, r2
 800123e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001240:	e048      	b.n	80012d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001248:	d044      	beq.n	80012d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800124a:	f7ff fa61 	bl	8000710 <HAL_GetTick>
 800124e:	4602      	mov	r2, r0
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	1ad3      	subs	r3, r2, r3
 8001254:	683a      	ldr	r2, [r7, #0]
 8001256:	429a      	cmp	r2, r3
 8001258:	d302      	bcc.n	8001260 <I2C_WaitOnFlagUntilTimeout+0x30>
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d139      	bne.n	80012d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	0c1b      	lsrs	r3, r3, #16
 8001264:	b2db      	uxtb	r3, r3
 8001266:	2b01      	cmp	r3, #1
 8001268:	d10d      	bne.n	8001286 <I2C_WaitOnFlagUntilTimeout+0x56>
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	695b      	ldr	r3, [r3, #20]
 8001270:	43da      	mvns	r2, r3
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	4013      	ands	r3, r2
 8001276:	b29b      	uxth	r3, r3
 8001278:	2b00      	cmp	r3, #0
 800127a:	bf0c      	ite	eq
 800127c:	2301      	moveq	r3, #1
 800127e:	2300      	movne	r3, #0
 8001280:	b2db      	uxtb	r3, r3
 8001282:	461a      	mov	r2, r3
 8001284:	e00c      	b.n	80012a0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	699b      	ldr	r3, [r3, #24]
 800128c:	43da      	mvns	r2, r3
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	4013      	ands	r3, r2
 8001292:	b29b      	uxth	r3, r3
 8001294:	2b00      	cmp	r3, #0
 8001296:	bf0c      	ite	eq
 8001298:	2301      	moveq	r3, #1
 800129a:	2300      	movne	r3, #0
 800129c:	b2db      	uxtb	r3, r3
 800129e:	461a      	mov	r2, r3
 80012a0:	79fb      	ldrb	r3, [r7, #7]
 80012a2:	429a      	cmp	r2, r3
 80012a4:	d116      	bne.n	80012d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	2200      	movs	r2, #0
 80012aa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	2220      	movs	r2, #32
 80012b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	2200      	movs	r2, #0
 80012b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012c0:	f043 0220 	orr.w	r2, r3, #32
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	2200      	movs	r2, #0
 80012cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	e023      	b.n	800131c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	0c1b      	lsrs	r3, r3, #16
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d10d      	bne.n	80012fa <I2C_WaitOnFlagUntilTimeout+0xca>
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	695b      	ldr	r3, [r3, #20]
 80012e4:	43da      	mvns	r2, r3
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	4013      	ands	r3, r2
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	bf0c      	ite	eq
 80012f0:	2301      	moveq	r3, #1
 80012f2:	2300      	movne	r3, #0
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	461a      	mov	r2, r3
 80012f8:	e00c      	b.n	8001314 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	699b      	ldr	r3, [r3, #24]
 8001300:	43da      	mvns	r2, r3
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	4013      	ands	r3, r2
 8001306:	b29b      	uxth	r3, r3
 8001308:	2b00      	cmp	r3, #0
 800130a:	bf0c      	ite	eq
 800130c:	2301      	moveq	r3, #1
 800130e:	2300      	movne	r3, #0
 8001310:	b2db      	uxtb	r3, r3
 8001312:	461a      	mov	r2, r3
 8001314:	79fb      	ldrb	r3, [r7, #7]
 8001316:	429a      	cmp	r2, r3
 8001318:	d093      	beq.n	8001242 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800131a:	2300      	movs	r3, #0
}
 800131c:	4618      	mov	r0, r3
 800131e:	3710      	adds	r7, #16
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}

08001324 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	60b9      	str	r1, [r7, #8]
 800132e:	607a      	str	r2, [r7, #4]
 8001330:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001332:	e071      	b.n	8001418 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	695b      	ldr	r3, [r3, #20]
 800133a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800133e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001342:	d123      	bne.n	800138c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001352:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800135c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	2200      	movs	r2, #0
 8001362:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	2220      	movs	r2, #32
 8001368:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	2200      	movs	r2, #0
 8001370:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001378:	f043 0204 	orr.w	r2, r3, #4
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	2200      	movs	r2, #0
 8001384:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	e067      	b.n	800145c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001392:	d041      	beq.n	8001418 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001394:	f7ff f9bc 	bl	8000710 <HAL_GetTick>
 8001398:	4602      	mov	r2, r0
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	687a      	ldr	r2, [r7, #4]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d302      	bcc.n	80013aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d136      	bne.n	8001418 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	0c1b      	lsrs	r3, r3, #16
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d10c      	bne.n	80013ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	695b      	ldr	r3, [r3, #20]
 80013ba:	43da      	mvns	r2, r3
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	4013      	ands	r3, r2
 80013c0:	b29b      	uxth	r3, r3
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	bf14      	ite	ne
 80013c6:	2301      	movne	r3, #1
 80013c8:	2300      	moveq	r3, #0
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	e00b      	b.n	80013e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	699b      	ldr	r3, [r3, #24]
 80013d4:	43da      	mvns	r2, r3
 80013d6:	68bb      	ldr	r3, [r7, #8]
 80013d8:	4013      	ands	r3, r2
 80013da:	b29b      	uxth	r3, r3
 80013dc:	2b00      	cmp	r3, #0
 80013de:	bf14      	ite	ne
 80013e0:	2301      	movne	r3, #1
 80013e2:	2300      	moveq	r3, #0
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d016      	beq.n	8001418 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	2200      	movs	r2, #0
 80013ee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	2220      	movs	r2, #32
 80013f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	2200      	movs	r2, #0
 80013fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001404:	f043 0220 	orr.w	r2, r3, #32
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	2200      	movs	r2, #0
 8001410:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001414:	2301      	movs	r3, #1
 8001416:	e021      	b.n	800145c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	0c1b      	lsrs	r3, r3, #16
 800141c:	b2db      	uxtb	r3, r3
 800141e:	2b01      	cmp	r3, #1
 8001420:	d10c      	bne.n	800143c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	695b      	ldr	r3, [r3, #20]
 8001428:	43da      	mvns	r2, r3
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	4013      	ands	r3, r2
 800142e:	b29b      	uxth	r3, r3
 8001430:	2b00      	cmp	r3, #0
 8001432:	bf14      	ite	ne
 8001434:	2301      	movne	r3, #1
 8001436:	2300      	moveq	r3, #0
 8001438:	b2db      	uxtb	r3, r3
 800143a:	e00b      	b.n	8001454 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	699b      	ldr	r3, [r3, #24]
 8001442:	43da      	mvns	r2, r3
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	4013      	ands	r3, r2
 8001448:	b29b      	uxth	r3, r3
 800144a:	2b00      	cmp	r3, #0
 800144c:	bf14      	ite	ne
 800144e:	2301      	movne	r3, #1
 8001450:	2300      	moveq	r3, #0
 8001452:	b2db      	uxtb	r3, r3
 8001454:	2b00      	cmp	r3, #0
 8001456:	f47f af6d 	bne.w	8001334 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800145a:	2300      	movs	r3, #0
}
 800145c:	4618      	mov	r0, r3
 800145e:	3710      	adds	r7, #16
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}

08001464 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001470:	e034      	b.n	80014dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001472:	68f8      	ldr	r0, [r7, #12]
 8001474:	f000 f886 	bl	8001584 <I2C_IsAcknowledgeFailed>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e034      	b.n	80014ec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001488:	d028      	beq.n	80014dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800148a:	f7ff f941 	bl	8000710 <HAL_GetTick>
 800148e:	4602      	mov	r2, r0
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	68ba      	ldr	r2, [r7, #8]
 8001496:	429a      	cmp	r2, r3
 8001498:	d302      	bcc.n	80014a0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800149a:	68bb      	ldr	r3, [r7, #8]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d11d      	bne.n	80014dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	695b      	ldr	r3, [r3, #20]
 80014a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014aa:	2b80      	cmp	r3, #128	@ 0x80
 80014ac:	d016      	beq.n	80014dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	2200      	movs	r2, #0
 80014b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	2220      	movs	r2, #32
 80014b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	2200      	movs	r2, #0
 80014c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c8:	f043 0220 	orr.w	r2, r3, #32
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	2200      	movs	r2, #0
 80014d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	e007      	b.n	80014ec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	695b      	ldr	r3, [r3, #20]
 80014e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014e6:	2b80      	cmp	r3, #128	@ 0x80
 80014e8:	d1c3      	bne.n	8001472 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80014ea:	2300      	movs	r3, #0
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3710      	adds	r7, #16
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	60b9      	str	r1, [r7, #8]
 80014fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001500:	e034      	b.n	800156c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001502:	68f8      	ldr	r0, [r7, #12]
 8001504:	f000 f83e 	bl	8001584 <I2C_IsAcknowledgeFailed>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e034      	b.n	800157c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001518:	d028      	beq.n	800156c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800151a:	f7ff f8f9 	bl	8000710 <HAL_GetTick>
 800151e:	4602      	mov	r2, r0
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	68ba      	ldr	r2, [r7, #8]
 8001526:	429a      	cmp	r2, r3
 8001528:	d302      	bcc.n	8001530 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d11d      	bne.n	800156c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	695b      	ldr	r3, [r3, #20]
 8001536:	f003 0304 	and.w	r3, r3, #4
 800153a:	2b04      	cmp	r3, #4
 800153c:	d016      	beq.n	800156c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	2200      	movs	r2, #0
 8001542:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	2220      	movs	r2, #32
 8001548:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	2200      	movs	r2, #0
 8001550:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001558:	f043 0220 	orr.w	r2, r3, #32
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	2200      	movs	r2, #0
 8001564:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	e007      	b.n	800157c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	695b      	ldr	r3, [r3, #20]
 8001572:	f003 0304 	and.w	r3, r3, #4
 8001576:	2b04      	cmp	r3, #4
 8001578:	d1c3      	bne.n	8001502 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800157a:	2300      	movs	r3, #0
}
 800157c:	4618      	mov	r0, r3
 800157e:	3710      	adds	r7, #16
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}

08001584 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	695b      	ldr	r3, [r3, #20]
 8001592:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001596:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800159a:	d11b      	bne.n	80015d4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80015a4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2200      	movs	r2, #0
 80015aa:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2220      	movs	r2, #32
 80015b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2200      	movs	r2, #0
 80015b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015c0:	f043 0204 	orr.w	r2, r3, #4
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2200      	movs	r2, #0
 80015cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	e000      	b.n	80015d6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80015d4:	2300      	movs	r3, #0
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	bc80      	pop	{r7}
 80015de:	4770      	bx	lr

080015e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b086      	sub	sp, #24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d101      	bne.n	80015f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e272      	b.n	8001ad8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0301 	and.w	r3, r3, #1
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	f000 8087 	beq.w	800170e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001600:	4b92      	ldr	r3, [pc, #584]	@ (800184c <HAL_RCC_OscConfig+0x26c>)
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f003 030c 	and.w	r3, r3, #12
 8001608:	2b04      	cmp	r3, #4
 800160a:	d00c      	beq.n	8001626 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800160c:	4b8f      	ldr	r3, [pc, #572]	@ (800184c <HAL_RCC_OscConfig+0x26c>)
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f003 030c 	and.w	r3, r3, #12
 8001614:	2b08      	cmp	r3, #8
 8001616:	d112      	bne.n	800163e <HAL_RCC_OscConfig+0x5e>
 8001618:	4b8c      	ldr	r3, [pc, #560]	@ (800184c <HAL_RCC_OscConfig+0x26c>)
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001620:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001624:	d10b      	bne.n	800163e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001626:	4b89      	ldr	r3, [pc, #548]	@ (800184c <HAL_RCC_OscConfig+0x26c>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d06c      	beq.n	800170c <HAL_RCC_OscConfig+0x12c>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d168      	bne.n	800170c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e24c      	b.n	8001ad8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001646:	d106      	bne.n	8001656 <HAL_RCC_OscConfig+0x76>
 8001648:	4b80      	ldr	r3, [pc, #512]	@ (800184c <HAL_RCC_OscConfig+0x26c>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a7f      	ldr	r2, [pc, #508]	@ (800184c <HAL_RCC_OscConfig+0x26c>)
 800164e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001652:	6013      	str	r3, [r2, #0]
 8001654:	e02e      	b.n	80016b4 <HAL_RCC_OscConfig+0xd4>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d10c      	bne.n	8001678 <HAL_RCC_OscConfig+0x98>
 800165e:	4b7b      	ldr	r3, [pc, #492]	@ (800184c <HAL_RCC_OscConfig+0x26c>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a7a      	ldr	r2, [pc, #488]	@ (800184c <HAL_RCC_OscConfig+0x26c>)
 8001664:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001668:	6013      	str	r3, [r2, #0]
 800166a:	4b78      	ldr	r3, [pc, #480]	@ (800184c <HAL_RCC_OscConfig+0x26c>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a77      	ldr	r2, [pc, #476]	@ (800184c <HAL_RCC_OscConfig+0x26c>)
 8001670:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001674:	6013      	str	r3, [r2, #0]
 8001676:	e01d      	b.n	80016b4 <HAL_RCC_OscConfig+0xd4>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001680:	d10c      	bne.n	800169c <HAL_RCC_OscConfig+0xbc>
 8001682:	4b72      	ldr	r3, [pc, #456]	@ (800184c <HAL_RCC_OscConfig+0x26c>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a71      	ldr	r2, [pc, #452]	@ (800184c <HAL_RCC_OscConfig+0x26c>)
 8001688:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800168c:	6013      	str	r3, [r2, #0]
 800168e:	4b6f      	ldr	r3, [pc, #444]	@ (800184c <HAL_RCC_OscConfig+0x26c>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a6e      	ldr	r2, [pc, #440]	@ (800184c <HAL_RCC_OscConfig+0x26c>)
 8001694:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001698:	6013      	str	r3, [r2, #0]
 800169a:	e00b      	b.n	80016b4 <HAL_RCC_OscConfig+0xd4>
 800169c:	4b6b      	ldr	r3, [pc, #428]	@ (800184c <HAL_RCC_OscConfig+0x26c>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a6a      	ldr	r2, [pc, #424]	@ (800184c <HAL_RCC_OscConfig+0x26c>)
 80016a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016a6:	6013      	str	r3, [r2, #0]
 80016a8:	4b68      	ldr	r3, [pc, #416]	@ (800184c <HAL_RCC_OscConfig+0x26c>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a67      	ldr	r2, [pc, #412]	@ (800184c <HAL_RCC_OscConfig+0x26c>)
 80016ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016b2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d013      	beq.n	80016e4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016bc:	f7ff f828 	bl	8000710 <HAL_GetTick>
 80016c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016c2:	e008      	b.n	80016d6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016c4:	f7ff f824 	bl	8000710 <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	2b64      	cmp	r3, #100	@ 0x64
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e200      	b.n	8001ad8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016d6:	4b5d      	ldr	r3, [pc, #372]	@ (800184c <HAL_RCC_OscConfig+0x26c>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d0f0      	beq.n	80016c4 <HAL_RCC_OscConfig+0xe4>
 80016e2:	e014      	b.n	800170e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e4:	f7ff f814 	bl	8000710 <HAL_GetTick>
 80016e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016ea:	e008      	b.n	80016fe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016ec:	f7ff f810 	bl	8000710 <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	2b64      	cmp	r3, #100	@ 0x64
 80016f8:	d901      	bls.n	80016fe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	e1ec      	b.n	8001ad8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016fe:	4b53      	ldr	r3, [pc, #332]	@ (800184c <HAL_RCC_OscConfig+0x26c>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d1f0      	bne.n	80016ec <HAL_RCC_OscConfig+0x10c>
 800170a:	e000      	b.n	800170e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800170c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0302 	and.w	r3, r3, #2
 8001716:	2b00      	cmp	r3, #0
 8001718:	d063      	beq.n	80017e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800171a:	4b4c      	ldr	r3, [pc, #304]	@ (800184c <HAL_RCC_OscConfig+0x26c>)
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f003 030c 	and.w	r3, r3, #12
 8001722:	2b00      	cmp	r3, #0
 8001724:	d00b      	beq.n	800173e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001726:	4b49      	ldr	r3, [pc, #292]	@ (800184c <HAL_RCC_OscConfig+0x26c>)
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f003 030c 	and.w	r3, r3, #12
 800172e:	2b08      	cmp	r3, #8
 8001730:	d11c      	bne.n	800176c <HAL_RCC_OscConfig+0x18c>
 8001732:	4b46      	ldr	r3, [pc, #280]	@ (800184c <HAL_RCC_OscConfig+0x26c>)
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d116      	bne.n	800176c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800173e:	4b43      	ldr	r3, [pc, #268]	@ (800184c <HAL_RCC_OscConfig+0x26c>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 0302 	and.w	r3, r3, #2
 8001746:	2b00      	cmp	r3, #0
 8001748:	d005      	beq.n	8001756 <HAL_RCC_OscConfig+0x176>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	691b      	ldr	r3, [r3, #16]
 800174e:	2b01      	cmp	r3, #1
 8001750:	d001      	beq.n	8001756 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e1c0      	b.n	8001ad8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001756:	4b3d      	ldr	r3, [pc, #244]	@ (800184c <HAL_RCC_OscConfig+0x26c>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	695b      	ldr	r3, [r3, #20]
 8001762:	00db      	lsls	r3, r3, #3
 8001764:	4939      	ldr	r1, [pc, #228]	@ (800184c <HAL_RCC_OscConfig+0x26c>)
 8001766:	4313      	orrs	r3, r2
 8001768:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800176a:	e03a      	b.n	80017e2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	691b      	ldr	r3, [r3, #16]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d020      	beq.n	80017b6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001774:	4b36      	ldr	r3, [pc, #216]	@ (8001850 <HAL_RCC_OscConfig+0x270>)
 8001776:	2201      	movs	r2, #1
 8001778:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800177a:	f7fe ffc9 	bl	8000710 <HAL_GetTick>
 800177e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001780:	e008      	b.n	8001794 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001782:	f7fe ffc5 	bl	8000710 <HAL_GetTick>
 8001786:	4602      	mov	r2, r0
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	2b02      	cmp	r3, #2
 800178e:	d901      	bls.n	8001794 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001790:	2303      	movs	r3, #3
 8001792:	e1a1      	b.n	8001ad8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001794:	4b2d      	ldr	r3, [pc, #180]	@ (800184c <HAL_RCC_OscConfig+0x26c>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 0302 	and.w	r3, r3, #2
 800179c:	2b00      	cmp	r3, #0
 800179e:	d0f0      	beq.n	8001782 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017a0:	4b2a      	ldr	r3, [pc, #168]	@ (800184c <HAL_RCC_OscConfig+0x26c>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	695b      	ldr	r3, [r3, #20]
 80017ac:	00db      	lsls	r3, r3, #3
 80017ae:	4927      	ldr	r1, [pc, #156]	@ (800184c <HAL_RCC_OscConfig+0x26c>)
 80017b0:	4313      	orrs	r3, r2
 80017b2:	600b      	str	r3, [r1, #0]
 80017b4:	e015      	b.n	80017e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017b6:	4b26      	ldr	r3, [pc, #152]	@ (8001850 <HAL_RCC_OscConfig+0x270>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017bc:	f7fe ffa8 	bl	8000710 <HAL_GetTick>
 80017c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017c2:	e008      	b.n	80017d6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017c4:	f7fe ffa4 	bl	8000710 <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d901      	bls.n	80017d6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e180      	b.n	8001ad8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017d6:	4b1d      	ldr	r3, [pc, #116]	@ (800184c <HAL_RCC_OscConfig+0x26c>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0302 	and.w	r3, r3, #2
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d1f0      	bne.n	80017c4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0308 	and.w	r3, r3, #8
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d03a      	beq.n	8001864 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	699b      	ldr	r3, [r3, #24]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d019      	beq.n	800182a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017f6:	4b17      	ldr	r3, [pc, #92]	@ (8001854 <HAL_RCC_OscConfig+0x274>)
 80017f8:	2201      	movs	r2, #1
 80017fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017fc:	f7fe ff88 	bl	8000710 <HAL_GetTick>
 8001800:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001802:	e008      	b.n	8001816 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001804:	f7fe ff84 	bl	8000710 <HAL_GetTick>
 8001808:	4602      	mov	r2, r0
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	2b02      	cmp	r3, #2
 8001810:	d901      	bls.n	8001816 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e160      	b.n	8001ad8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001816:	4b0d      	ldr	r3, [pc, #52]	@ (800184c <HAL_RCC_OscConfig+0x26c>)
 8001818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	2b00      	cmp	r3, #0
 8001820:	d0f0      	beq.n	8001804 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001822:	2001      	movs	r0, #1
 8001824:	f000 faba 	bl	8001d9c <RCC_Delay>
 8001828:	e01c      	b.n	8001864 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800182a:	4b0a      	ldr	r3, [pc, #40]	@ (8001854 <HAL_RCC_OscConfig+0x274>)
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001830:	f7fe ff6e 	bl	8000710 <HAL_GetTick>
 8001834:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001836:	e00f      	b.n	8001858 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001838:	f7fe ff6a 	bl	8000710 <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	2b02      	cmp	r3, #2
 8001844:	d908      	bls.n	8001858 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e146      	b.n	8001ad8 <HAL_RCC_OscConfig+0x4f8>
 800184a:	bf00      	nop
 800184c:	40021000 	.word	0x40021000
 8001850:	42420000 	.word	0x42420000
 8001854:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001858:	4b92      	ldr	r3, [pc, #584]	@ (8001aa4 <HAL_RCC_OscConfig+0x4c4>)
 800185a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800185c:	f003 0302 	and.w	r3, r3, #2
 8001860:	2b00      	cmp	r3, #0
 8001862:	d1e9      	bne.n	8001838 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0304 	and.w	r3, r3, #4
 800186c:	2b00      	cmp	r3, #0
 800186e:	f000 80a6 	beq.w	80019be <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001872:	2300      	movs	r3, #0
 8001874:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001876:	4b8b      	ldr	r3, [pc, #556]	@ (8001aa4 <HAL_RCC_OscConfig+0x4c4>)
 8001878:	69db      	ldr	r3, [r3, #28]
 800187a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d10d      	bne.n	800189e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001882:	4b88      	ldr	r3, [pc, #544]	@ (8001aa4 <HAL_RCC_OscConfig+0x4c4>)
 8001884:	69db      	ldr	r3, [r3, #28]
 8001886:	4a87      	ldr	r2, [pc, #540]	@ (8001aa4 <HAL_RCC_OscConfig+0x4c4>)
 8001888:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800188c:	61d3      	str	r3, [r2, #28]
 800188e:	4b85      	ldr	r3, [pc, #532]	@ (8001aa4 <HAL_RCC_OscConfig+0x4c4>)
 8001890:	69db      	ldr	r3, [r3, #28]
 8001892:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001896:	60bb      	str	r3, [r7, #8]
 8001898:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800189a:	2301      	movs	r3, #1
 800189c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800189e:	4b82      	ldr	r3, [pc, #520]	@ (8001aa8 <HAL_RCC_OscConfig+0x4c8>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d118      	bne.n	80018dc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018aa:	4b7f      	ldr	r3, [pc, #508]	@ (8001aa8 <HAL_RCC_OscConfig+0x4c8>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a7e      	ldr	r2, [pc, #504]	@ (8001aa8 <HAL_RCC_OscConfig+0x4c8>)
 80018b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018b6:	f7fe ff2b 	bl	8000710 <HAL_GetTick>
 80018ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018bc:	e008      	b.n	80018d0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018be:	f7fe ff27 	bl	8000710 <HAL_GetTick>
 80018c2:	4602      	mov	r2, r0
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	2b64      	cmp	r3, #100	@ 0x64
 80018ca:	d901      	bls.n	80018d0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80018cc:	2303      	movs	r3, #3
 80018ce:	e103      	b.n	8001ad8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018d0:	4b75      	ldr	r3, [pc, #468]	@ (8001aa8 <HAL_RCC_OscConfig+0x4c8>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d0f0      	beq.n	80018be <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d106      	bne.n	80018f2 <HAL_RCC_OscConfig+0x312>
 80018e4:	4b6f      	ldr	r3, [pc, #444]	@ (8001aa4 <HAL_RCC_OscConfig+0x4c4>)
 80018e6:	6a1b      	ldr	r3, [r3, #32]
 80018e8:	4a6e      	ldr	r2, [pc, #440]	@ (8001aa4 <HAL_RCC_OscConfig+0x4c4>)
 80018ea:	f043 0301 	orr.w	r3, r3, #1
 80018ee:	6213      	str	r3, [r2, #32]
 80018f0:	e02d      	b.n	800194e <HAL_RCC_OscConfig+0x36e>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d10c      	bne.n	8001914 <HAL_RCC_OscConfig+0x334>
 80018fa:	4b6a      	ldr	r3, [pc, #424]	@ (8001aa4 <HAL_RCC_OscConfig+0x4c4>)
 80018fc:	6a1b      	ldr	r3, [r3, #32]
 80018fe:	4a69      	ldr	r2, [pc, #420]	@ (8001aa4 <HAL_RCC_OscConfig+0x4c4>)
 8001900:	f023 0301 	bic.w	r3, r3, #1
 8001904:	6213      	str	r3, [r2, #32]
 8001906:	4b67      	ldr	r3, [pc, #412]	@ (8001aa4 <HAL_RCC_OscConfig+0x4c4>)
 8001908:	6a1b      	ldr	r3, [r3, #32]
 800190a:	4a66      	ldr	r2, [pc, #408]	@ (8001aa4 <HAL_RCC_OscConfig+0x4c4>)
 800190c:	f023 0304 	bic.w	r3, r3, #4
 8001910:	6213      	str	r3, [r2, #32]
 8001912:	e01c      	b.n	800194e <HAL_RCC_OscConfig+0x36e>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	2b05      	cmp	r3, #5
 800191a:	d10c      	bne.n	8001936 <HAL_RCC_OscConfig+0x356>
 800191c:	4b61      	ldr	r3, [pc, #388]	@ (8001aa4 <HAL_RCC_OscConfig+0x4c4>)
 800191e:	6a1b      	ldr	r3, [r3, #32]
 8001920:	4a60      	ldr	r2, [pc, #384]	@ (8001aa4 <HAL_RCC_OscConfig+0x4c4>)
 8001922:	f043 0304 	orr.w	r3, r3, #4
 8001926:	6213      	str	r3, [r2, #32]
 8001928:	4b5e      	ldr	r3, [pc, #376]	@ (8001aa4 <HAL_RCC_OscConfig+0x4c4>)
 800192a:	6a1b      	ldr	r3, [r3, #32]
 800192c:	4a5d      	ldr	r2, [pc, #372]	@ (8001aa4 <HAL_RCC_OscConfig+0x4c4>)
 800192e:	f043 0301 	orr.w	r3, r3, #1
 8001932:	6213      	str	r3, [r2, #32]
 8001934:	e00b      	b.n	800194e <HAL_RCC_OscConfig+0x36e>
 8001936:	4b5b      	ldr	r3, [pc, #364]	@ (8001aa4 <HAL_RCC_OscConfig+0x4c4>)
 8001938:	6a1b      	ldr	r3, [r3, #32]
 800193a:	4a5a      	ldr	r2, [pc, #360]	@ (8001aa4 <HAL_RCC_OscConfig+0x4c4>)
 800193c:	f023 0301 	bic.w	r3, r3, #1
 8001940:	6213      	str	r3, [r2, #32]
 8001942:	4b58      	ldr	r3, [pc, #352]	@ (8001aa4 <HAL_RCC_OscConfig+0x4c4>)
 8001944:	6a1b      	ldr	r3, [r3, #32]
 8001946:	4a57      	ldr	r2, [pc, #348]	@ (8001aa4 <HAL_RCC_OscConfig+0x4c4>)
 8001948:	f023 0304 	bic.w	r3, r3, #4
 800194c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	68db      	ldr	r3, [r3, #12]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d015      	beq.n	8001982 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001956:	f7fe fedb 	bl	8000710 <HAL_GetTick>
 800195a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800195c:	e00a      	b.n	8001974 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800195e:	f7fe fed7 	bl	8000710 <HAL_GetTick>
 8001962:	4602      	mov	r2, r0
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	f241 3288 	movw	r2, #5000	@ 0x1388
 800196c:	4293      	cmp	r3, r2
 800196e:	d901      	bls.n	8001974 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001970:	2303      	movs	r3, #3
 8001972:	e0b1      	b.n	8001ad8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001974:	4b4b      	ldr	r3, [pc, #300]	@ (8001aa4 <HAL_RCC_OscConfig+0x4c4>)
 8001976:	6a1b      	ldr	r3, [r3, #32]
 8001978:	f003 0302 	and.w	r3, r3, #2
 800197c:	2b00      	cmp	r3, #0
 800197e:	d0ee      	beq.n	800195e <HAL_RCC_OscConfig+0x37e>
 8001980:	e014      	b.n	80019ac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001982:	f7fe fec5 	bl	8000710 <HAL_GetTick>
 8001986:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001988:	e00a      	b.n	80019a0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800198a:	f7fe fec1 	bl	8000710 <HAL_GetTick>
 800198e:	4602      	mov	r2, r0
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001998:	4293      	cmp	r3, r2
 800199a:	d901      	bls.n	80019a0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800199c:	2303      	movs	r3, #3
 800199e:	e09b      	b.n	8001ad8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019a0:	4b40      	ldr	r3, [pc, #256]	@ (8001aa4 <HAL_RCC_OscConfig+0x4c4>)
 80019a2:	6a1b      	ldr	r3, [r3, #32]
 80019a4:	f003 0302 	and.w	r3, r3, #2
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d1ee      	bne.n	800198a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80019ac:	7dfb      	ldrb	r3, [r7, #23]
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d105      	bne.n	80019be <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019b2:	4b3c      	ldr	r3, [pc, #240]	@ (8001aa4 <HAL_RCC_OscConfig+0x4c4>)
 80019b4:	69db      	ldr	r3, [r3, #28]
 80019b6:	4a3b      	ldr	r2, [pc, #236]	@ (8001aa4 <HAL_RCC_OscConfig+0x4c4>)
 80019b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80019bc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	69db      	ldr	r3, [r3, #28]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	f000 8087 	beq.w	8001ad6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019c8:	4b36      	ldr	r3, [pc, #216]	@ (8001aa4 <HAL_RCC_OscConfig+0x4c4>)
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f003 030c 	and.w	r3, r3, #12
 80019d0:	2b08      	cmp	r3, #8
 80019d2:	d061      	beq.n	8001a98 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	69db      	ldr	r3, [r3, #28]
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d146      	bne.n	8001a6a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019dc:	4b33      	ldr	r3, [pc, #204]	@ (8001aac <HAL_RCC_OscConfig+0x4cc>)
 80019de:	2200      	movs	r2, #0
 80019e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e2:	f7fe fe95 	bl	8000710 <HAL_GetTick>
 80019e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019e8:	e008      	b.n	80019fc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019ea:	f7fe fe91 	bl	8000710 <HAL_GetTick>
 80019ee:	4602      	mov	r2, r0
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d901      	bls.n	80019fc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80019f8:	2303      	movs	r3, #3
 80019fa:	e06d      	b.n	8001ad8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019fc:	4b29      	ldr	r3, [pc, #164]	@ (8001aa4 <HAL_RCC_OscConfig+0x4c4>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d1f0      	bne.n	80019ea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6a1b      	ldr	r3, [r3, #32]
 8001a0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a10:	d108      	bne.n	8001a24 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a12:	4b24      	ldr	r3, [pc, #144]	@ (8001aa4 <HAL_RCC_OscConfig+0x4c4>)
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	4921      	ldr	r1, [pc, #132]	@ (8001aa4 <HAL_RCC_OscConfig+0x4c4>)
 8001a20:	4313      	orrs	r3, r2
 8001a22:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a24:	4b1f      	ldr	r3, [pc, #124]	@ (8001aa4 <HAL_RCC_OscConfig+0x4c4>)
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6a19      	ldr	r1, [r3, #32]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a34:	430b      	orrs	r3, r1
 8001a36:	491b      	ldr	r1, [pc, #108]	@ (8001aa4 <HAL_RCC_OscConfig+0x4c4>)
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a3c:	4b1b      	ldr	r3, [pc, #108]	@ (8001aac <HAL_RCC_OscConfig+0x4cc>)
 8001a3e:	2201      	movs	r2, #1
 8001a40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a42:	f7fe fe65 	bl	8000710 <HAL_GetTick>
 8001a46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a48:	e008      	b.n	8001a5c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a4a:	f7fe fe61 	bl	8000710 <HAL_GetTick>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d901      	bls.n	8001a5c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	e03d      	b.n	8001ad8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a5c:	4b11      	ldr	r3, [pc, #68]	@ (8001aa4 <HAL_RCC_OscConfig+0x4c4>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d0f0      	beq.n	8001a4a <HAL_RCC_OscConfig+0x46a>
 8001a68:	e035      	b.n	8001ad6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a6a:	4b10      	ldr	r3, [pc, #64]	@ (8001aac <HAL_RCC_OscConfig+0x4cc>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a70:	f7fe fe4e 	bl	8000710 <HAL_GetTick>
 8001a74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a76:	e008      	b.n	8001a8a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a78:	f7fe fe4a 	bl	8000710 <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d901      	bls.n	8001a8a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e026      	b.n	8001ad8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a8a:	4b06      	ldr	r3, [pc, #24]	@ (8001aa4 <HAL_RCC_OscConfig+0x4c4>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d1f0      	bne.n	8001a78 <HAL_RCC_OscConfig+0x498>
 8001a96:	e01e      	b.n	8001ad6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	69db      	ldr	r3, [r3, #28]
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d107      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e019      	b.n	8001ad8 <HAL_RCC_OscConfig+0x4f8>
 8001aa4:	40021000 	.word	0x40021000
 8001aa8:	40007000 	.word	0x40007000
 8001aac:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ab0:	4b0b      	ldr	r3, [pc, #44]	@ (8001ae0 <HAL_RCC_OscConfig+0x500>)
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6a1b      	ldr	r3, [r3, #32]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d106      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d001      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e000      	b.n	8001ad8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001ad6:	2300      	movs	r3, #0
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3718      	adds	r7, #24
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	40021000 	.word	0x40021000

08001ae4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d101      	bne.n	8001af8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e0d0      	b.n	8001c9a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001af8:	4b6a      	ldr	r3, [pc, #424]	@ (8001ca4 <HAL_RCC_ClockConfig+0x1c0>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0307 	and.w	r3, r3, #7
 8001b00:	683a      	ldr	r2, [r7, #0]
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d910      	bls.n	8001b28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b06:	4b67      	ldr	r3, [pc, #412]	@ (8001ca4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f023 0207 	bic.w	r2, r3, #7
 8001b0e:	4965      	ldr	r1, [pc, #404]	@ (8001ca4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b16:	4b63      	ldr	r3, [pc, #396]	@ (8001ca4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0307 	and.w	r3, r3, #7
 8001b1e:	683a      	ldr	r2, [r7, #0]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d001      	beq.n	8001b28 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e0b8      	b.n	8001c9a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0302 	and.w	r3, r3, #2
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d020      	beq.n	8001b76 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 0304 	and.w	r3, r3, #4
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d005      	beq.n	8001b4c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b40:	4b59      	ldr	r3, [pc, #356]	@ (8001ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	4a58      	ldr	r2, [pc, #352]	@ (8001ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b46:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001b4a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 0308 	and.w	r3, r3, #8
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d005      	beq.n	8001b64 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b58:	4b53      	ldr	r3, [pc, #332]	@ (8001ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	4a52      	ldr	r2, [pc, #328]	@ (8001ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b5e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001b62:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b64:	4b50      	ldr	r3, [pc, #320]	@ (8001ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	494d      	ldr	r1, [pc, #308]	@ (8001ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b72:	4313      	orrs	r3, r2
 8001b74:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d040      	beq.n	8001c04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d107      	bne.n	8001b9a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b8a:	4b47      	ldr	r3, [pc, #284]	@ (8001ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d115      	bne.n	8001bc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e07f      	b.n	8001c9a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d107      	bne.n	8001bb2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ba2:	4b41      	ldr	r3, [pc, #260]	@ (8001ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d109      	bne.n	8001bc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e073      	b.n	8001c9a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bb2:	4b3d      	ldr	r3, [pc, #244]	@ (8001ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0302 	and.w	r3, r3, #2
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d101      	bne.n	8001bc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e06b      	b.n	8001c9a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bc2:	4b39      	ldr	r3, [pc, #228]	@ (8001ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f023 0203 	bic.w	r2, r3, #3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	4936      	ldr	r1, [pc, #216]	@ (8001ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bd4:	f7fe fd9c 	bl	8000710 <HAL_GetTick>
 8001bd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bda:	e00a      	b.n	8001bf2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bdc:	f7fe fd98 	bl	8000710 <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d901      	bls.n	8001bf2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e053      	b.n	8001c9a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bf2:	4b2d      	ldr	r3, [pc, #180]	@ (8001ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f003 020c 	and.w	r2, r3, #12
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d1eb      	bne.n	8001bdc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c04:	4b27      	ldr	r3, [pc, #156]	@ (8001ca4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0307 	and.w	r3, r3, #7
 8001c0c:	683a      	ldr	r2, [r7, #0]
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d210      	bcs.n	8001c34 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c12:	4b24      	ldr	r3, [pc, #144]	@ (8001ca4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f023 0207 	bic.w	r2, r3, #7
 8001c1a:	4922      	ldr	r1, [pc, #136]	@ (8001ca4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c22:	4b20      	ldr	r3, [pc, #128]	@ (8001ca4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0307 	and.w	r3, r3, #7
 8001c2a:	683a      	ldr	r2, [r7, #0]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d001      	beq.n	8001c34 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e032      	b.n	8001c9a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0304 	and.w	r3, r3, #4
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d008      	beq.n	8001c52 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c40:	4b19      	ldr	r3, [pc, #100]	@ (8001ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	4916      	ldr	r1, [pc, #88]	@ (8001ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0308 	and.w	r3, r3, #8
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d009      	beq.n	8001c72 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c5e:	4b12      	ldr	r3, [pc, #72]	@ (8001ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	691b      	ldr	r3, [r3, #16]
 8001c6a:	00db      	lsls	r3, r3, #3
 8001c6c:	490e      	ldr	r1, [pc, #56]	@ (8001ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c72:	f000 f821 	bl	8001cb8 <HAL_RCC_GetSysClockFreq>
 8001c76:	4602      	mov	r2, r0
 8001c78:	4b0b      	ldr	r3, [pc, #44]	@ (8001ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	091b      	lsrs	r3, r3, #4
 8001c7e:	f003 030f 	and.w	r3, r3, #15
 8001c82:	490a      	ldr	r1, [pc, #40]	@ (8001cac <HAL_RCC_ClockConfig+0x1c8>)
 8001c84:	5ccb      	ldrb	r3, [r1, r3]
 8001c86:	fa22 f303 	lsr.w	r3, r2, r3
 8001c8a:	4a09      	ldr	r2, [pc, #36]	@ (8001cb0 <HAL_RCC_ClockConfig+0x1cc>)
 8001c8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c8e:	4b09      	ldr	r3, [pc, #36]	@ (8001cb4 <HAL_RCC_ClockConfig+0x1d0>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7fe fcfa 	bl	800068c <HAL_InitTick>

  return HAL_OK;
 8001c98:	2300      	movs	r3, #0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3710      	adds	r7, #16
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	40022000 	.word	0x40022000
 8001ca8:	40021000 	.word	0x40021000
 8001cac:	08004518 	.word	0x08004518
 8001cb0:	20000000 	.word	0x20000000
 8001cb4:	20000004 	.word	0x20000004

08001cb8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b087      	sub	sp, #28
 8001cbc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	60fb      	str	r3, [r7, #12]
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	60bb      	str	r3, [r7, #8]
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	617b      	str	r3, [r7, #20]
 8001cca:	2300      	movs	r3, #0
 8001ccc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001cd2:	4b1e      	ldr	r3, [pc, #120]	@ (8001d4c <HAL_RCC_GetSysClockFreq+0x94>)
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	f003 030c 	and.w	r3, r3, #12
 8001cde:	2b04      	cmp	r3, #4
 8001ce0:	d002      	beq.n	8001ce8 <HAL_RCC_GetSysClockFreq+0x30>
 8001ce2:	2b08      	cmp	r3, #8
 8001ce4:	d003      	beq.n	8001cee <HAL_RCC_GetSysClockFreq+0x36>
 8001ce6:	e027      	b.n	8001d38 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ce8:	4b19      	ldr	r3, [pc, #100]	@ (8001d50 <HAL_RCC_GetSysClockFreq+0x98>)
 8001cea:	613b      	str	r3, [r7, #16]
      break;
 8001cec:	e027      	b.n	8001d3e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	0c9b      	lsrs	r3, r3, #18
 8001cf2:	f003 030f 	and.w	r3, r3, #15
 8001cf6:	4a17      	ldr	r2, [pc, #92]	@ (8001d54 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001cf8:	5cd3      	ldrb	r3, [r2, r3]
 8001cfa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d010      	beq.n	8001d28 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d06:	4b11      	ldr	r3, [pc, #68]	@ (8001d4c <HAL_RCC_GetSysClockFreq+0x94>)
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	0c5b      	lsrs	r3, r3, #17
 8001d0c:	f003 0301 	and.w	r3, r3, #1
 8001d10:	4a11      	ldr	r2, [pc, #68]	@ (8001d58 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001d12:	5cd3      	ldrb	r3, [r2, r3]
 8001d14:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4a0d      	ldr	r2, [pc, #52]	@ (8001d50 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d1a:	fb03 f202 	mul.w	r2, r3, r2
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d24:	617b      	str	r3, [r7, #20]
 8001d26:	e004      	b.n	8001d32 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	4a0c      	ldr	r2, [pc, #48]	@ (8001d5c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001d2c:	fb02 f303 	mul.w	r3, r2, r3
 8001d30:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	613b      	str	r3, [r7, #16]
      break;
 8001d36:	e002      	b.n	8001d3e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d38:	4b05      	ldr	r3, [pc, #20]	@ (8001d50 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d3a:	613b      	str	r3, [r7, #16]
      break;
 8001d3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d3e:	693b      	ldr	r3, [r7, #16]
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	371c      	adds	r7, #28
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bc80      	pop	{r7}
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	007a1200 	.word	0x007a1200
 8001d54:	08004530 	.word	0x08004530
 8001d58:	08004540 	.word	0x08004540
 8001d5c:	003d0900 	.word	0x003d0900

08001d60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d64:	4b02      	ldr	r3, [pc, #8]	@ (8001d70 <HAL_RCC_GetHCLKFreq+0x10>)
 8001d66:	681b      	ldr	r3, [r3, #0]
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bc80      	pop	{r7}
 8001d6e:	4770      	bx	lr
 8001d70:	20000000 	.word	0x20000000

08001d74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d78:	f7ff fff2 	bl	8001d60 <HAL_RCC_GetHCLKFreq>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	4b05      	ldr	r3, [pc, #20]	@ (8001d94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	0a1b      	lsrs	r3, r3, #8
 8001d84:	f003 0307 	and.w	r3, r3, #7
 8001d88:	4903      	ldr	r1, [pc, #12]	@ (8001d98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d8a:	5ccb      	ldrb	r3, [r1, r3]
 8001d8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	40021000 	.word	0x40021000
 8001d98:	08004528 	.word	0x08004528

08001d9c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b085      	sub	sp, #20
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001da4:	4b0a      	ldr	r3, [pc, #40]	@ (8001dd0 <RCC_Delay+0x34>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a0a      	ldr	r2, [pc, #40]	@ (8001dd4 <RCC_Delay+0x38>)
 8001daa:	fba2 2303 	umull	r2, r3, r2, r3
 8001dae:	0a5b      	lsrs	r3, r3, #9
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	fb02 f303 	mul.w	r3, r2, r3
 8001db6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001db8:	bf00      	nop
  }
  while (Delay --);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	1e5a      	subs	r2, r3, #1
 8001dbe:	60fa      	str	r2, [r7, #12]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d1f9      	bne.n	8001db8 <RCC_Delay+0x1c>
}
 8001dc4:	bf00      	nop
 8001dc6:	bf00      	nop
 8001dc8:	3714      	adds	r7, #20
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bc80      	pop	{r7}
 8001dce:	4770      	bx	lr
 8001dd0:	20000000 	.word	0x20000000
 8001dd4:	10624dd3 	.word	0x10624dd3

08001dd8 <app_init>:

task_dta_t task_dta_list[TASK_QTY];

/********************** external functions definition ************************/
void app_init(void)
{
 8001dd8:	b590      	push	{r4, r7, lr}
 8001dda:	b085      	sub	sp, #20
 8001ddc:	af02      	add	r7, sp, #8
	uint32_t index;

	/* Print out: Application Initialized */
	LOGGER_LOG("\r\n");
 8001dde:	b672      	cpsid	i
 8001de0:	4b51      	ldr	r3, [pc, #324]	@ (8001f28 <app_init+0x150>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a51      	ldr	r2, [pc, #324]	@ (8001f2c <app_init+0x154>)
 8001de6:	213f      	movs	r1, #63	@ 0x3f
 8001de8:	4618      	mov	r0, r3
 8001dea:	f001 fa2f 	bl	800324c <sniprintf>
 8001dee:	4603      	mov	r3, r0
 8001df0:	4a4f      	ldr	r2, [pc, #316]	@ (8001f30 <app_init+0x158>)
 8001df2:	6013      	str	r3, [r2, #0]
 8001df4:	4b4c      	ldr	r3, [pc, #304]	@ (8001f28 <app_init+0x150>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f000 f941 	bl	8002080 <logger_log_print_>
 8001dfe:	b662      	cpsie	i
	LOGGER_LOG("%s is running - Tick [mS] = %lu\r\n", GET_NAME(app_init), HAL_GetTick());
 8001e00:	b672      	cpsid	i
 8001e02:	4b49      	ldr	r3, [pc, #292]	@ (8001f28 <app_init+0x150>)
 8001e04:	681c      	ldr	r4, [r3, #0]
 8001e06:	f7fe fc83 	bl	8000710 <HAL_GetTick>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	9300      	str	r3, [sp, #0]
 8001e0e:	4b49      	ldr	r3, [pc, #292]	@ (8001f34 <app_init+0x15c>)
 8001e10:	4a49      	ldr	r2, [pc, #292]	@ (8001f38 <app_init+0x160>)
 8001e12:	213f      	movs	r1, #63	@ 0x3f
 8001e14:	4620      	mov	r0, r4
 8001e16:	f001 fa19 	bl	800324c <sniprintf>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	4a44      	ldr	r2, [pc, #272]	@ (8001f30 <app_init+0x158>)
 8001e1e:	6013      	str	r3, [r2, #0]
 8001e20:	4b41      	ldr	r3, [pc, #260]	@ (8001f28 <app_init+0x150>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f000 f92b 	bl	8002080 <logger_log_print_>
 8001e2a:	b662      	cpsie	i

	LOGGER_LOG(p_sys);
 8001e2c:	b672      	cpsid	i
 8001e2e:	4b3e      	ldr	r3, [pc, #248]	@ (8001f28 <app_init+0x150>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a42      	ldr	r2, [pc, #264]	@ (8001f3c <app_init+0x164>)
 8001e34:	6812      	ldr	r2, [r2, #0]
 8001e36:	213f      	movs	r1, #63	@ 0x3f
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f001 fa07 	bl	800324c <sniprintf>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	4a3b      	ldr	r2, [pc, #236]	@ (8001f30 <app_init+0x158>)
 8001e42:	6013      	str	r3, [r2, #0]
 8001e44:	4b38      	ldr	r3, [pc, #224]	@ (8001f28 <app_init+0x150>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f000 f919 	bl	8002080 <logger_log_print_>
 8001e4e:	b662      	cpsie	i
	LOGGER_LOG(p_app);
 8001e50:	b672      	cpsid	i
 8001e52:	4b35      	ldr	r3, [pc, #212]	@ (8001f28 <app_init+0x150>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a3a      	ldr	r2, [pc, #232]	@ (8001f40 <app_init+0x168>)
 8001e58:	6812      	ldr	r2, [r2, #0]
 8001e5a:	213f      	movs	r1, #63	@ 0x3f
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f001 f9f5 	bl	800324c <sniprintf>
 8001e62:	4603      	mov	r3, r0
 8001e64:	4a32      	ldr	r2, [pc, #200]	@ (8001f30 <app_init+0x158>)
 8001e66:	6013      	str	r3, [r2, #0]
 8001e68:	4b2f      	ldr	r3, [pc, #188]	@ (8001f28 <app_init+0x150>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f000 f907 	bl	8002080 <logger_log_print_>
 8001e72:	b662      	cpsie	i

	g_app_cnt = G_APP_CNT_INI;
 8001e74:	4b33      	ldr	r3, [pc, #204]	@ (8001f44 <app_init+0x16c>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	601a      	str	r2, [r3, #0]

	/* Print out: Application execution counter */
	LOGGER_LOG(" %s = %lu\r\n", GET_NAME(g_app_cnt), g_app_cnt);
 8001e7a:	b672      	cpsid	i
 8001e7c:	4b2a      	ldr	r3, [pc, #168]	@ (8001f28 <app_init+0x150>)
 8001e7e:	6818      	ldr	r0, [r3, #0]
 8001e80:	4b30      	ldr	r3, [pc, #192]	@ (8001f44 <app_init+0x16c>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	9300      	str	r3, [sp, #0]
 8001e86:	4b30      	ldr	r3, [pc, #192]	@ (8001f48 <app_init+0x170>)
 8001e88:	4a30      	ldr	r2, [pc, #192]	@ (8001f4c <app_init+0x174>)
 8001e8a:	213f      	movs	r1, #63	@ 0x3f
 8001e8c:	f001 f9de 	bl	800324c <sniprintf>
 8001e90:	4603      	mov	r3, r0
 8001e92:	4a27      	ldr	r2, [pc, #156]	@ (8001f30 <app_init+0x158>)
 8001e94:	6013      	str	r3, [r2, #0]
 8001e96:	4b24      	ldr	r3, [pc, #144]	@ (8001f28 <app_init+0x150>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f000 f8f0 	bl	8002080 <logger_log_print_>
 8001ea0:	b662      	cpsie	i

	/* Go through the task arrays */
	for (index = 0; TASK_QTY > index; index++)
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	607b      	str	r3, [r7, #4]
 8001ea6:	e01a      	b.n	8001ede <app_init+0x106>
	{
		/* Run task_x_init */
		(*task_cfg_list[index].task_init)(task_cfg_list[index].parameters);
 8001ea8:	4929      	ldr	r1, [pc, #164]	@ (8001f50 <app_init+0x178>)
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	4613      	mov	r3, r2
 8001eae:	005b      	lsls	r3, r3, #1
 8001eb0:	4413      	add	r3, r2
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	440b      	add	r3, r1
 8001eb6:	6819      	ldr	r1, [r3, #0]
 8001eb8:	4825      	ldr	r0, [pc, #148]	@ (8001f50 <app_init+0x178>)
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	005b      	lsls	r3, r3, #1
 8001ec0:	4413      	add	r3, r2
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	4403      	add	r3, r0
 8001ec6:	3308      	adds	r3, #8
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	4788      	blx	r1

		/* Init variables */
		task_dta_list[index].WCET = TASK_X_WCET_INI;
 8001ece:	4a21      	ldr	r2, [pc, #132]	@ (8001f54 <app_init+0x17c>)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2100      	movs	r1, #0
 8001ed4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (index = 0; TASK_QTY > index; index++)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	3301      	adds	r3, #1
 8001edc:	607b      	str	r3, [r7, #4]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d9e1      	bls.n	8001ea8 <app_init+0xd0>
	}

	cycle_counter_init();
 8001ee4:	4b1c      	ldr	r3, [pc, #112]	@ (8001f58 <app_init+0x180>)
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	4a1b      	ldr	r2, [pc, #108]	@ (8001f58 <app_init+0x180>)
 8001eea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001eee:	60d3      	str	r3, [r2, #12]
 8001ef0:	4b1a      	ldr	r3, [pc, #104]	@ (8001f5c <app_init+0x184>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	605a      	str	r2, [r3, #4]
 8001ef6:	4b19      	ldr	r3, [pc, #100]	@ (8001f5c <app_init+0x184>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a18      	ldr	r2, [pc, #96]	@ (8001f5c <app_init+0x184>)
 8001efc:	f043 0301 	orr.w	r3, r3, #1
 8001f00:	6013      	str	r3, [r2, #0]

	__asm("CPSID i");	/* disable interrupts*/
 8001f02:	b672      	cpsid	i
	g_app_tick_cnt = G_APP_TICK_CNT_INI;
 8001f04:	4b16      	ldr	r3, [pc, #88]	@ (8001f60 <app_init+0x188>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	601a      	str	r2, [r3, #0]
	g_task_sensor_tick_cnt = G_APP_TICK_CNT_INI;
 8001f0a:	4b16      	ldr	r3, [pc, #88]	@ (8001f64 <app_init+0x18c>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	601a      	str	r2, [r3, #0]
	g_task_system_tick_cnt = G_APP_TICK_CNT_INI;
 8001f10:	4b15      	ldr	r3, [pc, #84]	@ (8001f68 <app_init+0x190>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	601a      	str	r2, [r3, #0]
	g_task_actuator_tick_cnt = G_APP_TICK_CNT_INI;
 8001f16:	4b15      	ldr	r3, [pc, #84]	@ (8001f6c <app_init+0x194>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	601a      	str	r2, [r3, #0]
    __asm("CPSIE i");	/* enable interrupts*/
 8001f1c:	b662      	cpsie	i
}
 8001f1e:	bf00      	nop
 8001f20:	370c      	adds	r7, #12
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd90      	pop	{r4, r7, pc}
 8001f26:	bf00      	nop
 8001f28:	08004568 	.word	0x08004568
 8001f2c:	08004200 	.word	0x08004200
 8001f30:	20000178 	.word	0x20000178
 8001f34:	08004204 	.word	0x08004204
 8001f38:	08004210 	.word	0x08004210
 8001f3c:	2000000c 	.word	0x2000000c
 8001f40:	20000010 	.word	0x20000010
 8001f44:	20000120 	.word	0x20000120
 8001f48:	08004234 	.word	0x08004234
 8001f4c:	08004240 	.word	0x08004240
 8001f50:	08004544 	.word	0x08004544
 8001f54:	2000012c 	.word	0x2000012c
 8001f58:	e000edf0 	.word	0xe000edf0
 8001f5c:	e0001000 	.word	0xe0001000
 8001f60:	20000128 	.word	0x20000128
 8001f64:	20000190 	.word	0x20000190
 8001f68:	200001a0 	.word	0x200001a0
 8001f6c:	20000180 	.word	0x20000180

08001f70 <app_update>:

void app_update(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
	uint32_t index;
	uint32_t cycle_counter_time_us;

	/* Check if it's time to run tasks */
	if (G_APP_TICK_CNT_INI < g_app_tick_cnt)
 8001f76:	4b29      	ldr	r3, [pc, #164]	@ (800201c <app_update+0xac>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d049      	beq.n	8002012 <app_update+0xa2>
    {
    	g_app_tick_cnt--;
 8001f7e:	4b27      	ldr	r3, [pc, #156]	@ (800201c <app_update+0xac>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	3b01      	subs	r3, #1
 8001f84:	4a25      	ldr	r2, [pc, #148]	@ (800201c <app_update+0xac>)
 8001f86:	6013      	str	r3, [r2, #0]

    	/* Update App Counter */
    	g_app_cnt++;
 8001f88:	4b25      	ldr	r3, [pc, #148]	@ (8002020 <app_update+0xb0>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	4a24      	ldr	r2, [pc, #144]	@ (8002020 <app_update+0xb0>)
 8001f90:	6013      	str	r3, [r2, #0]
    	g_app_time_us = 0;
 8001f92:	4b24      	ldr	r3, [pc, #144]	@ (8002024 <app_update+0xb4>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	601a      	str	r2, [r3, #0]

    	/* Go through the task arrays */
    	for (index = 0; TASK_QTY > index; index++)
 8001f98:	2300      	movs	r3, #0
 8001f9a:	607b      	str	r3, [r7, #4]
 8001f9c:	e036      	b.n	800200c <app_update+0x9c>
    	{
			cycle_counter_reset();
 8001f9e:	4b22      	ldr	r3, [pc, #136]	@ (8002028 <app_update+0xb8>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	605a      	str	r2, [r3, #4]

    		/* Run task_x_update */
			(*task_cfg_list[index].task_update)(task_cfg_list[index].parameters);
 8001fa4:	4921      	ldr	r1, [pc, #132]	@ (800202c <app_update+0xbc>)
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	4613      	mov	r3, r2
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	4413      	add	r3, r2
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	440b      	add	r3, r1
 8001fb2:	3304      	adds	r3, #4
 8001fb4:	6819      	ldr	r1, [r3, #0]
 8001fb6:	481d      	ldr	r0, [pc, #116]	@ (800202c <app_update+0xbc>)
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	4613      	mov	r3, r2
 8001fbc:	005b      	lsls	r3, r3, #1
 8001fbe:	4413      	add	r3, r2
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	4403      	add	r3, r0
 8001fc4:	3308      	adds	r3, #8
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	4788      	blx	r1

			cycle_counter_time_us = cycle_counter_time_us();
 8001fcc:	4b16      	ldr	r3, [pc, #88]	@ (8002028 <app_update+0xb8>)
 8001fce:	685a      	ldr	r2, [r3, #4]
 8001fd0:	4b17      	ldr	r3, [pc, #92]	@ (8002030 <app_update+0xc0>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4917      	ldr	r1, [pc, #92]	@ (8002034 <app_update+0xc4>)
 8001fd6:	fba1 1303 	umull	r1, r3, r1, r3
 8001fda:	0c9b      	lsrs	r3, r3, #18
 8001fdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fe0:	603b      	str	r3, [r7, #0]

			/* Update variables */
	    	g_app_time_us += cycle_counter_time_us;
 8001fe2:	4b10      	ldr	r3, [pc, #64]	@ (8002024 <app_update+0xb4>)
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	4413      	add	r3, r2
 8001fea:	4a0e      	ldr	r2, [pc, #56]	@ (8002024 <app_update+0xb4>)
 8001fec:	6013      	str	r3, [r2, #0]

			if (task_dta_list[index].WCET < cycle_counter_time_us)
 8001fee:	4a12      	ldr	r2, [pc, #72]	@ (8002038 <app_update+0xc8>)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ff6:	683a      	ldr	r2, [r7, #0]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d904      	bls.n	8002006 <app_update+0x96>
			{
				task_dta_list[index].WCET = cycle_counter_time_us;
 8001ffc:	490e      	ldr	r1, [pc, #56]	@ (8002038 <app_update+0xc8>)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	683a      	ldr	r2, [r7, #0]
 8002002:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    	for (index = 0; TASK_QTY > index; index++)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	3301      	adds	r3, #1
 800200a:	607b      	str	r3, [r7, #4]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2b02      	cmp	r3, #2
 8002010:	d9c5      	bls.n	8001f9e <app_update+0x2e>
			}
	    }
    }
}
 8002012:	bf00      	nop
 8002014:	3708      	adds	r7, #8
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	20000128 	.word	0x20000128
 8002020:	20000120 	.word	0x20000120
 8002024:	20000124 	.word	0x20000124
 8002028:	e0001000 	.word	0xe0001000
 800202c:	08004544 	.word	0x08004544
 8002030:	20000000 	.word	0x20000000
 8002034:	431bde83 	.word	0x431bde83
 8002038:	2000012c 	.word	0x2000012c

0800203c <HAL_SYSTICK_Callback>:

void HAL_SYSTICK_Callback(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
	g_app_tick_cnt++;
 8002040:	4b0b      	ldr	r3, [pc, #44]	@ (8002070 <HAL_SYSTICK_Callback+0x34>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	3301      	adds	r3, #1
 8002046:	4a0a      	ldr	r2, [pc, #40]	@ (8002070 <HAL_SYSTICK_Callback+0x34>)
 8002048:	6013      	str	r3, [r2, #0]

	g_task_sensor_tick_cnt++;
 800204a:	4b0a      	ldr	r3, [pc, #40]	@ (8002074 <HAL_SYSTICK_Callback+0x38>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	3301      	adds	r3, #1
 8002050:	4a08      	ldr	r2, [pc, #32]	@ (8002074 <HAL_SYSTICK_Callback+0x38>)
 8002052:	6013      	str	r3, [r2, #0]
	g_task_system_tick_cnt++;
 8002054:	4b08      	ldr	r3, [pc, #32]	@ (8002078 <HAL_SYSTICK_Callback+0x3c>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	3301      	adds	r3, #1
 800205a:	4a07      	ldr	r2, [pc, #28]	@ (8002078 <HAL_SYSTICK_Callback+0x3c>)
 800205c:	6013      	str	r3, [r2, #0]
	g_task_actuator_tick_cnt++;
 800205e:	4b07      	ldr	r3, [pc, #28]	@ (800207c <HAL_SYSTICK_Callback+0x40>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	3301      	adds	r3, #1
 8002064:	4a05      	ldr	r2, [pc, #20]	@ (800207c <HAL_SYSTICK_Callback+0x40>)
 8002066:	6013      	str	r3, [r2, #0]
}
 8002068:	bf00      	nop
 800206a:	46bd      	mov	sp, r7
 800206c:	bc80      	pop	{r7}
 800206e:	4770      	bx	lr
 8002070:	20000128 	.word	0x20000128
 8002074:	20000190 	.word	0x20000190
 8002078:	200001a0 	.word	0x200001a0
 800207c:	20000180 	.word	0x20000180

08002080 <logger_log_print_>:

/********************** external functions definition ************************/

#if 1 == LOGGER_CONFIG_USE_SEMIHOSTING
void logger_log_print_(char* const msg)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
	printf(msg);
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f001 f8cd 	bl	8003228 <iprintf>
	fflush(stdout);
 800208e:	4b05      	ldr	r3, [pc, #20]	@ (80020a4 <logger_log_print_+0x24>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	4618      	mov	r0, r3
 8002096:	f000 fff1 	bl	800307c <fflush>
}
 800209a:	bf00      	nop
 800209c:	3708      	adds	r7, #8
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	20000058 	.word	0x20000058

080020a8 <task_actuator_init>:
uint32_t g_task_actuator_cnt;
volatile uint32_t g_task_actuator_tick_cnt;

/********************** external functions definition ************************/
void task_actuator_init(void *parameters)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b088      	sub	sp, #32
 80020ac:	af02      	add	r7, sp, #8
 80020ae:	6078      	str	r0, [r7, #4]
	task_actuator_st_t state;
	task_actuator_ev_t event;
	bool b_event;

	/* Print out: Task Initialized */
	LOGGER_LOG("  %s is running - %s\r\n", GET_NAME(task_actuator_init), p_task_actuator);
 80020b0:	b672      	cpsid	i
 80020b2:	4b5f      	ldr	r3, [pc, #380]	@ (8002230 <task_actuator_init+0x188>)
 80020b4:	6818      	ldr	r0, [r3, #0]
 80020b6:	4b5f      	ldr	r3, [pc, #380]	@ (8002234 <task_actuator_init+0x18c>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	9300      	str	r3, [sp, #0]
 80020bc:	4b5e      	ldr	r3, [pc, #376]	@ (8002238 <task_actuator_init+0x190>)
 80020be:	4a5f      	ldr	r2, [pc, #380]	@ (800223c <task_actuator_init+0x194>)
 80020c0:	213f      	movs	r1, #63	@ 0x3f
 80020c2:	f001 f8c3 	bl	800324c <sniprintf>
 80020c6:	4603      	mov	r3, r0
 80020c8:	4a5d      	ldr	r2, [pc, #372]	@ (8002240 <task_actuator_init+0x198>)
 80020ca:	6013      	str	r3, [r2, #0]
 80020cc:	4b58      	ldr	r3, [pc, #352]	@ (8002230 <task_actuator_init+0x188>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7ff ffd5 	bl	8002080 <logger_log_print_>
 80020d6:	b662      	cpsie	i
	LOGGER_LOG("  %s is a %s\r\n", GET_NAME(task_actuator), p_task_actuator_);
 80020d8:	b672      	cpsid	i
 80020da:	4b55      	ldr	r3, [pc, #340]	@ (8002230 <task_actuator_init+0x188>)
 80020dc:	6818      	ldr	r0, [r3, #0]
 80020de:	4b59      	ldr	r3, [pc, #356]	@ (8002244 <task_actuator_init+0x19c>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	9300      	str	r3, [sp, #0]
 80020e4:	4b58      	ldr	r3, [pc, #352]	@ (8002248 <task_actuator_init+0x1a0>)
 80020e6:	4a59      	ldr	r2, [pc, #356]	@ (800224c <task_actuator_init+0x1a4>)
 80020e8:	213f      	movs	r1, #63	@ 0x3f
 80020ea:	f001 f8af 	bl	800324c <sniprintf>
 80020ee:	4603      	mov	r3, r0
 80020f0:	4a53      	ldr	r2, [pc, #332]	@ (8002240 <task_actuator_init+0x198>)
 80020f2:	6013      	str	r3, [r2, #0]
 80020f4:	4b4e      	ldr	r3, [pc, #312]	@ (8002230 <task_actuator_init+0x188>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7ff ffc1 	bl	8002080 <logger_log_print_>
 80020fe:	b662      	cpsie	i

	g_task_actuator_cnt = G_TASK_ACT_CNT_INIT;
 8002100:	4b53      	ldr	r3, [pc, #332]	@ (8002250 <task_actuator_init+0x1a8>)
 8002102:	2200      	movs	r2, #0
 8002104:	601a      	str	r2, [r3, #0]

	/* Print out: Task execution counter */
	LOGGER_LOG("   %s = %lu\r\n", GET_NAME(g_task_actuator_cnt), g_task_actuator_cnt);
 8002106:	b672      	cpsid	i
 8002108:	4b49      	ldr	r3, [pc, #292]	@ (8002230 <task_actuator_init+0x188>)
 800210a:	6818      	ldr	r0, [r3, #0]
 800210c:	4b50      	ldr	r3, [pc, #320]	@ (8002250 <task_actuator_init+0x1a8>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	9300      	str	r3, [sp, #0]
 8002112:	4b50      	ldr	r3, [pc, #320]	@ (8002254 <task_actuator_init+0x1ac>)
 8002114:	4a50      	ldr	r2, [pc, #320]	@ (8002258 <task_actuator_init+0x1b0>)
 8002116:	213f      	movs	r1, #63	@ 0x3f
 8002118:	f001 f898 	bl	800324c <sniprintf>
 800211c:	4603      	mov	r3, r0
 800211e:	4a48      	ldr	r2, [pc, #288]	@ (8002240 <task_actuator_init+0x198>)
 8002120:	6013      	str	r3, [r2, #0]
 8002122:	4b43      	ldr	r3, [pc, #268]	@ (8002230 <task_actuator_init+0x188>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4618      	mov	r0, r3
 8002128:	f7ff ffaa 	bl	8002080 <logger_log_print_>
 800212c:	b662      	cpsie	i

	for (index = 0; ACTUATOR_DTA_QTY > index; index++)
 800212e:	2300      	movs	r3, #0
 8002130:	617b      	str	r3, [r7, #20]
 8002132:	e072      	b.n	800221a <task_actuator_init+0x172>
	{
		/* Update Task Actuator Configuration & Data Pointer */
		p_task_actuator_cfg = &task_actuator_cfg_list[index];
 8002134:	697a      	ldr	r2, [r7, #20]
 8002136:	4613      	mov	r3, r2
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	4413      	add	r3, r2
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	4a47      	ldr	r2, [pc, #284]	@ (800225c <task_actuator_init+0x1b4>)
 8002140:	4413      	add	r3, r2
 8002142:	613b      	str	r3, [r7, #16]
		p_task_actuator_dta = &task_actuator_dta_list[index];
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	00db      	lsls	r3, r3, #3
 8002148:	4a45      	ldr	r2, [pc, #276]	@ (8002260 <task_actuator_init+0x1b8>)
 800214a:	4413      	add	r3, r2
 800214c:	60fb      	str	r3, [r7, #12]

		/* Print out: Index & Task execution FSM */
		LOGGER_LOG("   %s = %lu", GET_NAME(index), index);
 800214e:	b672      	cpsid	i
 8002150:	4b37      	ldr	r3, [pc, #220]	@ (8002230 <task_actuator_init+0x188>)
 8002152:	6818      	ldr	r0, [r3, #0]
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	9300      	str	r3, [sp, #0]
 8002158:	4b42      	ldr	r3, [pc, #264]	@ (8002264 <task_actuator_init+0x1bc>)
 800215a:	4a43      	ldr	r2, [pc, #268]	@ (8002268 <task_actuator_init+0x1c0>)
 800215c:	213f      	movs	r1, #63	@ 0x3f
 800215e:	f001 f875 	bl	800324c <sniprintf>
 8002162:	4603      	mov	r3, r0
 8002164:	4a36      	ldr	r2, [pc, #216]	@ (8002240 <task_actuator_init+0x198>)
 8002166:	6013      	str	r3, [r2, #0]
 8002168:	4b31      	ldr	r3, [pc, #196]	@ (8002230 <task_actuator_init+0x188>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4618      	mov	r0, r3
 800216e:	f7ff ff87 	bl	8002080 <logger_log_print_>
 8002172:	b662      	cpsie	i

		state = p_task_actuator_dta->state;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	791b      	ldrb	r3, [r3, #4]
 8002178:	72fb      	strb	r3, [r7, #11]
		LOGGER_LOG("   %s = %lu", GET_NAME(state), (uint32_t)state);
 800217a:	b672      	cpsid	i
 800217c:	4b2c      	ldr	r3, [pc, #176]	@ (8002230 <task_actuator_init+0x188>)
 800217e:	6818      	ldr	r0, [r3, #0]
 8002180:	7afb      	ldrb	r3, [r7, #11]
 8002182:	9300      	str	r3, [sp, #0]
 8002184:	4b39      	ldr	r3, [pc, #228]	@ (800226c <task_actuator_init+0x1c4>)
 8002186:	4a38      	ldr	r2, [pc, #224]	@ (8002268 <task_actuator_init+0x1c0>)
 8002188:	213f      	movs	r1, #63	@ 0x3f
 800218a:	f001 f85f 	bl	800324c <sniprintf>
 800218e:	4603      	mov	r3, r0
 8002190:	4a2b      	ldr	r2, [pc, #172]	@ (8002240 <task_actuator_init+0x198>)
 8002192:	6013      	str	r3, [r2, #0]
 8002194:	4b26      	ldr	r3, [pc, #152]	@ (8002230 <task_actuator_init+0x188>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4618      	mov	r0, r3
 800219a:	f7ff ff71 	bl	8002080 <logger_log_print_>
 800219e:	b662      	cpsie	i

		event = p_task_actuator_dta->event;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	795b      	ldrb	r3, [r3, #5]
 80021a4:	72bb      	strb	r3, [r7, #10]
		LOGGER_LOG("   %s = %lu", GET_NAME(event), (uint32_t)event);
 80021a6:	b672      	cpsid	i
 80021a8:	4b21      	ldr	r3, [pc, #132]	@ (8002230 <task_actuator_init+0x188>)
 80021aa:	6818      	ldr	r0, [r3, #0]
 80021ac:	7abb      	ldrb	r3, [r7, #10]
 80021ae:	9300      	str	r3, [sp, #0]
 80021b0:	4b2f      	ldr	r3, [pc, #188]	@ (8002270 <task_actuator_init+0x1c8>)
 80021b2:	4a2d      	ldr	r2, [pc, #180]	@ (8002268 <task_actuator_init+0x1c0>)
 80021b4:	213f      	movs	r1, #63	@ 0x3f
 80021b6:	f001 f849 	bl	800324c <sniprintf>
 80021ba:	4603      	mov	r3, r0
 80021bc:	4a20      	ldr	r2, [pc, #128]	@ (8002240 <task_actuator_init+0x198>)
 80021be:	6013      	str	r3, [r2, #0]
 80021c0:	4b1b      	ldr	r3, [pc, #108]	@ (8002230 <task_actuator_init+0x188>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7ff ff5b 	bl	8002080 <logger_log_print_>
 80021ca:	b662      	cpsie	i

		b_event = p_task_actuator_dta->flag;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	799b      	ldrb	r3, [r3, #6]
 80021d0:	727b      	strb	r3, [r7, #9]
		LOGGER_LOG("   %s = %s\r\n", GET_NAME(b_event), (b_event ? "true" : "false"));
 80021d2:	b672      	cpsid	i
 80021d4:	4b16      	ldr	r3, [pc, #88]	@ (8002230 <task_actuator_init+0x188>)
 80021d6:	6818      	ldr	r0, [r3, #0]
 80021d8:	7a7b      	ldrb	r3, [r7, #9]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <task_actuator_init+0x13a>
 80021de:	4b25      	ldr	r3, [pc, #148]	@ (8002274 <task_actuator_init+0x1cc>)
 80021e0:	e000      	b.n	80021e4 <task_actuator_init+0x13c>
 80021e2:	4b25      	ldr	r3, [pc, #148]	@ (8002278 <task_actuator_init+0x1d0>)
 80021e4:	9300      	str	r3, [sp, #0]
 80021e6:	4b25      	ldr	r3, [pc, #148]	@ (800227c <task_actuator_init+0x1d4>)
 80021e8:	4a25      	ldr	r2, [pc, #148]	@ (8002280 <task_actuator_init+0x1d8>)
 80021ea:	213f      	movs	r1, #63	@ 0x3f
 80021ec:	f001 f82e 	bl	800324c <sniprintf>
 80021f0:	4603      	mov	r3, r0
 80021f2:	4a13      	ldr	r2, [pc, #76]	@ (8002240 <task_actuator_init+0x198>)
 80021f4:	6013      	str	r3, [r2, #0]
 80021f6:	4b0e      	ldr	r3, [pc, #56]	@ (8002230 <task_actuator_init+0x188>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4618      	mov	r0, r3
 80021fc:	f7ff ff40 	bl	8002080 <logger_log_print_>
 8002200:	b662      	cpsie	i

		HAL_GPIO_WritePin(p_task_actuator_cfg->gpio_port, p_task_actuator_cfg->pin, p_task_actuator_cfg->act_off);
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	6858      	ldr	r0, [r3, #4]
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	8919      	ldrh	r1, [r3, #8]
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	7adb      	ldrb	r3, [r3, #11]
 800220e:	461a      	mov	r2, r3
 8002210:	f7fe fd31 	bl	8000c76 <HAL_GPIO_WritePin>
	for (index = 0; ACTUATOR_DTA_QTY > index; index++)
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	3301      	adds	r3, #1
 8002218:	617b      	str	r3, [r7, #20]
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	2b02      	cmp	r3, #2
 800221e:	d989      	bls.n	8002134 <task_actuator_init+0x8c>
	}

	g_task_actuator_tick_cnt = G_TASK_ACT_TICK_CNT_INI;
 8002220:	4b18      	ldr	r3, [pc, #96]	@ (8002284 <task_actuator_init+0x1dc>)
 8002222:	2200      	movs	r2, #0
 8002224:	601a      	str	r2, [r3, #0]
}
 8002226:	bf00      	nop
 8002228:	3718      	adds	r7, #24
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	08004568 	.word	0x08004568
 8002234:	2000002c 	.word	0x2000002c
 8002238:	08004294 	.word	0x08004294
 800223c:	080042a8 	.word	0x080042a8
 8002240:	20000178 	.word	0x20000178
 8002244:	20000030 	.word	0x20000030
 8002248:	080042c0 	.word	0x080042c0
 800224c:	080042d0 	.word	0x080042d0
 8002250:	2000017c 	.word	0x2000017c
 8002254:	080042e0 	.word	0x080042e0
 8002258:	080042f4 	.word	0x080042f4
 800225c:	0800456c 	.word	0x0800456c
 8002260:	20000014 	.word	0x20000014
 8002264:	08004304 	.word	0x08004304
 8002268:	0800430c 	.word	0x0800430c
 800226c:	08004318 	.word	0x08004318
 8002270:	08004320 	.word	0x08004320
 8002274:	08004328 	.word	0x08004328
 8002278:	08004330 	.word	0x08004330
 800227c:	08004338 	.word	0x08004338
 8002280:	08004340 	.word	0x08004340
 8002284:	20000180 	.word	0x20000180

08002288 <task_actuator_update>:

void task_actuator_update(void *parameters)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b086      	sub	sp, #24
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
	uint32_t index;
	const task_actuator_cfg_t *p_task_actuator_cfg;
	task_actuator_dta_t *p_task_actuator_dta;
	bool b_time_update_required = false;
 8002290:	2300      	movs	r3, #0
 8002292:	74fb      	strb	r3, [r7, #19]

	/* Update Task Actuator Counter */
	g_task_actuator_cnt++;
 8002294:	4b43      	ldr	r3, [pc, #268]	@ (80023a4 <task_actuator_update+0x11c>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	3301      	adds	r3, #1
 800229a:	4a42      	ldr	r2, [pc, #264]	@ (80023a4 <task_actuator_update+0x11c>)
 800229c:	6013      	str	r3, [r2, #0]

	/* Protect shared resource (g_task_actuator_tick_cnt) */
	__asm("CPSID i");	/* disable interrupts*/
 800229e:	b672      	cpsid	i
    if (G_TASK_ACT_TICK_CNT_INI < g_task_actuator_tick_cnt)
 80022a0:	4b41      	ldr	r3, [pc, #260]	@ (80023a8 <task_actuator_update+0x120>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d006      	beq.n	80022b6 <task_actuator_update+0x2e>
    {
    	g_task_actuator_tick_cnt--;
 80022a8:	4b3f      	ldr	r3, [pc, #252]	@ (80023a8 <task_actuator_update+0x120>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	3b01      	subs	r3, #1
 80022ae:	4a3e      	ldr	r2, [pc, #248]	@ (80023a8 <task_actuator_update+0x120>)
 80022b0:	6013      	str	r3, [r2, #0]
    	b_time_update_required = true;
 80022b2:	2301      	movs	r3, #1
 80022b4:	74fb      	strb	r3, [r7, #19]
    }
    __asm("CPSIE i");	/* enable interrupts*/
 80022b6:	b662      	cpsie	i

    while (b_time_update_required)
 80022b8:	e06b      	b.n	8002392 <task_actuator_update+0x10a>
    {
		/* Protect shared resource (g_task_actuator_tick_cnt) */
		__asm("CPSID i");	/* disable interrupts*/
 80022ba:	b672      	cpsid	i
		if (G_TASK_ACT_TICK_CNT_INI < g_task_actuator_tick_cnt)
 80022bc:	4b3a      	ldr	r3, [pc, #232]	@ (80023a8 <task_actuator_update+0x120>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d007      	beq.n	80022d4 <task_actuator_update+0x4c>
		{
			g_task_actuator_tick_cnt--;
 80022c4:	4b38      	ldr	r3, [pc, #224]	@ (80023a8 <task_actuator_update+0x120>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	3b01      	subs	r3, #1
 80022ca:	4a37      	ldr	r2, [pc, #220]	@ (80023a8 <task_actuator_update+0x120>)
 80022cc:	6013      	str	r3, [r2, #0]
			b_time_update_required = true;
 80022ce:	2301      	movs	r3, #1
 80022d0:	74fb      	strb	r3, [r7, #19]
 80022d2:	e001      	b.n	80022d8 <task_actuator_update+0x50>
		}
		else
		{
			b_time_update_required = false;
 80022d4:	2300      	movs	r3, #0
 80022d6:	74fb      	strb	r3, [r7, #19]
		}
		__asm("CPSIE i");	/* enable interrupts*/
 80022d8:	b662      	cpsie	i

    	for (index = 0; ACTUATOR_DTA_QTY > index; index++)
 80022da:	2300      	movs	r3, #0
 80022dc:	617b      	str	r3, [r7, #20]
 80022de:	e055      	b.n	800238c <task_actuator_update+0x104>
		{
    		/* Update Task Actuator Configuration & Data Pointer */
			p_task_actuator_cfg = &task_actuator_cfg_list[index];
 80022e0:	697a      	ldr	r2, [r7, #20]
 80022e2:	4613      	mov	r3, r2
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	4413      	add	r3, r2
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	4a30      	ldr	r2, [pc, #192]	@ (80023ac <task_actuator_update+0x124>)
 80022ec:	4413      	add	r3, r2
 80022ee:	60fb      	str	r3, [r7, #12]
			p_task_actuator_dta = &task_actuator_dta_list[index];
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	4a2e      	ldr	r2, [pc, #184]	@ (80023b0 <task_actuator_update+0x128>)
 80022f6:	4413      	add	r3, r2
 80022f8:	60bb      	str	r3, [r7, #8]

			switch (p_task_actuator_dta->state)
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	791b      	ldrb	r3, [r3, #4]
 80022fe:	2b04      	cmp	r3, #4
 8002300:	d83c      	bhi.n	800237c <task_actuator_update+0xf4>
 8002302:	a201      	add	r2, pc, #4	@ (adr r2, 8002308 <task_actuator_update+0x80>)
 8002304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002308:	0800231d 	.word	0x0800231d
 800230c:	0800234d 	.word	0x0800234d
 8002310:	0800237d 	.word	0x0800237d
 8002314:	0800237d 	.word	0x0800237d
 8002318:	0800237d 	.word	0x0800237d
			{
				case ST_ACT_XX_OFF:

					if ((true == p_task_actuator_dta->flag) && (EV_ACT_XX_ON == p_task_actuator_dta->event))
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	799b      	ldrb	r3, [r3, #6]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d02d      	beq.n	8002380 <task_actuator_update+0xf8>
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	795b      	ldrb	r3, [r3, #5]
 8002328:	2b01      	cmp	r3, #1
 800232a:	d129      	bne.n	8002380 <task_actuator_update+0xf8>
					{
						p_task_actuator_dta->flag = false;
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	2200      	movs	r2, #0
 8002330:	719a      	strb	r2, [r3, #6]
						HAL_GPIO_WritePin(p_task_actuator_cfg->gpio_port, p_task_actuator_cfg->pin, p_task_actuator_cfg->act_on);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6858      	ldr	r0, [r3, #4]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	8919      	ldrh	r1, [r3, #8]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	7a9b      	ldrb	r3, [r3, #10]
 800233e:	461a      	mov	r2, r3
 8002340:	f7fe fc99 	bl	8000c76 <HAL_GPIO_WritePin>
						p_task_actuator_dta->state = ST_ACT_XX_ON;
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	2201      	movs	r2, #1
 8002348:	711a      	strb	r2, [r3, #4]
					}

					break;
 800234a:	e019      	b.n	8002380 <task_actuator_update+0xf8>

				case ST_ACT_XX_ON:

					if ((true == p_task_actuator_dta->flag) && (EV_ACT_XX_OFF == p_task_actuator_dta->event))
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	799b      	ldrb	r3, [r3, #6]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d017      	beq.n	8002384 <task_actuator_update+0xfc>
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	795b      	ldrb	r3, [r3, #5]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d113      	bne.n	8002384 <task_actuator_update+0xfc>
					{
						p_task_actuator_dta->flag = false;
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	2200      	movs	r2, #0
 8002360:	719a      	strb	r2, [r3, #6]
						HAL_GPIO_WritePin(p_task_actuator_cfg->gpio_port, p_task_actuator_cfg->pin, p_task_actuator_cfg->act_off);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	6858      	ldr	r0, [r3, #4]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	8919      	ldrh	r1, [r3, #8]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	7adb      	ldrb	r3, [r3, #11]
 800236e:	461a      	mov	r2, r3
 8002370:	f7fe fc81 	bl	8000c76 <HAL_GPIO_WritePin>
						p_task_actuator_dta->state = ST_ACT_XX_OFF;
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	2200      	movs	r2, #0
 8002378:	711a      	strb	r2, [r3, #4]
					}

					break;
 800237a:	e003      	b.n	8002384 <task_actuator_update+0xfc>

					break;

				default:

					break;
 800237c:	bf00      	nop
 800237e:	e002      	b.n	8002386 <task_actuator_update+0xfe>
					break;
 8002380:	bf00      	nop
 8002382:	e000      	b.n	8002386 <task_actuator_update+0xfe>
					break;
 8002384:	bf00      	nop
    	for (index = 0; ACTUATOR_DTA_QTY > index; index++)
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	3301      	adds	r3, #1
 800238a:	617b      	str	r3, [r7, #20]
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	2b02      	cmp	r3, #2
 8002390:	d9a6      	bls.n	80022e0 <task_actuator_update+0x58>
    while (b_time_update_required)
 8002392:	7cfb      	ldrb	r3, [r7, #19]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d190      	bne.n	80022ba <task_actuator_update+0x32>
			}
		}
    }
}
 8002398:	bf00      	nop
 800239a:	bf00      	nop
 800239c:	3718      	adds	r7, #24
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	2000017c 	.word	0x2000017c
 80023a8:	20000180 	.word	0x20000180
 80023ac:	0800456c 	.word	0x0800456c
 80023b0:	20000014 	.word	0x20000014

080023b4 <put_event_task_actuator>:

/********************** external data declaration ****************************/

/********************** external functions definition ************************/
void put_event_task_actuator(task_actuator_ev_t event, task_actuator_id_t identifier)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b085      	sub	sp, #20
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	4603      	mov	r3, r0
 80023bc:	460a      	mov	r2, r1
 80023be:	71fb      	strb	r3, [r7, #7]
 80023c0:	4613      	mov	r3, r2
 80023c2:	71bb      	strb	r3, [r7, #6]
	task_actuator_dta_t *p_task_actuator_dta;

	p_task_actuator_dta = &task_actuator_dta_list[identifier];
 80023c4:	79bb      	ldrb	r3, [r7, #6]
 80023c6:	00db      	lsls	r3, r3, #3
 80023c8:	4a06      	ldr	r2, [pc, #24]	@ (80023e4 <put_event_task_actuator+0x30>)
 80023ca:	4413      	add	r3, r2
 80023cc:	60fb      	str	r3, [r7, #12]

	p_task_actuator_dta->event = event;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	79fa      	ldrb	r2, [r7, #7]
 80023d2:	715a      	strb	r2, [r3, #5]
	p_task_actuator_dta->flag = true;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2201      	movs	r2, #1
 80023d8:	719a      	strb	r2, [r3, #6]
}
 80023da:	bf00      	nop
 80023dc:	3714      	adds	r7, #20
 80023de:	46bd      	mov	sp, r7
 80023e0:	bc80      	pop	{r7}
 80023e2:	4770      	bx	lr
 80023e4:	20000014 	.word	0x20000014

080023e8 <task_sensor_init>:
uint32_t g_task_sensor_cnt;
volatile uint32_t g_task_sensor_tick_cnt;

/********************** external functions definition ************************/
void task_sensor_init(void *parameters)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b088      	sub	sp, #32
 80023ec:	af02      	add	r7, sp, #8
 80023ee:	6078      	str	r0, [r7, #4]
	task_sensor_dta_t *p_task_sensor_dta;
	task_sensor_st_t state;
	task_sensor_ev_t event;

	/* Print out: Task Initialized */
	LOGGER_LOG("  %s is running - %s\r\n", GET_NAME(task_sensor_init), p_task_sensor);
 80023f0:	b672      	cpsid	i
 80023f2:	4b49      	ldr	r3, [pc, #292]	@ (8002518 <task_sensor_init+0x130>)
 80023f4:	6818      	ldr	r0, [r3, #0]
 80023f6:	4b49      	ldr	r3, [pc, #292]	@ (800251c <task_sensor_init+0x134>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	9300      	str	r3, [sp, #0]
 80023fc:	4b48      	ldr	r3, [pc, #288]	@ (8002520 <task_sensor_init+0x138>)
 80023fe:	4a49      	ldr	r2, [pc, #292]	@ (8002524 <task_sensor_init+0x13c>)
 8002400:	213f      	movs	r1, #63	@ 0x3f
 8002402:	f000 ff23 	bl	800324c <sniprintf>
 8002406:	4603      	mov	r3, r0
 8002408:	4a47      	ldr	r2, [pc, #284]	@ (8002528 <task_sensor_init+0x140>)
 800240a:	6013      	str	r3, [r2, #0]
 800240c:	4b42      	ldr	r3, [pc, #264]	@ (8002518 <task_sensor_init+0x130>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4618      	mov	r0, r3
 8002412:	f7ff fe35 	bl	8002080 <logger_log_print_>
 8002416:	b662      	cpsie	i
	LOGGER_LOG("  %s is a %s\r\n", GET_NAME(task_sensor), p_task_sensor_);
 8002418:	b672      	cpsid	i
 800241a:	4b3f      	ldr	r3, [pc, #252]	@ (8002518 <task_sensor_init+0x130>)
 800241c:	6818      	ldr	r0, [r3, #0]
 800241e:	4b43      	ldr	r3, [pc, #268]	@ (800252c <task_sensor_init+0x144>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	9300      	str	r3, [sp, #0]
 8002424:	4b42      	ldr	r3, [pc, #264]	@ (8002530 <task_sensor_init+0x148>)
 8002426:	4a43      	ldr	r2, [pc, #268]	@ (8002534 <task_sensor_init+0x14c>)
 8002428:	213f      	movs	r1, #63	@ 0x3f
 800242a:	f000 ff0f 	bl	800324c <sniprintf>
 800242e:	4603      	mov	r3, r0
 8002430:	4a3d      	ldr	r2, [pc, #244]	@ (8002528 <task_sensor_init+0x140>)
 8002432:	6013      	str	r3, [r2, #0]
 8002434:	4b38      	ldr	r3, [pc, #224]	@ (8002518 <task_sensor_init+0x130>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4618      	mov	r0, r3
 800243a:	f7ff fe21 	bl	8002080 <logger_log_print_>
 800243e:	b662      	cpsie	i

	g_task_sensor_cnt = G_TASK_SEN_CNT_INIT;
 8002440:	4b3d      	ldr	r3, [pc, #244]	@ (8002538 <task_sensor_init+0x150>)
 8002442:	2200      	movs	r2, #0
 8002444:	601a      	str	r2, [r3, #0]

	/* Print out: Task execution counter */
	LOGGER_LOG("   %s = %lu\r\n", GET_NAME(g_task_sensor_cnt), g_task_sensor_cnt);
 8002446:	b672      	cpsid	i
 8002448:	4b33      	ldr	r3, [pc, #204]	@ (8002518 <task_sensor_init+0x130>)
 800244a:	6818      	ldr	r0, [r3, #0]
 800244c:	4b3a      	ldr	r3, [pc, #232]	@ (8002538 <task_sensor_init+0x150>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	9300      	str	r3, [sp, #0]
 8002452:	4b3a      	ldr	r3, [pc, #232]	@ (800253c <task_sensor_init+0x154>)
 8002454:	4a3a      	ldr	r2, [pc, #232]	@ (8002540 <task_sensor_init+0x158>)
 8002456:	213f      	movs	r1, #63	@ 0x3f
 8002458:	f000 fef8 	bl	800324c <sniprintf>
 800245c:	4603      	mov	r3, r0
 800245e:	4a32      	ldr	r2, [pc, #200]	@ (8002528 <task_sensor_init+0x140>)
 8002460:	6013      	str	r3, [r2, #0]
 8002462:	4b2d      	ldr	r3, [pc, #180]	@ (8002518 <task_sensor_init+0x130>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4618      	mov	r0, r3
 8002468:	f7ff fe0a 	bl	8002080 <logger_log_print_>
 800246c:	b662      	cpsie	i

	for (index = 0; SENSOR_DTA_QTY > index; index++)
 800246e:	2300      	movs	r3, #0
 8002470:	617b      	str	r3, [r7, #20]
 8002472:	e046      	b.n	8002502 <task_sensor_init+0x11a>
	{
		/* Update Task Sensor Data Pointer */
		p_task_sensor_dta = &task_sensor_dta_list[index];
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	00db      	lsls	r3, r3, #3
 8002478:	4a32      	ldr	r2, [pc, #200]	@ (8002544 <task_sensor_init+0x15c>)
 800247a:	4413      	add	r3, r2
 800247c:	613b      	str	r3, [r7, #16]

		/* Print out: Index & Task execution FSM */
		LOGGER_LOG("   %s = %lu", GET_NAME(index), index);
 800247e:	b672      	cpsid	i
 8002480:	4b25      	ldr	r3, [pc, #148]	@ (8002518 <task_sensor_init+0x130>)
 8002482:	6818      	ldr	r0, [r3, #0]
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	9300      	str	r3, [sp, #0]
 8002488:	4b2f      	ldr	r3, [pc, #188]	@ (8002548 <task_sensor_init+0x160>)
 800248a:	4a30      	ldr	r2, [pc, #192]	@ (800254c <task_sensor_init+0x164>)
 800248c:	213f      	movs	r1, #63	@ 0x3f
 800248e:	f000 fedd 	bl	800324c <sniprintf>
 8002492:	4603      	mov	r3, r0
 8002494:	4a24      	ldr	r2, [pc, #144]	@ (8002528 <task_sensor_init+0x140>)
 8002496:	6013      	str	r3, [r2, #0]
 8002498:	4b1f      	ldr	r3, [pc, #124]	@ (8002518 <task_sensor_init+0x130>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4618      	mov	r0, r3
 800249e:	f7ff fdef 	bl	8002080 <logger_log_print_>
 80024a2:	b662      	cpsie	i

		state = p_task_sensor_dta->state;
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	791b      	ldrb	r3, [r3, #4]
 80024a8:	73fb      	strb	r3, [r7, #15]
		LOGGER_LOG("   %s = %lu", GET_NAME(state), (uint32_t)state);
 80024aa:	b672      	cpsid	i
 80024ac:	4b1a      	ldr	r3, [pc, #104]	@ (8002518 <task_sensor_init+0x130>)
 80024ae:	6818      	ldr	r0, [r3, #0]
 80024b0:	7bfb      	ldrb	r3, [r7, #15]
 80024b2:	9300      	str	r3, [sp, #0]
 80024b4:	4b26      	ldr	r3, [pc, #152]	@ (8002550 <task_sensor_init+0x168>)
 80024b6:	4a25      	ldr	r2, [pc, #148]	@ (800254c <task_sensor_init+0x164>)
 80024b8:	213f      	movs	r1, #63	@ 0x3f
 80024ba:	f000 fec7 	bl	800324c <sniprintf>
 80024be:	4603      	mov	r3, r0
 80024c0:	4a19      	ldr	r2, [pc, #100]	@ (8002528 <task_sensor_init+0x140>)
 80024c2:	6013      	str	r3, [r2, #0]
 80024c4:	4b14      	ldr	r3, [pc, #80]	@ (8002518 <task_sensor_init+0x130>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7ff fdd9 	bl	8002080 <logger_log_print_>
 80024ce:	b662      	cpsie	i

		event = p_task_sensor_dta->event;
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	795b      	ldrb	r3, [r3, #5]
 80024d4:	73bb      	strb	r3, [r7, #14]
		LOGGER_LOG("   %s = %lu\r\n", GET_NAME(event), (uint32_t)event);
 80024d6:	b672      	cpsid	i
 80024d8:	4b0f      	ldr	r3, [pc, #60]	@ (8002518 <task_sensor_init+0x130>)
 80024da:	6818      	ldr	r0, [r3, #0]
 80024dc:	7bbb      	ldrb	r3, [r7, #14]
 80024de:	9300      	str	r3, [sp, #0]
 80024e0:	4b1c      	ldr	r3, [pc, #112]	@ (8002554 <task_sensor_init+0x16c>)
 80024e2:	4a17      	ldr	r2, [pc, #92]	@ (8002540 <task_sensor_init+0x158>)
 80024e4:	213f      	movs	r1, #63	@ 0x3f
 80024e6:	f000 feb1 	bl	800324c <sniprintf>
 80024ea:	4603      	mov	r3, r0
 80024ec:	4a0e      	ldr	r2, [pc, #56]	@ (8002528 <task_sensor_init+0x140>)
 80024ee:	6013      	str	r3, [r2, #0]
 80024f0:	4b09      	ldr	r3, [pc, #36]	@ (8002518 <task_sensor_init+0x130>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7ff fdc3 	bl	8002080 <logger_log_print_>
 80024fa:	b662      	cpsie	i
	for (index = 0; SENSOR_DTA_QTY > index; index++)
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	3301      	adds	r3, #1
 8002500:	617b      	str	r3, [r7, #20]
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d0b5      	beq.n	8002474 <task_sensor_init+0x8c>
	}
	g_task_sensor_tick_cnt = G_TASK_SEN_TICK_CNT_INI;
 8002508:	4b13      	ldr	r3, [pc, #76]	@ (8002558 <task_sensor_init+0x170>)
 800250a:	2200      	movs	r2, #0
 800250c:	601a      	str	r2, [r3, #0]
}
 800250e:	bf00      	nop
 8002510:	3718      	adds	r7, #24
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	08004568 	.word	0x08004568
 800251c:	20000034 	.word	0x20000034
 8002520:	08004394 	.word	0x08004394
 8002524:	080043a8 	.word	0x080043a8
 8002528:	20000178 	.word	0x20000178
 800252c:	20000038 	.word	0x20000038
 8002530:	080043c0 	.word	0x080043c0
 8002534:	080043cc 	.word	0x080043cc
 8002538:	2000018c 	.word	0x2000018c
 800253c:	080043dc 	.word	0x080043dc
 8002540:	080043f0 	.word	0x080043f0
 8002544:	20000184 	.word	0x20000184
 8002548:	08004400 	.word	0x08004400
 800254c:	08004408 	.word	0x08004408
 8002550:	08004414 	.word	0x08004414
 8002554:	0800441c 	.word	0x0800441c
 8002558:	20000190 	.word	0x20000190

0800255c <task_sensor_update>:

void task_sensor_update(void *parameters)
{
 800255c:	b590      	push	{r4, r7, lr}
 800255e:	b087      	sub	sp, #28
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
	uint32_t index;
	const task_sensor_cfg_t *p_task_sensor_cfg;
	task_sensor_dta_t *p_task_sensor_dta;
	bool b_time_update_required = false;
 8002564:	2300      	movs	r3, #0
 8002566:	74fb      	strb	r3, [r7, #19]

	/* Update Task Sensor Counter */
	g_task_sensor_cnt++;
 8002568:	4b41      	ldr	r3, [pc, #260]	@ (8002670 <task_sensor_update+0x114>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	3301      	adds	r3, #1
 800256e:	4a40      	ldr	r2, [pc, #256]	@ (8002670 <task_sensor_update+0x114>)
 8002570:	6013      	str	r3, [r2, #0]

	/* Protect shared resource (g_task_sensor_tick_cnt) */
	__asm("CPSID i");	/* disable interrupts*/
 8002572:	b672      	cpsid	i
    if (G_TASK_SEN_TICK_CNT_INI < g_task_sensor_tick_cnt)
 8002574:	4b3f      	ldr	r3, [pc, #252]	@ (8002674 <task_sensor_update+0x118>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d006      	beq.n	800258a <task_sensor_update+0x2e>
    {
    	g_task_sensor_tick_cnt--;
 800257c:	4b3d      	ldr	r3, [pc, #244]	@ (8002674 <task_sensor_update+0x118>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	3b01      	subs	r3, #1
 8002582:	4a3c      	ldr	r2, [pc, #240]	@ (8002674 <task_sensor_update+0x118>)
 8002584:	6013      	str	r3, [r2, #0]
    	b_time_update_required = true;
 8002586:	2301      	movs	r3, #1
 8002588:	74fb      	strb	r3, [r7, #19]
    }
    __asm("CPSIE i");	/* enable interrupts*/
 800258a:	b662      	cpsie	i

    while (b_time_update_required)
 800258c:	e067      	b.n	800265e <task_sensor_update+0x102>
    {
		/* Protect shared resource (g_task_sensor_tick_cnt) */
		__asm("CPSID i");	/* disable interrupts*/
 800258e:	b672      	cpsid	i
		if (G_TASK_SEN_TICK_CNT_INI < g_task_sensor_tick_cnt)
 8002590:	4b38      	ldr	r3, [pc, #224]	@ (8002674 <task_sensor_update+0x118>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d007      	beq.n	80025a8 <task_sensor_update+0x4c>
		{
			g_task_sensor_tick_cnt--;
 8002598:	4b36      	ldr	r3, [pc, #216]	@ (8002674 <task_sensor_update+0x118>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	3b01      	subs	r3, #1
 800259e:	4a35      	ldr	r2, [pc, #212]	@ (8002674 <task_sensor_update+0x118>)
 80025a0:	6013      	str	r3, [r2, #0]
			b_time_update_required = true;
 80025a2:	2301      	movs	r3, #1
 80025a4:	74fb      	strb	r3, [r7, #19]
 80025a6:	e001      	b.n	80025ac <task_sensor_update+0x50>
		}
		else
		{
			b_time_update_required = false;
 80025a8:	2300      	movs	r3, #0
 80025aa:	74fb      	strb	r3, [r7, #19]
		}
		__asm("CPSIE i");	/* enable interrupts*/
 80025ac:	b662      	cpsie	i

    	for (index = 0; SENSOR_DTA_QTY > index; index++)
 80025ae:	2300      	movs	r3, #0
 80025b0:	617b      	str	r3, [r7, #20]
 80025b2:	e051      	b.n	8002658 <task_sensor_update+0xfc>
		{
    		/* Update Task Sensor Configuration & Data Pointer */
			p_task_sensor_cfg = &task_sensor_cfg_list[index];
 80025b4:	697a      	ldr	r2, [r7, #20]
 80025b6:	4613      	mov	r3, r2
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	4413      	add	r3, r2
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	4a2e      	ldr	r2, [pc, #184]	@ (8002678 <task_sensor_update+0x11c>)
 80025c0:	4413      	add	r3, r2
 80025c2:	60fb      	str	r3, [r7, #12]
			p_task_sensor_dta = &task_sensor_dta_list[index];
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	00db      	lsls	r3, r3, #3
 80025c8:	4a2c      	ldr	r2, [pc, #176]	@ (800267c <task_sensor_update+0x120>)
 80025ca:	4413      	add	r3, r2
 80025cc:	60bb      	str	r3, [r7, #8]

			if (p_task_sensor_cfg->pressed == HAL_GPIO_ReadPin(p_task_sensor_cfg->gpio_port, p_task_sensor_cfg->pin))
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	7a9c      	ldrb	r4, [r3, #10]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	685a      	ldr	r2, [r3, #4]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	891b      	ldrh	r3, [r3, #8]
 80025da:	4619      	mov	r1, r3
 80025dc:	4610      	mov	r0, r2
 80025de:	f7fe fb33 	bl	8000c48 <HAL_GPIO_ReadPin>
 80025e2:	4603      	mov	r3, r0
 80025e4:	429c      	cmp	r4, r3
 80025e6:	d103      	bne.n	80025f0 <task_sensor_update+0x94>
			{
				p_task_sensor_dta->event =	EV_BTN_XX_DOWN;
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	2201      	movs	r2, #1
 80025ec:	715a      	strb	r2, [r3, #5]
 80025ee:	e002      	b.n	80025f6 <task_sensor_update+0x9a>
			}
			else
			{
				p_task_sensor_dta->event =	EV_BTN_XX_UP;
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	2200      	movs	r2, #0
 80025f4:	715a      	strb	r2, [r3, #5]
			}

			switch (p_task_sensor_dta->state)
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	791b      	ldrb	r3, [r3, #4]
 80025fa:	2b03      	cmp	r3, #3
 80025fc:	d824      	bhi.n	8002648 <task_sensor_update+0xec>
 80025fe:	a201      	add	r2, pc, #4	@ (adr r2, 8002604 <task_sensor_update+0xa8>)
 8002600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002604:	08002615 	.word	0x08002615
 8002608:	08002649 	.word	0x08002649
 800260c:	0800262f 	.word	0x0800262f
 8002610:	08002649 	.word	0x08002649
			{
				case ST_BTN_XX_UP:

					if (EV_BTN_XX_DOWN == p_task_sensor_dta->event)
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	795b      	ldrb	r3, [r3, #5]
 8002618:	2b01      	cmp	r3, #1
 800261a:	d117      	bne.n	800264c <task_sensor_update+0xf0>
					{
						put_event_task_system(p_task_sensor_cfg->signal_down);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	7c5b      	ldrb	r3, [r3, #17]
 8002620:	4618      	mov	r0, r3
 8002622:	f000 f993 	bl	800294c <put_event_task_system>
						p_task_sensor_dta->state = ST_BTN_XX_DOWN;
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	2202      	movs	r2, #2
 800262a:	711a      	strb	r2, [r3, #4]
					}

					break;
 800262c:	e00e      	b.n	800264c <task_sensor_update+0xf0>

					break;

				case ST_BTN_XX_DOWN:

					if (EV_BTN_XX_UP == p_task_sensor_dta->event)
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	795b      	ldrb	r3, [r3, #5]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d10c      	bne.n	8002650 <task_sensor_update+0xf4>
					{
						put_event_task_system(p_task_sensor_cfg->signal_up);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	7c1b      	ldrb	r3, [r3, #16]
 800263a:	4618      	mov	r0, r3
 800263c:	f000 f986 	bl	800294c <put_event_task_system>
						p_task_sensor_dta->state = ST_BTN_XX_UP;
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	2200      	movs	r2, #0
 8002644:	711a      	strb	r2, [r3, #4]
					}

					break;
 8002646:	e003      	b.n	8002650 <task_sensor_update+0xf4>

					break;

				default:

					break;
 8002648:	bf00      	nop
 800264a:	e002      	b.n	8002652 <task_sensor_update+0xf6>
					break;
 800264c:	bf00      	nop
 800264e:	e000      	b.n	8002652 <task_sensor_update+0xf6>
					break;
 8002650:	bf00      	nop
    	for (index = 0; SENSOR_DTA_QTY > index; index++)
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	3301      	adds	r3, #1
 8002656:	617b      	str	r3, [r7, #20]
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d0aa      	beq.n	80025b4 <task_sensor_update+0x58>
    while (b_time_update_required)
 800265e:	7cfb      	ldrb	r3, [r7, #19]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d194      	bne.n	800258e <task_sensor_update+0x32>
			}
		}
    }
}
 8002664:	bf00      	nop
 8002666:	bf00      	nop
 8002668:	371c      	adds	r7, #28
 800266a:	46bd      	mov	sp, r7
 800266c:	bd90      	pop	{r4, r7, pc}
 800266e:	bf00      	nop
 8002670:	2000018c 	.word	0x2000018c
 8002674:	20000190 	.word	0x20000190
 8002678:	080045a8 	.word	0x080045a8
 800267c:	20000184 	.word	0x20000184

08002680 <task_system_init>:

I2C_LCD_HandleTypeDef lcd1;

/********************** external functions definition ************************/
void task_system_init(void *parameters)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b086      	sub	sp, #24
 8002684:	af02      	add	r7, sp, #8
 8002686:	6078      	str	r0, [r7, #4]
	task_system_st_t	state;
	task_system_ev_t	event;
	bool b_event;

	/* Print out: Task Initialized */
	LOGGER_LOG("  %s is running - %s\r\n", GET_NAME(task_system_init), p_task_system);
 8002688:	b672      	cpsid	i
 800268a:	4b4c      	ldr	r3, [pc, #304]	@ (80027bc <task_system_init+0x13c>)
 800268c:	6818      	ldr	r0, [r3, #0]
 800268e:	4b4c      	ldr	r3, [pc, #304]	@ (80027c0 <task_system_init+0x140>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	9300      	str	r3, [sp, #0]
 8002694:	4b4b      	ldr	r3, [pc, #300]	@ (80027c4 <task_system_init+0x144>)
 8002696:	4a4c      	ldr	r2, [pc, #304]	@ (80027c8 <task_system_init+0x148>)
 8002698:	213f      	movs	r1, #63	@ 0x3f
 800269a:	f000 fdd7 	bl	800324c <sniprintf>
 800269e:	4603      	mov	r3, r0
 80026a0:	4a4a      	ldr	r2, [pc, #296]	@ (80027cc <task_system_init+0x14c>)
 80026a2:	6013      	str	r3, [r2, #0]
 80026a4:	4b45      	ldr	r3, [pc, #276]	@ (80027bc <task_system_init+0x13c>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7ff fce9 	bl	8002080 <logger_log_print_>
 80026ae:	b662      	cpsie	i
	LOGGER_LOG("  %s is a %s\r\n", GET_NAME(task_system), p_task_system_);
 80026b0:	b672      	cpsid	i
 80026b2:	4b42      	ldr	r3, [pc, #264]	@ (80027bc <task_system_init+0x13c>)
 80026b4:	6818      	ldr	r0, [r3, #0]
 80026b6:	4b46      	ldr	r3, [pc, #280]	@ (80027d0 <task_system_init+0x150>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	9300      	str	r3, [sp, #0]
 80026bc:	4b45      	ldr	r3, [pc, #276]	@ (80027d4 <task_system_init+0x154>)
 80026be:	4a46      	ldr	r2, [pc, #280]	@ (80027d8 <task_system_init+0x158>)
 80026c0:	213f      	movs	r1, #63	@ 0x3f
 80026c2:	f000 fdc3 	bl	800324c <sniprintf>
 80026c6:	4603      	mov	r3, r0
 80026c8:	4a40      	ldr	r2, [pc, #256]	@ (80027cc <task_system_init+0x14c>)
 80026ca:	6013      	str	r3, [r2, #0]
 80026cc:	4b3b      	ldr	r3, [pc, #236]	@ (80027bc <task_system_init+0x13c>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7ff fcd5 	bl	8002080 <logger_log_print_>
 80026d6:	b662      	cpsie	i

	g_task_system_cnt = G_TASK_SYS_CNT_INI;
 80026d8:	4b40      	ldr	r3, [pc, #256]	@ (80027dc <task_system_init+0x15c>)
 80026da:	2200      	movs	r2, #0
 80026dc:	601a      	str	r2, [r3, #0]

	/* Print out: Task execution counter */
	LOGGER_LOG("   %s = %lu\r\n", GET_NAME(g_task_system_cnt), g_task_system_cnt);
 80026de:	b672      	cpsid	i
 80026e0:	4b36      	ldr	r3, [pc, #216]	@ (80027bc <task_system_init+0x13c>)
 80026e2:	6818      	ldr	r0, [r3, #0]
 80026e4:	4b3d      	ldr	r3, [pc, #244]	@ (80027dc <task_system_init+0x15c>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	9300      	str	r3, [sp, #0]
 80026ea:	4b3d      	ldr	r3, [pc, #244]	@ (80027e0 <task_system_init+0x160>)
 80026ec:	4a3d      	ldr	r2, [pc, #244]	@ (80027e4 <task_system_init+0x164>)
 80026ee:	213f      	movs	r1, #63	@ 0x3f
 80026f0:	f000 fdac 	bl	800324c <sniprintf>
 80026f4:	4603      	mov	r3, r0
 80026f6:	4a35      	ldr	r2, [pc, #212]	@ (80027cc <task_system_init+0x14c>)
 80026f8:	6013      	str	r3, [r2, #0]
 80026fa:	4b30      	ldr	r3, [pc, #192]	@ (80027bc <task_system_init+0x13c>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4618      	mov	r0, r3
 8002700:	f7ff fcbe 	bl	8002080 <logger_log_print_>
 8002704:	b662      	cpsie	i

	init_queue_event_task_system();
 8002706:	f000 f8fd 	bl	8002904 <init_queue_event_task_system>

	/* Update Task Actuator Configuration & Data Pointer */
	p_task_system_dta = &task_system_dta;
 800270a:	4b37      	ldr	r3, [pc, #220]	@ (80027e8 <task_system_init+0x168>)
 800270c:	60fb      	str	r3, [r7, #12]

	/* Print out: Task execution FSM */
	state = p_task_system_dta->state;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	791b      	ldrb	r3, [r3, #4]
 8002712:	72fb      	strb	r3, [r7, #11]
	LOGGER_LOG("   %s = %lu", GET_NAME(state), (uint32_t)state);
 8002714:	b672      	cpsid	i
 8002716:	4b29      	ldr	r3, [pc, #164]	@ (80027bc <task_system_init+0x13c>)
 8002718:	6818      	ldr	r0, [r3, #0]
 800271a:	7afb      	ldrb	r3, [r7, #11]
 800271c:	9300      	str	r3, [sp, #0]
 800271e:	4b33      	ldr	r3, [pc, #204]	@ (80027ec <task_system_init+0x16c>)
 8002720:	4a33      	ldr	r2, [pc, #204]	@ (80027f0 <task_system_init+0x170>)
 8002722:	213f      	movs	r1, #63	@ 0x3f
 8002724:	f000 fd92 	bl	800324c <sniprintf>
 8002728:	4603      	mov	r3, r0
 800272a:	4a28      	ldr	r2, [pc, #160]	@ (80027cc <task_system_init+0x14c>)
 800272c:	6013      	str	r3, [r2, #0]
 800272e:	4b23      	ldr	r3, [pc, #140]	@ (80027bc <task_system_init+0x13c>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4618      	mov	r0, r3
 8002734:	f7ff fca4 	bl	8002080 <logger_log_print_>
 8002738:	b662      	cpsie	i

	event = p_task_system_dta->event;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	795b      	ldrb	r3, [r3, #5]
 800273e:	72bb      	strb	r3, [r7, #10]
	LOGGER_LOG("   %s = %lu", GET_NAME(event), (uint32_t)event);
 8002740:	b672      	cpsid	i
 8002742:	4b1e      	ldr	r3, [pc, #120]	@ (80027bc <task_system_init+0x13c>)
 8002744:	6818      	ldr	r0, [r3, #0]
 8002746:	7abb      	ldrb	r3, [r7, #10]
 8002748:	9300      	str	r3, [sp, #0]
 800274a:	4b2a      	ldr	r3, [pc, #168]	@ (80027f4 <task_system_init+0x174>)
 800274c:	4a28      	ldr	r2, [pc, #160]	@ (80027f0 <task_system_init+0x170>)
 800274e:	213f      	movs	r1, #63	@ 0x3f
 8002750:	f000 fd7c 	bl	800324c <sniprintf>
 8002754:	4603      	mov	r3, r0
 8002756:	4a1d      	ldr	r2, [pc, #116]	@ (80027cc <task_system_init+0x14c>)
 8002758:	6013      	str	r3, [r2, #0]
 800275a:	4b18      	ldr	r3, [pc, #96]	@ (80027bc <task_system_init+0x13c>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4618      	mov	r0, r3
 8002760:	f7ff fc8e 	bl	8002080 <logger_log_print_>
 8002764:	b662      	cpsie	i

	b_event = p_task_system_dta->flag;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	799b      	ldrb	r3, [r3, #6]
 800276a:	727b      	strb	r3, [r7, #9]
	LOGGER_LOG("   %s = %s\r\n", GET_NAME(b_event), (b_event ? "true" : "false"));
 800276c:	b672      	cpsid	i
 800276e:	4b13      	ldr	r3, [pc, #76]	@ (80027bc <task_system_init+0x13c>)
 8002770:	6818      	ldr	r0, [r3, #0]
 8002772:	7a7b      	ldrb	r3, [r7, #9]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d001      	beq.n	800277c <task_system_init+0xfc>
 8002778:	4b1f      	ldr	r3, [pc, #124]	@ (80027f8 <task_system_init+0x178>)
 800277a:	e000      	b.n	800277e <task_system_init+0xfe>
 800277c:	4b1f      	ldr	r3, [pc, #124]	@ (80027fc <task_system_init+0x17c>)
 800277e:	9300      	str	r3, [sp, #0]
 8002780:	4b1f      	ldr	r3, [pc, #124]	@ (8002800 <task_system_init+0x180>)
 8002782:	4a20      	ldr	r2, [pc, #128]	@ (8002804 <task_system_init+0x184>)
 8002784:	213f      	movs	r1, #63	@ 0x3f
 8002786:	f000 fd61 	bl	800324c <sniprintf>
 800278a:	4603      	mov	r3, r0
 800278c:	4a0f      	ldr	r2, [pc, #60]	@ (80027cc <task_system_init+0x14c>)
 800278e:	6013      	str	r3, [r2, #0]
 8002790:	4b0a      	ldr	r3, [pc, #40]	@ (80027bc <task_system_init+0x13c>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4618      	mov	r0, r3
 8002796:	f7ff fc73 	bl	8002080 <logger_log_print_>
 800279a:	b662      	cpsie	i

	/* Init LCD Screen */
	lcd1.hi2c = &hi2c1;
 800279c:	4b1a      	ldr	r3, [pc, #104]	@ (8002808 <task_system_init+0x188>)
 800279e:	4a1b      	ldr	r2, [pc, #108]	@ (800280c <task_system_init+0x18c>)
 80027a0:	601a      	str	r2, [r3, #0]
	lcd1.address = 0x4E;
 80027a2:	4b19      	ldr	r3, [pc, #100]	@ (8002808 <task_system_init+0x188>)
 80027a4:	224e      	movs	r2, #78	@ 0x4e
 80027a6:	711a      	strb	r2, [r3, #4]
	lcd_init(&lcd1);
 80027a8:	4817      	ldr	r0, [pc, #92]	@ (8002808 <task_system_init+0x188>)
 80027aa:	f7fd ff11 	bl	80005d0 <lcd_init>

	g_task_system_tick_cnt = G_TASK_SYS_TICK_CNT_INI;
 80027ae:	4b18      	ldr	r3, [pc, #96]	@ (8002810 <task_system_init+0x190>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	601a      	str	r2, [r3, #0]
}
 80027b4:	bf00      	nop
 80027b6:	3710      	adds	r7, #16
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	08004568 	.word	0x08004568
 80027c0:	2000003c 	.word	0x2000003c
 80027c4:	08004468 	.word	0x08004468
 80027c8:	0800447c 	.word	0x0800447c
 80027cc:	20000178 	.word	0x20000178
 80027d0:	20000040 	.word	0x20000040
 80027d4:	08004494 	.word	0x08004494
 80027d8:	080044a0 	.word	0x080044a0
 80027dc:	2000019c 	.word	0x2000019c
 80027e0:	080044b0 	.word	0x080044b0
 80027e4:	080044c4 	.word	0x080044c4
 80027e8:	20000194 	.word	0x20000194
 80027ec:	080044d4 	.word	0x080044d4
 80027f0:	080044dc 	.word	0x080044dc
 80027f4:	080044e8 	.word	0x080044e8
 80027f8:	080044f0 	.word	0x080044f0
 80027fc:	080044f8 	.word	0x080044f8
 8002800:	08004500 	.word	0x08004500
 8002804:	08004508 	.word	0x08004508
 8002808:	200001a4 	.word	0x200001a4
 800280c:	200000c4 	.word	0x200000c4
 8002810:	200001a0 	.word	0x200001a0

08002814 <task_system_update>:

void task_system_update(void *parameters)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
	task_system_dta_t *p_task_system_dta;
	bool b_time_update_required = false;
 800281c:	2300      	movs	r3, #0
 800281e:	73fb      	strb	r3, [r7, #15]

	/* Update Task System Counter */
	g_task_system_cnt++;
 8002820:	4b35      	ldr	r3, [pc, #212]	@ (80028f8 <task_system_update+0xe4>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	3301      	adds	r3, #1
 8002826:	4a34      	ldr	r2, [pc, #208]	@ (80028f8 <task_system_update+0xe4>)
 8002828:	6013      	str	r3, [r2, #0]

	/* Protect shared resource (g_task_system_tick) */
	__asm("CPSID i");	/* disable interrupts*/
 800282a:	b672      	cpsid	i
    if (G_TASK_SYS_TICK_CNT_INI < g_task_system_tick_cnt)
 800282c:	4b33      	ldr	r3, [pc, #204]	@ (80028fc <task_system_update+0xe8>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d006      	beq.n	8002842 <task_system_update+0x2e>
    {
    	g_task_system_tick_cnt--;
 8002834:	4b31      	ldr	r3, [pc, #196]	@ (80028fc <task_system_update+0xe8>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	3b01      	subs	r3, #1
 800283a:	4a30      	ldr	r2, [pc, #192]	@ (80028fc <task_system_update+0xe8>)
 800283c:	6013      	str	r3, [r2, #0]
    	b_time_update_required = true;
 800283e:	2301      	movs	r3, #1
 8002840:	73fb      	strb	r3, [r7, #15]
    }
    __asm("CPSIE i");	/* enable interrupts*/
 8002842:	b662      	cpsie	i

    while (b_time_update_required)
 8002844:	e04f      	b.n	80028e6 <task_system_update+0xd2>
    {
		/* Protect shared resource (g_task_system_tick) */
		__asm("CPSID i");	/* disable interrupts*/
 8002846:	b672      	cpsid	i
		if (G_TASK_SYS_TICK_CNT_INI < g_task_system_tick_cnt)
 8002848:	4b2c      	ldr	r3, [pc, #176]	@ (80028fc <task_system_update+0xe8>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d007      	beq.n	8002860 <task_system_update+0x4c>
		{
			g_task_system_tick_cnt--;
 8002850:	4b2a      	ldr	r3, [pc, #168]	@ (80028fc <task_system_update+0xe8>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	3b01      	subs	r3, #1
 8002856:	4a29      	ldr	r2, [pc, #164]	@ (80028fc <task_system_update+0xe8>)
 8002858:	6013      	str	r3, [r2, #0]
			b_time_update_required = true;
 800285a:	2301      	movs	r3, #1
 800285c:	73fb      	strb	r3, [r7, #15]
 800285e:	e001      	b.n	8002864 <task_system_update+0x50>
		}
		else
		{
			b_time_update_required = false;
 8002860:	2300      	movs	r3, #0
 8002862:	73fb      	strb	r3, [r7, #15]
		}
		__asm("CPSIE i");	/* enable interrupts*/
 8002864:	b662      	cpsie	i

    	/* Update Task System Data Pointer */
		p_task_system_dta = &task_system_dta;
 8002866:	4b26      	ldr	r3, [pc, #152]	@ (8002900 <task_system_update+0xec>)
 8002868:	60bb      	str	r3, [r7, #8]

		if (true == any_event_task_system())
 800286a:	f000 f8b7 	bl	80029dc <any_event_task_system>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d008      	beq.n	8002886 <task_system_update+0x72>
		{
			p_task_system_dta->flag = true;
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	2201      	movs	r2, #1
 8002878:	719a      	strb	r2, [r3, #6]
			p_task_system_dta->event = get_event_task_system();
 800287a:	f000 f889 	bl	8002990 <get_event_task_system>
 800287e:	4603      	mov	r3, r0
 8002880:	461a      	mov	r2, r3
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	715a      	strb	r2, [r3, #5]
		}

		switch (p_task_system_dta->state)
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	791b      	ldrb	r3, [r3, #4]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d002      	beq.n	8002894 <task_system_update+0x80>
 800288e:	2b01      	cmp	r3, #1
 8002890:	d013      	beq.n	80028ba <task_system_update+0xa6>

				break;

			default:

				break;
 8002892:	e028      	b.n	80028e6 <task_system_update+0xd2>
				if ((true == p_task_system_dta->flag) && (EV_SYS_XX_ACTIVE == p_task_system_dta->event))
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	799b      	ldrb	r3, [r3, #6]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d021      	beq.n	80028e0 <task_system_update+0xcc>
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	795b      	ldrb	r3, [r3, #5]
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d11d      	bne.n	80028e0 <task_system_update+0xcc>
					p_task_system_dta->flag = false;
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	2200      	movs	r2, #0
 80028a8:	719a      	strb	r2, [r3, #6]
					put_event_task_actuator(EV_ACT_XX_ON, ID_LED_1);
 80028aa:	2100      	movs	r1, #0
 80028ac:	2001      	movs	r0, #1
 80028ae:	f7ff fd81 	bl	80023b4 <put_event_task_actuator>
					p_task_system_dta->state = ST_SYS_XX_ACTIVE;
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	2201      	movs	r2, #1
 80028b6:	711a      	strb	r2, [r3, #4]
				break;
 80028b8:	e012      	b.n	80028e0 <task_system_update+0xcc>
				if ((true == p_task_system_dta->flag) && (EV_SYS_XX_IDLE == p_task_system_dta->event))
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	799b      	ldrb	r3, [r3, #6]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d010      	beq.n	80028e4 <task_system_update+0xd0>
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	795b      	ldrb	r3, [r3, #5]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d10c      	bne.n	80028e4 <task_system_update+0xd0>
					p_task_system_dta->flag = false;
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	2200      	movs	r2, #0
 80028ce:	719a      	strb	r2, [r3, #6]
					put_event_task_actuator(EV_ACT_XX_OFF, ID_LED_1);
 80028d0:	2100      	movs	r1, #0
 80028d2:	2000      	movs	r0, #0
 80028d4:	f7ff fd6e 	bl	80023b4 <put_event_task_actuator>
					p_task_system_dta->state = ST_SYS_XX_IDLE;
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	2200      	movs	r2, #0
 80028dc:	711a      	strb	r2, [r3, #4]
				break;
 80028de:	e001      	b.n	80028e4 <task_system_update+0xd0>
				break;
 80028e0:	bf00      	nop
 80028e2:	e000      	b.n	80028e6 <task_system_update+0xd2>
				break;
 80028e4:	bf00      	nop
    while (b_time_update_required)
 80028e6:	7bfb      	ldrb	r3, [r7, #15]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d1ac      	bne.n	8002846 <task_system_update+0x32>
		}
	}
}
 80028ec:	bf00      	nop
 80028ee:	bf00      	nop
 80028f0:	3710      	adds	r7, #16
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	2000019c 	.word	0x2000019c
 80028fc:	200001a0 	.word	0x200001a0
 8002900:	20000194 	.word	0x20000194

08002904 <init_queue_event_task_system>:

/********************** external data declaration ****************************/

/********************** external functions definition ************************/
void init_queue_event_task_system(void)
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
	uint32_t i;

	queue_task_a.head = 0;
 800290a:	4b0f      	ldr	r3, [pc, #60]	@ (8002948 <init_queue_event_task_system+0x44>)
 800290c:	2200      	movs	r2, #0
 800290e:	601a      	str	r2, [r3, #0]
	queue_task_a.tail = 0;
 8002910:	4b0d      	ldr	r3, [pc, #52]	@ (8002948 <init_queue_event_task_system+0x44>)
 8002912:	2200      	movs	r2, #0
 8002914:	605a      	str	r2, [r3, #4]
	queue_task_a.count = 0;
 8002916:	4b0c      	ldr	r3, [pc, #48]	@ (8002948 <init_queue_event_task_system+0x44>)
 8002918:	2200      	movs	r2, #0
 800291a:	609a      	str	r2, [r3, #8]

	for (i = 0; i < MAX_EVENTS; i++)
 800291c:	2300      	movs	r3, #0
 800291e:	607b      	str	r3, [r7, #4]
 8002920:	e008      	b.n	8002934 <init_queue_event_task_system+0x30>
		queue_task_a.queue[i] = EVENT_UNDEFINED;
 8002922:	4a09      	ldr	r2, [pc, #36]	@ (8002948 <init_queue_event_task_system+0x44>)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	4413      	add	r3, r2
 8002928:	330c      	adds	r3, #12
 800292a:	22ff      	movs	r2, #255	@ 0xff
 800292c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < MAX_EVENTS; i++)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	3301      	adds	r3, #1
 8002932:	607b      	str	r3, [r7, #4]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2b0f      	cmp	r3, #15
 8002938:	d9f3      	bls.n	8002922 <init_queue_event_task_system+0x1e>
}
 800293a:	bf00      	nop
 800293c:	bf00      	nop
 800293e:	370c      	adds	r7, #12
 8002940:	46bd      	mov	sp, r7
 8002942:	bc80      	pop	{r7}
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	200001ac 	.word	0x200001ac

0800294c <put_event_task_system>:

void put_event_task_system(task_system_ev_t event)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	4603      	mov	r3, r0
 8002954:	71fb      	strb	r3, [r7, #7]
	queue_task_a.count++;
 8002956:	4b0d      	ldr	r3, [pc, #52]	@ (800298c <put_event_task_system+0x40>)
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	3301      	adds	r3, #1
 800295c:	4a0b      	ldr	r2, [pc, #44]	@ (800298c <put_event_task_system+0x40>)
 800295e:	6093      	str	r3, [r2, #8]
	queue_task_a.queue[queue_task_a.head++] = event;
 8002960:	4b0a      	ldr	r3, [pc, #40]	@ (800298c <put_event_task_system+0x40>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	1c5a      	adds	r2, r3, #1
 8002966:	4909      	ldr	r1, [pc, #36]	@ (800298c <put_event_task_system+0x40>)
 8002968:	600a      	str	r2, [r1, #0]
 800296a:	4a08      	ldr	r2, [pc, #32]	@ (800298c <put_event_task_system+0x40>)
 800296c:	4413      	add	r3, r2
 800296e:	79fa      	ldrb	r2, [r7, #7]
 8002970:	731a      	strb	r2, [r3, #12]

	if (MAX_EVENTS == queue_task_a.head)
 8002972:	4b06      	ldr	r3, [pc, #24]	@ (800298c <put_event_task_system+0x40>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	2b10      	cmp	r3, #16
 8002978:	d102      	bne.n	8002980 <put_event_task_system+0x34>
		queue_task_a.head = 0;
 800297a:	4b04      	ldr	r3, [pc, #16]	@ (800298c <put_event_task_system+0x40>)
 800297c:	2200      	movs	r2, #0
 800297e:	601a      	str	r2, [r3, #0]
}
 8002980:	bf00      	nop
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	bc80      	pop	{r7}
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	200001ac 	.word	0x200001ac

08002990 <get_event_task_system>:

task_system_ev_t get_event_task_system(void)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
	task_system_ev_t event;

	queue_task_a.count--;
 8002996:	4b10      	ldr	r3, [pc, #64]	@ (80029d8 <get_event_task_system+0x48>)
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	3b01      	subs	r3, #1
 800299c:	4a0e      	ldr	r2, [pc, #56]	@ (80029d8 <get_event_task_system+0x48>)
 800299e:	6093      	str	r3, [r2, #8]
	event = queue_task_a.queue[queue_task_a.tail];
 80029a0:	4b0d      	ldr	r3, [pc, #52]	@ (80029d8 <get_event_task_system+0x48>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	4a0c      	ldr	r2, [pc, #48]	@ (80029d8 <get_event_task_system+0x48>)
 80029a6:	4413      	add	r3, r2
 80029a8:	7b1b      	ldrb	r3, [r3, #12]
 80029aa:	71fb      	strb	r3, [r7, #7]
	queue_task_a.queue[queue_task_a.tail++] = EVENT_UNDEFINED;
 80029ac:	4b0a      	ldr	r3, [pc, #40]	@ (80029d8 <get_event_task_system+0x48>)
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	1c5a      	adds	r2, r3, #1
 80029b2:	4909      	ldr	r1, [pc, #36]	@ (80029d8 <get_event_task_system+0x48>)
 80029b4:	604a      	str	r2, [r1, #4]
 80029b6:	4a08      	ldr	r2, [pc, #32]	@ (80029d8 <get_event_task_system+0x48>)
 80029b8:	4413      	add	r3, r2
 80029ba:	22ff      	movs	r2, #255	@ 0xff
 80029bc:	731a      	strb	r2, [r3, #12]

	if (MAX_EVENTS == queue_task_a.tail)
 80029be:	4b06      	ldr	r3, [pc, #24]	@ (80029d8 <get_event_task_system+0x48>)
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	2b10      	cmp	r3, #16
 80029c4:	d102      	bne.n	80029cc <get_event_task_system+0x3c>
		queue_task_a.tail = 0;
 80029c6:	4b04      	ldr	r3, [pc, #16]	@ (80029d8 <get_event_task_system+0x48>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	605a      	str	r2, [r3, #4]

	return event;
 80029cc:	79fb      	ldrb	r3, [r7, #7]
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	370c      	adds	r7, #12
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bc80      	pop	{r7}
 80029d6:	4770      	bx	lr
 80029d8:	200001ac 	.word	0x200001ac

080029dc <any_event_task_system>:

bool any_event_task_system(void)
{
 80029dc:	b480      	push	{r7}
 80029de:	af00      	add	r7, sp, #0
  return (queue_task_a.head != queue_task_a.tail);
 80029e0:	4b06      	ldr	r3, [pc, #24]	@ (80029fc <any_event_task_system+0x20>)
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	4b05      	ldr	r3, [pc, #20]	@ (80029fc <any_event_task_system+0x20>)
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	bf14      	ite	ne
 80029ec:	2301      	movne	r3, #1
 80029ee:	2300      	moveq	r3, #0
 80029f0:	b2db      	uxtb	r3, r3
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bc80      	pop	{r7}
 80029f8:	4770      	bx	lr
 80029fa:	bf00      	nop
 80029fc:	200001ac 	.word	0x200001ac

08002a00 <findslot>:
 8002a00:	4b0a      	ldr	r3, [pc, #40]	@ (8002a2c <findslot+0x2c>)
 8002a02:	b510      	push	{r4, lr}
 8002a04:	4604      	mov	r4, r0
 8002a06:	6818      	ldr	r0, [r3, #0]
 8002a08:	b118      	cbz	r0, 8002a12 <findslot+0x12>
 8002a0a:	6a03      	ldr	r3, [r0, #32]
 8002a0c:	b90b      	cbnz	r3, 8002a12 <findslot+0x12>
 8002a0e:	f000 fbd5 	bl	80031bc <__sinit>
 8002a12:	2c13      	cmp	r4, #19
 8002a14:	d807      	bhi.n	8002a26 <findslot+0x26>
 8002a16:	4806      	ldr	r0, [pc, #24]	@ (8002a30 <findslot+0x30>)
 8002a18:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8002a1c:	3201      	adds	r2, #1
 8002a1e:	d002      	beq.n	8002a26 <findslot+0x26>
 8002a20:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8002a24:	bd10      	pop	{r4, pc}
 8002a26:	2000      	movs	r0, #0
 8002a28:	e7fc      	b.n	8002a24 <findslot+0x24>
 8002a2a:	bf00      	nop
 8002a2c:	20000058 	.word	0x20000058
 8002a30:	200001d4 	.word	0x200001d4

08002a34 <error>:
 8002a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a36:	4604      	mov	r4, r0
 8002a38:	f000 fcce 	bl	80033d8 <__errno>
 8002a3c:	2613      	movs	r6, #19
 8002a3e:	4605      	mov	r5, r0
 8002a40:	2700      	movs	r7, #0
 8002a42:	4630      	mov	r0, r6
 8002a44:	4639      	mov	r1, r7
 8002a46:	beab      	bkpt	0x00ab
 8002a48:	4606      	mov	r6, r0
 8002a4a:	4620      	mov	r0, r4
 8002a4c:	602e      	str	r6, [r5, #0]
 8002a4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002a50 <checkerror>:
 8002a50:	1c43      	adds	r3, r0, #1
 8002a52:	d101      	bne.n	8002a58 <checkerror+0x8>
 8002a54:	f7ff bfee 	b.w	8002a34 <error>
 8002a58:	4770      	bx	lr

08002a5a <_swiread>:
 8002a5a:	b530      	push	{r4, r5, lr}
 8002a5c:	b085      	sub	sp, #20
 8002a5e:	2406      	movs	r4, #6
 8002a60:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8002a64:	9203      	str	r2, [sp, #12]
 8002a66:	ad01      	add	r5, sp, #4
 8002a68:	4620      	mov	r0, r4
 8002a6a:	4629      	mov	r1, r5
 8002a6c:	beab      	bkpt	0x00ab
 8002a6e:	4604      	mov	r4, r0
 8002a70:	4620      	mov	r0, r4
 8002a72:	f7ff ffed 	bl	8002a50 <checkerror>
 8002a76:	b005      	add	sp, #20
 8002a78:	bd30      	pop	{r4, r5, pc}

08002a7a <_read>:
 8002a7a:	b570      	push	{r4, r5, r6, lr}
 8002a7c:	460e      	mov	r6, r1
 8002a7e:	4614      	mov	r4, r2
 8002a80:	f7ff ffbe 	bl	8002a00 <findslot>
 8002a84:	4605      	mov	r5, r0
 8002a86:	b930      	cbnz	r0, 8002a96 <_read+0x1c>
 8002a88:	f000 fca6 	bl	80033d8 <__errno>
 8002a8c:	2309      	movs	r3, #9
 8002a8e:	6003      	str	r3, [r0, #0]
 8002a90:	f04f 30ff 	mov.w	r0, #4294967295
 8002a94:	bd70      	pop	{r4, r5, r6, pc}
 8002a96:	4622      	mov	r2, r4
 8002a98:	4631      	mov	r1, r6
 8002a9a:	6800      	ldr	r0, [r0, #0]
 8002a9c:	f7ff ffdd 	bl	8002a5a <_swiread>
 8002aa0:	1c43      	adds	r3, r0, #1
 8002aa2:	d0f5      	beq.n	8002a90 <_read+0x16>
 8002aa4:	686b      	ldr	r3, [r5, #4]
 8002aa6:	1a20      	subs	r0, r4, r0
 8002aa8:	4403      	add	r3, r0
 8002aaa:	606b      	str	r3, [r5, #4]
 8002aac:	e7f2      	b.n	8002a94 <_read+0x1a>

08002aae <_swilseek>:
 8002aae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002ab0:	460c      	mov	r4, r1
 8002ab2:	4616      	mov	r6, r2
 8002ab4:	f7ff ffa4 	bl	8002a00 <findslot>
 8002ab8:	4605      	mov	r5, r0
 8002aba:	b940      	cbnz	r0, 8002ace <_swilseek+0x20>
 8002abc:	f000 fc8c 	bl	80033d8 <__errno>
 8002ac0:	2309      	movs	r3, #9
 8002ac2:	6003      	str	r3, [r0, #0]
 8002ac4:	f04f 34ff 	mov.w	r4, #4294967295
 8002ac8:	4620      	mov	r0, r4
 8002aca:	b003      	add	sp, #12
 8002acc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ace:	2e02      	cmp	r6, #2
 8002ad0:	d903      	bls.n	8002ada <_swilseek+0x2c>
 8002ad2:	f000 fc81 	bl	80033d8 <__errno>
 8002ad6:	2316      	movs	r3, #22
 8002ad8:	e7f3      	b.n	8002ac2 <_swilseek+0x14>
 8002ada:	2e01      	cmp	r6, #1
 8002adc:	d112      	bne.n	8002b04 <_swilseek+0x56>
 8002ade:	6843      	ldr	r3, [r0, #4]
 8002ae0:	18e4      	adds	r4, r4, r3
 8002ae2:	d4f6      	bmi.n	8002ad2 <_swilseek+0x24>
 8002ae4:	682b      	ldr	r3, [r5, #0]
 8002ae6:	260a      	movs	r6, #10
 8002ae8:	466f      	mov	r7, sp
 8002aea:	e9cd 3400 	strd	r3, r4, [sp]
 8002aee:	4630      	mov	r0, r6
 8002af0:	4639      	mov	r1, r7
 8002af2:	beab      	bkpt	0x00ab
 8002af4:	4606      	mov	r6, r0
 8002af6:	4630      	mov	r0, r6
 8002af8:	f7ff ffaa 	bl	8002a50 <checkerror>
 8002afc:	2800      	cmp	r0, #0
 8002afe:	dbe1      	blt.n	8002ac4 <_swilseek+0x16>
 8002b00:	606c      	str	r4, [r5, #4]
 8002b02:	e7e1      	b.n	8002ac8 <_swilseek+0x1a>
 8002b04:	2e02      	cmp	r6, #2
 8002b06:	6803      	ldr	r3, [r0, #0]
 8002b08:	d1ec      	bne.n	8002ae4 <_swilseek+0x36>
 8002b0a:	260c      	movs	r6, #12
 8002b0c:	466f      	mov	r7, sp
 8002b0e:	9300      	str	r3, [sp, #0]
 8002b10:	4630      	mov	r0, r6
 8002b12:	4639      	mov	r1, r7
 8002b14:	beab      	bkpt	0x00ab
 8002b16:	4606      	mov	r6, r0
 8002b18:	4630      	mov	r0, r6
 8002b1a:	f7ff ff99 	bl	8002a50 <checkerror>
 8002b1e:	1c43      	adds	r3, r0, #1
 8002b20:	d0d0      	beq.n	8002ac4 <_swilseek+0x16>
 8002b22:	4404      	add	r4, r0
 8002b24:	e7de      	b.n	8002ae4 <_swilseek+0x36>

08002b26 <_lseek>:
 8002b26:	f7ff bfc2 	b.w	8002aae <_swilseek>

08002b2a <_swiwrite>:
 8002b2a:	b530      	push	{r4, r5, lr}
 8002b2c:	b085      	sub	sp, #20
 8002b2e:	2405      	movs	r4, #5
 8002b30:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8002b34:	9203      	str	r2, [sp, #12]
 8002b36:	ad01      	add	r5, sp, #4
 8002b38:	4620      	mov	r0, r4
 8002b3a:	4629      	mov	r1, r5
 8002b3c:	beab      	bkpt	0x00ab
 8002b3e:	4604      	mov	r4, r0
 8002b40:	4620      	mov	r0, r4
 8002b42:	f7ff ff85 	bl	8002a50 <checkerror>
 8002b46:	b005      	add	sp, #20
 8002b48:	bd30      	pop	{r4, r5, pc}

08002b4a <_write>:
 8002b4a:	b570      	push	{r4, r5, r6, lr}
 8002b4c:	460e      	mov	r6, r1
 8002b4e:	4615      	mov	r5, r2
 8002b50:	f7ff ff56 	bl	8002a00 <findslot>
 8002b54:	4604      	mov	r4, r0
 8002b56:	b930      	cbnz	r0, 8002b66 <_write+0x1c>
 8002b58:	f000 fc3e 	bl	80033d8 <__errno>
 8002b5c:	2309      	movs	r3, #9
 8002b5e:	6003      	str	r3, [r0, #0]
 8002b60:	f04f 30ff 	mov.w	r0, #4294967295
 8002b64:	bd70      	pop	{r4, r5, r6, pc}
 8002b66:	462a      	mov	r2, r5
 8002b68:	4631      	mov	r1, r6
 8002b6a:	6800      	ldr	r0, [r0, #0]
 8002b6c:	f7ff ffdd 	bl	8002b2a <_swiwrite>
 8002b70:	1e03      	subs	r3, r0, #0
 8002b72:	dbf5      	blt.n	8002b60 <_write+0x16>
 8002b74:	6862      	ldr	r2, [r4, #4]
 8002b76:	1ae8      	subs	r0, r5, r3
 8002b78:	4402      	add	r2, r0
 8002b7a:	42ab      	cmp	r3, r5
 8002b7c:	6062      	str	r2, [r4, #4]
 8002b7e:	d1f1      	bne.n	8002b64 <_write+0x1a>
 8002b80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002b84:	2000      	movs	r0, #0
 8002b86:	f7ff bf55 	b.w	8002a34 <error>

08002b8a <_swiclose>:
 8002b8a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002b8c:	2402      	movs	r4, #2
 8002b8e:	9001      	str	r0, [sp, #4]
 8002b90:	ad01      	add	r5, sp, #4
 8002b92:	4620      	mov	r0, r4
 8002b94:	4629      	mov	r1, r5
 8002b96:	beab      	bkpt	0x00ab
 8002b98:	4604      	mov	r4, r0
 8002b9a:	4620      	mov	r0, r4
 8002b9c:	f7ff ff58 	bl	8002a50 <checkerror>
 8002ba0:	b003      	add	sp, #12
 8002ba2:	bd30      	pop	{r4, r5, pc}

08002ba4 <_close>:
 8002ba4:	b538      	push	{r3, r4, r5, lr}
 8002ba6:	4605      	mov	r5, r0
 8002ba8:	f7ff ff2a 	bl	8002a00 <findslot>
 8002bac:	4604      	mov	r4, r0
 8002bae:	b930      	cbnz	r0, 8002bbe <_close+0x1a>
 8002bb0:	f000 fc12 	bl	80033d8 <__errno>
 8002bb4:	2309      	movs	r3, #9
 8002bb6:	6003      	str	r3, [r0, #0]
 8002bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8002bbc:	bd38      	pop	{r3, r4, r5, pc}
 8002bbe:	3d01      	subs	r5, #1
 8002bc0:	2d01      	cmp	r5, #1
 8002bc2:	d809      	bhi.n	8002bd8 <_close+0x34>
 8002bc4:	4b07      	ldr	r3, [pc, #28]	@ (8002be4 <_close+0x40>)
 8002bc6:	689a      	ldr	r2, [r3, #8]
 8002bc8:	691b      	ldr	r3, [r3, #16]
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d104      	bne.n	8002bd8 <_close+0x34>
 8002bce:	f04f 33ff 	mov.w	r3, #4294967295
 8002bd2:	2000      	movs	r0, #0
 8002bd4:	6023      	str	r3, [r4, #0]
 8002bd6:	e7f1      	b.n	8002bbc <_close+0x18>
 8002bd8:	6820      	ldr	r0, [r4, #0]
 8002bda:	f7ff ffd6 	bl	8002b8a <_swiclose>
 8002bde:	2800      	cmp	r0, #0
 8002be0:	d0f5      	beq.n	8002bce <_close+0x2a>
 8002be2:	e7eb      	b.n	8002bbc <_close+0x18>
 8002be4:	200001d4 	.word	0x200001d4

08002be8 <_swistat>:
 8002be8:	b570      	push	{r4, r5, r6, lr}
 8002bea:	460c      	mov	r4, r1
 8002bec:	f7ff ff08 	bl	8002a00 <findslot>
 8002bf0:	4605      	mov	r5, r0
 8002bf2:	b930      	cbnz	r0, 8002c02 <_swistat+0x1a>
 8002bf4:	f000 fbf0 	bl	80033d8 <__errno>
 8002bf8:	2309      	movs	r3, #9
 8002bfa:	6003      	str	r3, [r0, #0]
 8002bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8002c00:	bd70      	pop	{r4, r5, r6, pc}
 8002c02:	6863      	ldr	r3, [r4, #4]
 8002c04:	260c      	movs	r6, #12
 8002c06:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002c0a:	6063      	str	r3, [r4, #4]
 8002c0c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002c10:	64a3      	str	r3, [r4, #72]	@ 0x48
 8002c12:	4630      	mov	r0, r6
 8002c14:	4629      	mov	r1, r5
 8002c16:	beab      	bkpt	0x00ab
 8002c18:	4605      	mov	r5, r0
 8002c1a:	4628      	mov	r0, r5
 8002c1c:	f7ff ff18 	bl	8002a50 <checkerror>
 8002c20:	1c43      	adds	r3, r0, #1
 8002c22:	d0eb      	beq.n	8002bfc <_swistat+0x14>
 8002c24:	6120      	str	r0, [r4, #16]
 8002c26:	2000      	movs	r0, #0
 8002c28:	e7ea      	b.n	8002c00 <_swistat+0x18>

08002c2a <_fstat>:
 8002c2a:	460b      	mov	r3, r1
 8002c2c:	b510      	push	{r4, lr}
 8002c2e:	2100      	movs	r1, #0
 8002c30:	4604      	mov	r4, r0
 8002c32:	2258      	movs	r2, #88	@ 0x58
 8002c34:	4618      	mov	r0, r3
 8002c36:	f000 fb80 	bl	800333a <memset>
 8002c3a:	4601      	mov	r1, r0
 8002c3c:	4620      	mov	r0, r4
 8002c3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c42:	f7ff bfd1 	b.w	8002be8 <_swistat>

08002c46 <_stat>:
 8002c46:	b538      	push	{r3, r4, r5, lr}
 8002c48:	460d      	mov	r5, r1
 8002c4a:	4604      	mov	r4, r0
 8002c4c:	2258      	movs	r2, #88	@ 0x58
 8002c4e:	2100      	movs	r1, #0
 8002c50:	4628      	mov	r0, r5
 8002c52:	f000 fb72 	bl	800333a <memset>
 8002c56:	4620      	mov	r0, r4
 8002c58:	2100      	movs	r1, #0
 8002c5a:	f000 f811 	bl	8002c80 <_swiopen>
 8002c5e:	1c43      	adds	r3, r0, #1
 8002c60:	4604      	mov	r4, r0
 8002c62:	d00b      	beq.n	8002c7c <_stat+0x36>
 8002c64:	686b      	ldr	r3, [r5, #4]
 8002c66:	4629      	mov	r1, r5
 8002c68:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8002c6c:	606b      	str	r3, [r5, #4]
 8002c6e:	f7ff ffbb 	bl	8002be8 <_swistat>
 8002c72:	4605      	mov	r5, r0
 8002c74:	4620      	mov	r0, r4
 8002c76:	f7ff ff95 	bl	8002ba4 <_close>
 8002c7a:	462c      	mov	r4, r5
 8002c7c:	4620      	mov	r0, r4
 8002c7e:	bd38      	pop	{r3, r4, r5, pc}

08002c80 <_swiopen>:
 8002c80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c84:	4682      	mov	sl, r0
 8002c86:	460e      	mov	r6, r1
 8002c88:	2400      	movs	r4, #0
 8002c8a:	4f28      	ldr	r7, [pc, #160]	@ (8002d2c <_swiopen+0xac>)
 8002c8c:	b096      	sub	sp, #88	@ 0x58
 8002c8e:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
 8002c92:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8002c96:	3301      	adds	r3, #1
 8002c98:	d00c      	beq.n	8002cb4 <_swiopen+0x34>
 8002c9a:	3401      	adds	r4, #1
 8002c9c:	2c14      	cmp	r4, #20
 8002c9e:	d1f6      	bne.n	8002c8e <_swiopen+0xe>
 8002ca0:	f000 fb9a 	bl	80033d8 <__errno>
 8002ca4:	2318      	movs	r3, #24
 8002ca6:	f04f 34ff 	mov.w	r4, #4294967295
 8002caa:	6003      	str	r3, [r0, #0]
 8002cac:	4620      	mov	r0, r4
 8002cae:	b016      	add	sp, #88	@ 0x58
 8002cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002cb4:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 8002cb8:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8002cbc:	46e9      	mov	r9, sp
 8002cbe:	d109      	bne.n	8002cd4 <_swiopen+0x54>
 8002cc0:	4649      	mov	r1, r9
 8002cc2:	4650      	mov	r0, sl
 8002cc4:	f7ff ffbf 	bl	8002c46 <_stat>
 8002cc8:	3001      	adds	r0, #1
 8002cca:	d003      	beq.n	8002cd4 <_swiopen+0x54>
 8002ccc:	f000 fb84 	bl	80033d8 <__errno>
 8002cd0:	2311      	movs	r3, #17
 8002cd2:	e7e8      	b.n	8002ca6 <_swiopen+0x26>
 8002cd4:	f240 6301 	movw	r3, #1537	@ 0x601
 8002cd8:	f3c6 4500 	ubfx	r5, r6, #16, #1
 8002cdc:	07b2      	lsls	r2, r6, #30
 8002cde:	bf48      	it	mi
 8002ce0:	f045 0502 	orrmi.w	r5, r5, #2
 8002ce4:	421e      	tst	r6, r3
 8002ce6:	bf18      	it	ne
 8002ce8:	f045 0504 	orrne.w	r5, r5, #4
 8002cec:	0733      	lsls	r3, r6, #28
 8002cee:	bf48      	it	mi
 8002cf0:	f025 0504 	bicmi.w	r5, r5, #4
 8002cf4:	4650      	mov	r0, sl
 8002cf6:	bf48      	it	mi
 8002cf8:	f045 0508 	orrmi.w	r5, r5, #8
 8002cfc:	f8cd a000 	str.w	sl, [sp]
 8002d00:	f7fd fa24 	bl	800014c <strlen>
 8002d04:	e9cd 5001 	strd	r5, r0, [sp, #4]
 8002d08:	2501      	movs	r5, #1
 8002d0a:	4628      	mov	r0, r5
 8002d0c:	4649      	mov	r1, r9
 8002d0e:	beab      	bkpt	0x00ab
 8002d10:	4605      	mov	r5, r0
 8002d12:	2d00      	cmp	r5, #0
 8002d14:	db05      	blt.n	8002d22 <_swiopen+0xa2>
 8002d16:	2300      	movs	r3, #0
 8002d18:	f847 5034 	str.w	r5, [r7, r4, lsl #3]
 8002d1c:	4447      	add	r7, r8
 8002d1e:	607b      	str	r3, [r7, #4]
 8002d20:	e7c4      	b.n	8002cac <_swiopen+0x2c>
 8002d22:	4628      	mov	r0, r5
 8002d24:	f7ff fe86 	bl	8002a34 <error>
 8002d28:	4604      	mov	r4, r0
 8002d2a:	e7bf      	b.n	8002cac <_swiopen+0x2c>
 8002d2c:	200001d4 	.word	0x200001d4

08002d30 <_get_semihosting_exts>:
 8002d30:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002d34:	4606      	mov	r6, r0
 8002d36:	460f      	mov	r7, r1
 8002d38:	4829      	ldr	r0, [pc, #164]	@ (8002de0 <_get_semihosting_exts+0xb0>)
 8002d3a:	2100      	movs	r1, #0
 8002d3c:	4615      	mov	r5, r2
 8002d3e:	f7ff ff9f 	bl	8002c80 <_swiopen>
 8002d42:	4604      	mov	r4, r0
 8002d44:	462a      	mov	r2, r5
 8002d46:	2100      	movs	r1, #0
 8002d48:	4630      	mov	r0, r6
 8002d4a:	f000 faf6 	bl	800333a <memset>
 8002d4e:	1c63      	adds	r3, r4, #1
 8002d50:	d014      	beq.n	8002d7c <_get_semihosting_exts+0x4c>
 8002d52:	4620      	mov	r0, r4
 8002d54:	f7ff fe54 	bl	8002a00 <findslot>
 8002d58:	f04f 080c 	mov.w	r8, #12
 8002d5c:	4681      	mov	r9, r0
 8002d5e:	4640      	mov	r0, r8
 8002d60:	4649      	mov	r1, r9
 8002d62:	beab      	bkpt	0x00ab
 8002d64:	4680      	mov	r8, r0
 8002d66:	4640      	mov	r0, r8
 8002d68:	f7ff fe72 	bl	8002a50 <checkerror>
 8002d6c:	2803      	cmp	r0, #3
 8002d6e:	dd02      	ble.n	8002d76 <_get_semihosting_exts+0x46>
 8002d70:	1ec3      	subs	r3, r0, #3
 8002d72:	42ab      	cmp	r3, r5
 8002d74:	dc07      	bgt.n	8002d86 <_get_semihosting_exts+0x56>
 8002d76:	4620      	mov	r0, r4
 8002d78:	f7ff ff14 	bl	8002ba4 <_close>
 8002d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d80:	b003      	add	sp, #12
 8002d82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002d86:	2204      	movs	r2, #4
 8002d88:	4620      	mov	r0, r4
 8002d8a:	eb0d 0102 	add.w	r1, sp, r2
 8002d8e:	f7ff fe74 	bl	8002a7a <_read>
 8002d92:	2803      	cmp	r0, #3
 8002d94:	ddef      	ble.n	8002d76 <_get_semihosting_exts+0x46>
 8002d96:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002d9a:	2b53      	cmp	r3, #83	@ 0x53
 8002d9c:	d1eb      	bne.n	8002d76 <_get_semihosting_exts+0x46>
 8002d9e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8002da2:	2b48      	cmp	r3, #72	@ 0x48
 8002da4:	d1e7      	bne.n	8002d76 <_get_semihosting_exts+0x46>
 8002da6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8002daa:	2b46      	cmp	r3, #70	@ 0x46
 8002dac:	d1e3      	bne.n	8002d76 <_get_semihosting_exts+0x46>
 8002dae:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002db2:	2b42      	cmp	r3, #66	@ 0x42
 8002db4:	d1df      	bne.n	8002d76 <_get_semihosting_exts+0x46>
 8002db6:	2201      	movs	r2, #1
 8002db8:	4639      	mov	r1, r7
 8002dba:	4620      	mov	r0, r4
 8002dbc:	f7ff fe77 	bl	8002aae <_swilseek>
 8002dc0:	2800      	cmp	r0, #0
 8002dc2:	dbd8      	blt.n	8002d76 <_get_semihosting_exts+0x46>
 8002dc4:	462a      	mov	r2, r5
 8002dc6:	4631      	mov	r1, r6
 8002dc8:	4620      	mov	r0, r4
 8002dca:	f7ff fe56 	bl	8002a7a <_read>
 8002dce:	4605      	mov	r5, r0
 8002dd0:	4620      	mov	r0, r4
 8002dd2:	f7ff fee7 	bl	8002ba4 <_close>
 8002dd6:	4628      	mov	r0, r5
 8002dd8:	f7ff fe3a 	bl	8002a50 <checkerror>
 8002ddc:	e7d0      	b.n	8002d80 <_get_semihosting_exts+0x50>
 8002dde:	bf00      	nop
 8002de0:	080045bc 	.word	0x080045bc

08002de4 <initialise_semihosting_exts>:
 8002de4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002de6:	2100      	movs	r1, #0
 8002de8:	2201      	movs	r2, #1
 8002dea:	4d09      	ldr	r5, [pc, #36]	@ (8002e10 <initialise_semihosting_exts+0x2c>)
 8002dec:	4c09      	ldr	r4, [pc, #36]	@ (8002e14 <initialise_semihosting_exts+0x30>)
 8002dee:	a801      	add	r0, sp, #4
 8002df0:	6029      	str	r1, [r5, #0]
 8002df2:	6022      	str	r2, [r4, #0]
 8002df4:	f7ff ff9c 	bl	8002d30 <_get_semihosting_exts>
 8002df8:	2800      	cmp	r0, #0
 8002dfa:	dd07      	ble.n	8002e0c <initialise_semihosting_exts+0x28>
 8002dfc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002e00:	f003 0201 	and.w	r2, r3, #1
 8002e04:	f003 0302 	and.w	r3, r3, #2
 8002e08:	602a      	str	r2, [r5, #0]
 8002e0a:	6023      	str	r3, [r4, #0]
 8002e0c:	b003      	add	sp, #12
 8002e0e:	bd30      	pop	{r4, r5, pc}
 8002e10:	20000048 	.word	0x20000048
 8002e14:	20000044 	.word	0x20000044

08002e18 <_has_ext_stdout_stderr>:
 8002e18:	b510      	push	{r4, lr}
 8002e1a:	4c04      	ldr	r4, [pc, #16]	@ (8002e2c <_has_ext_stdout_stderr+0x14>)
 8002e1c:	6823      	ldr	r3, [r4, #0]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	da01      	bge.n	8002e26 <_has_ext_stdout_stderr+0xe>
 8002e22:	f7ff ffdf 	bl	8002de4 <initialise_semihosting_exts>
 8002e26:	6820      	ldr	r0, [r4, #0]
 8002e28:	bd10      	pop	{r4, pc}
 8002e2a:	bf00      	nop
 8002e2c:	20000044 	.word	0x20000044

08002e30 <initialise_monitor_handles>:
 8002e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e34:	2303      	movs	r3, #3
 8002e36:	2400      	movs	r4, #0
 8002e38:	f8df 90a0 	ldr.w	r9, [pc, #160]	@ 8002edc <initialise_monitor_handles+0xac>
 8002e3c:	b085      	sub	sp, #20
 8002e3e:	f8cd 9004 	str.w	r9, [sp, #4]
 8002e42:	af01      	add	r7, sp, #4
 8002e44:	9303      	str	r3, [sp, #12]
 8002e46:	2501      	movs	r5, #1
 8002e48:	9402      	str	r4, [sp, #8]
 8002e4a:	4628      	mov	r0, r5
 8002e4c:	4639      	mov	r1, r7
 8002e4e:	beab      	bkpt	0x00ab
 8002e50:	4605      	mov	r5, r0
 8002e52:	f04f 32ff 	mov.w	r2, #4294967295
 8002e56:	f8df 8088 	ldr.w	r8, [pc, #136]	@ 8002ee0 <initialise_monitor_handles+0xb0>
 8002e5a:	4623      	mov	r3, r4
 8002e5c:	4c21      	ldr	r4, [pc, #132]	@ (8002ee4 <initialise_monitor_handles+0xb4>)
 8002e5e:	f8c8 5000 	str.w	r5, [r8]
 8002e62:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8002e66:	3301      	adds	r3, #1
 8002e68:	2b14      	cmp	r3, #20
 8002e6a:	d1fa      	bne.n	8002e62 <initialise_monitor_handles+0x32>
 8002e6c:	f7ff ffd4 	bl	8002e18 <_has_ext_stdout_stderr>
 8002e70:	4d1d      	ldr	r5, [pc, #116]	@ (8002ee8 <initialise_monitor_handles+0xb8>)
 8002e72:	b1d0      	cbz	r0, 8002eaa <initialise_monitor_handles+0x7a>
 8002e74:	f04f 0a03 	mov.w	sl, #3
 8002e78:	2304      	movs	r3, #4
 8002e7a:	f8cd 9004 	str.w	r9, [sp, #4]
 8002e7e:	2601      	movs	r6, #1
 8002e80:	f8cd a00c 	str.w	sl, [sp, #12]
 8002e84:	9302      	str	r3, [sp, #8]
 8002e86:	4630      	mov	r0, r6
 8002e88:	4639      	mov	r1, r7
 8002e8a:	beab      	bkpt	0x00ab
 8002e8c:	4683      	mov	fp, r0
 8002e8e:	4b17      	ldr	r3, [pc, #92]	@ (8002eec <initialise_monitor_handles+0xbc>)
 8002e90:	f8cd 9004 	str.w	r9, [sp, #4]
 8002e94:	f8c3 b000 	str.w	fp, [r3]
 8002e98:	2308      	movs	r3, #8
 8002e9a:	f8cd a00c 	str.w	sl, [sp, #12]
 8002e9e:	9302      	str	r3, [sp, #8]
 8002ea0:	4630      	mov	r0, r6
 8002ea2:	4639      	mov	r1, r7
 8002ea4:	beab      	bkpt	0x00ab
 8002ea6:	4606      	mov	r6, r0
 8002ea8:	602e      	str	r6, [r5, #0]
 8002eaa:	2600      	movs	r6, #0
 8002eac:	682b      	ldr	r3, [r5, #0]
 8002eae:	6066      	str	r6, [r4, #4]
 8002eb0:	3301      	adds	r3, #1
 8002eb2:	bf02      	ittt	eq
 8002eb4:	4b0d      	ldreq	r3, [pc, #52]	@ (8002eec <initialise_monitor_handles+0xbc>)
 8002eb6:	681b      	ldreq	r3, [r3, #0]
 8002eb8:	602b      	streq	r3, [r5, #0]
 8002eba:	f8d8 3000 	ldr.w	r3, [r8]
 8002ebe:	6023      	str	r3, [r4, #0]
 8002ec0:	f7ff ffaa 	bl	8002e18 <_has_ext_stdout_stderr>
 8002ec4:	b130      	cbz	r0, 8002ed4 <initialise_monitor_handles+0xa4>
 8002ec6:	4b09      	ldr	r3, [pc, #36]	@ (8002eec <initialise_monitor_handles+0xbc>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8002ece:	682b      	ldr	r3, [r5, #0]
 8002ed0:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8002ed4:	b005      	add	sp, #20
 8002ed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002eda:	bf00      	nop
 8002edc:	080045d2 	.word	0x080045d2
 8002ee0:	200001d0 	.word	0x200001d0
 8002ee4:	200001d4 	.word	0x200001d4
 8002ee8:	200001c8 	.word	0x200001c8
 8002eec:	200001cc 	.word	0x200001cc

08002ef0 <_isatty>:
 8002ef0:	b570      	push	{r4, r5, r6, lr}
 8002ef2:	f7ff fd85 	bl	8002a00 <findslot>
 8002ef6:	2409      	movs	r4, #9
 8002ef8:	4605      	mov	r5, r0
 8002efa:	b920      	cbnz	r0, 8002f06 <_isatty+0x16>
 8002efc:	f000 fa6c 	bl	80033d8 <__errno>
 8002f00:	6004      	str	r4, [r0, #0]
 8002f02:	2000      	movs	r0, #0
 8002f04:	bd70      	pop	{r4, r5, r6, pc}
 8002f06:	4620      	mov	r0, r4
 8002f08:	4629      	mov	r1, r5
 8002f0a:	beab      	bkpt	0x00ab
 8002f0c:	4604      	mov	r4, r0
 8002f0e:	2c01      	cmp	r4, #1
 8002f10:	4620      	mov	r0, r4
 8002f12:	d0f7      	beq.n	8002f04 <_isatty+0x14>
 8002f14:	f000 fa60 	bl	80033d8 <__errno>
 8002f18:	2513      	movs	r5, #19
 8002f1a:	4604      	mov	r4, r0
 8002f1c:	2600      	movs	r6, #0
 8002f1e:	4628      	mov	r0, r5
 8002f20:	4631      	mov	r1, r6
 8002f22:	beab      	bkpt	0x00ab
 8002f24:	4605      	mov	r5, r0
 8002f26:	6025      	str	r5, [r4, #0]
 8002f28:	e7eb      	b.n	8002f02 <_isatty+0x12>
	...

08002f2c <__sflush_r>:
 8002f2c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f32:	0716      	lsls	r6, r2, #28
 8002f34:	4605      	mov	r5, r0
 8002f36:	460c      	mov	r4, r1
 8002f38:	d454      	bmi.n	8002fe4 <__sflush_r+0xb8>
 8002f3a:	684b      	ldr	r3, [r1, #4]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	dc02      	bgt.n	8002f46 <__sflush_r+0x1a>
 8002f40:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	dd48      	ble.n	8002fd8 <__sflush_r+0xac>
 8002f46:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002f48:	2e00      	cmp	r6, #0
 8002f4a:	d045      	beq.n	8002fd8 <__sflush_r+0xac>
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002f52:	682f      	ldr	r7, [r5, #0]
 8002f54:	6a21      	ldr	r1, [r4, #32]
 8002f56:	602b      	str	r3, [r5, #0]
 8002f58:	d030      	beq.n	8002fbc <__sflush_r+0x90>
 8002f5a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002f5c:	89a3      	ldrh	r3, [r4, #12]
 8002f5e:	0759      	lsls	r1, r3, #29
 8002f60:	d505      	bpl.n	8002f6e <__sflush_r+0x42>
 8002f62:	6863      	ldr	r3, [r4, #4]
 8002f64:	1ad2      	subs	r2, r2, r3
 8002f66:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002f68:	b10b      	cbz	r3, 8002f6e <__sflush_r+0x42>
 8002f6a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002f6c:	1ad2      	subs	r2, r2, r3
 8002f6e:	2300      	movs	r3, #0
 8002f70:	4628      	mov	r0, r5
 8002f72:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002f74:	6a21      	ldr	r1, [r4, #32]
 8002f76:	47b0      	blx	r6
 8002f78:	1c43      	adds	r3, r0, #1
 8002f7a:	89a3      	ldrh	r3, [r4, #12]
 8002f7c:	d106      	bne.n	8002f8c <__sflush_r+0x60>
 8002f7e:	6829      	ldr	r1, [r5, #0]
 8002f80:	291d      	cmp	r1, #29
 8002f82:	d82b      	bhi.n	8002fdc <__sflush_r+0xb0>
 8002f84:	4a28      	ldr	r2, [pc, #160]	@ (8003028 <__sflush_r+0xfc>)
 8002f86:	410a      	asrs	r2, r1
 8002f88:	07d6      	lsls	r6, r2, #31
 8002f8a:	d427      	bmi.n	8002fdc <__sflush_r+0xb0>
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	6062      	str	r2, [r4, #4]
 8002f90:	6922      	ldr	r2, [r4, #16]
 8002f92:	04d9      	lsls	r1, r3, #19
 8002f94:	6022      	str	r2, [r4, #0]
 8002f96:	d504      	bpl.n	8002fa2 <__sflush_r+0x76>
 8002f98:	1c42      	adds	r2, r0, #1
 8002f9a:	d101      	bne.n	8002fa0 <__sflush_r+0x74>
 8002f9c:	682b      	ldr	r3, [r5, #0]
 8002f9e:	b903      	cbnz	r3, 8002fa2 <__sflush_r+0x76>
 8002fa0:	6560      	str	r0, [r4, #84]	@ 0x54
 8002fa2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002fa4:	602f      	str	r7, [r5, #0]
 8002fa6:	b1b9      	cbz	r1, 8002fd8 <__sflush_r+0xac>
 8002fa8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002fac:	4299      	cmp	r1, r3
 8002fae:	d002      	beq.n	8002fb6 <__sflush_r+0x8a>
 8002fb0:	4628      	mov	r0, r5
 8002fb2:	f000 fa3f 	bl	8003434 <_free_r>
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	6363      	str	r3, [r4, #52]	@ 0x34
 8002fba:	e00d      	b.n	8002fd8 <__sflush_r+0xac>
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	4628      	mov	r0, r5
 8002fc0:	47b0      	blx	r6
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	1c50      	adds	r0, r2, #1
 8002fc6:	d1c9      	bne.n	8002f5c <__sflush_r+0x30>
 8002fc8:	682b      	ldr	r3, [r5, #0]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d0c6      	beq.n	8002f5c <__sflush_r+0x30>
 8002fce:	2b1d      	cmp	r3, #29
 8002fd0:	d001      	beq.n	8002fd6 <__sflush_r+0xaa>
 8002fd2:	2b16      	cmp	r3, #22
 8002fd4:	d11d      	bne.n	8003012 <__sflush_r+0xe6>
 8002fd6:	602f      	str	r7, [r5, #0]
 8002fd8:	2000      	movs	r0, #0
 8002fda:	e021      	b.n	8003020 <__sflush_r+0xf4>
 8002fdc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002fe0:	b21b      	sxth	r3, r3
 8002fe2:	e01a      	b.n	800301a <__sflush_r+0xee>
 8002fe4:	690f      	ldr	r7, [r1, #16]
 8002fe6:	2f00      	cmp	r7, #0
 8002fe8:	d0f6      	beq.n	8002fd8 <__sflush_r+0xac>
 8002fea:	0793      	lsls	r3, r2, #30
 8002fec:	bf18      	it	ne
 8002fee:	2300      	movne	r3, #0
 8002ff0:	680e      	ldr	r6, [r1, #0]
 8002ff2:	bf08      	it	eq
 8002ff4:	694b      	ldreq	r3, [r1, #20]
 8002ff6:	1bf6      	subs	r6, r6, r7
 8002ff8:	600f      	str	r7, [r1, #0]
 8002ffa:	608b      	str	r3, [r1, #8]
 8002ffc:	2e00      	cmp	r6, #0
 8002ffe:	ddeb      	ble.n	8002fd8 <__sflush_r+0xac>
 8003000:	4633      	mov	r3, r6
 8003002:	463a      	mov	r2, r7
 8003004:	4628      	mov	r0, r5
 8003006:	6a21      	ldr	r1, [r4, #32]
 8003008:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800300c:	47e0      	blx	ip
 800300e:	2800      	cmp	r0, #0
 8003010:	dc07      	bgt.n	8003022 <__sflush_r+0xf6>
 8003012:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003016:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800301a:	f04f 30ff 	mov.w	r0, #4294967295
 800301e:	81a3      	strh	r3, [r4, #12]
 8003020:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003022:	4407      	add	r7, r0
 8003024:	1a36      	subs	r6, r6, r0
 8003026:	e7e9      	b.n	8002ffc <__sflush_r+0xd0>
 8003028:	dfbffffe 	.word	0xdfbffffe

0800302c <_fflush_r>:
 800302c:	b538      	push	{r3, r4, r5, lr}
 800302e:	690b      	ldr	r3, [r1, #16]
 8003030:	4605      	mov	r5, r0
 8003032:	460c      	mov	r4, r1
 8003034:	b913      	cbnz	r3, 800303c <_fflush_r+0x10>
 8003036:	2500      	movs	r5, #0
 8003038:	4628      	mov	r0, r5
 800303a:	bd38      	pop	{r3, r4, r5, pc}
 800303c:	b118      	cbz	r0, 8003046 <_fflush_r+0x1a>
 800303e:	6a03      	ldr	r3, [r0, #32]
 8003040:	b90b      	cbnz	r3, 8003046 <_fflush_r+0x1a>
 8003042:	f000 f8bb 	bl	80031bc <__sinit>
 8003046:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d0f3      	beq.n	8003036 <_fflush_r+0xa>
 800304e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003050:	07d0      	lsls	r0, r2, #31
 8003052:	d404      	bmi.n	800305e <_fflush_r+0x32>
 8003054:	0599      	lsls	r1, r3, #22
 8003056:	d402      	bmi.n	800305e <_fflush_r+0x32>
 8003058:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800305a:	f000 f9e8 	bl	800342e <__retarget_lock_acquire_recursive>
 800305e:	4628      	mov	r0, r5
 8003060:	4621      	mov	r1, r4
 8003062:	f7ff ff63 	bl	8002f2c <__sflush_r>
 8003066:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003068:	4605      	mov	r5, r0
 800306a:	07da      	lsls	r2, r3, #31
 800306c:	d4e4      	bmi.n	8003038 <_fflush_r+0xc>
 800306e:	89a3      	ldrh	r3, [r4, #12]
 8003070:	059b      	lsls	r3, r3, #22
 8003072:	d4e1      	bmi.n	8003038 <_fflush_r+0xc>
 8003074:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003076:	f000 f9db 	bl	8003430 <__retarget_lock_release_recursive>
 800307a:	e7dd      	b.n	8003038 <_fflush_r+0xc>

0800307c <fflush>:
 800307c:	4601      	mov	r1, r0
 800307e:	b920      	cbnz	r0, 800308a <fflush+0xe>
 8003080:	4a04      	ldr	r2, [pc, #16]	@ (8003094 <fflush+0x18>)
 8003082:	4905      	ldr	r1, [pc, #20]	@ (8003098 <fflush+0x1c>)
 8003084:	4805      	ldr	r0, [pc, #20]	@ (800309c <fflush+0x20>)
 8003086:	f000 b8b1 	b.w	80031ec <_fwalk_sglue>
 800308a:	4b05      	ldr	r3, [pc, #20]	@ (80030a0 <fflush+0x24>)
 800308c:	6818      	ldr	r0, [r3, #0]
 800308e:	f7ff bfcd 	b.w	800302c <_fflush_r>
 8003092:	bf00      	nop
 8003094:	2000004c 	.word	0x2000004c
 8003098:	0800302d 	.word	0x0800302d
 800309c:	2000005c 	.word	0x2000005c
 80030a0:	20000058 	.word	0x20000058

080030a4 <std>:
 80030a4:	2300      	movs	r3, #0
 80030a6:	b510      	push	{r4, lr}
 80030a8:	4604      	mov	r4, r0
 80030aa:	e9c0 3300 	strd	r3, r3, [r0]
 80030ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80030b2:	6083      	str	r3, [r0, #8]
 80030b4:	8181      	strh	r1, [r0, #12]
 80030b6:	6643      	str	r3, [r0, #100]	@ 0x64
 80030b8:	81c2      	strh	r2, [r0, #14]
 80030ba:	6183      	str	r3, [r0, #24]
 80030bc:	4619      	mov	r1, r3
 80030be:	2208      	movs	r2, #8
 80030c0:	305c      	adds	r0, #92	@ 0x5c
 80030c2:	f000 f93a 	bl	800333a <memset>
 80030c6:	4b0d      	ldr	r3, [pc, #52]	@ (80030fc <std+0x58>)
 80030c8:	6224      	str	r4, [r4, #32]
 80030ca:	6263      	str	r3, [r4, #36]	@ 0x24
 80030cc:	4b0c      	ldr	r3, [pc, #48]	@ (8003100 <std+0x5c>)
 80030ce:	62a3      	str	r3, [r4, #40]	@ 0x28
 80030d0:	4b0c      	ldr	r3, [pc, #48]	@ (8003104 <std+0x60>)
 80030d2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80030d4:	4b0c      	ldr	r3, [pc, #48]	@ (8003108 <std+0x64>)
 80030d6:	6323      	str	r3, [r4, #48]	@ 0x30
 80030d8:	4b0c      	ldr	r3, [pc, #48]	@ (800310c <std+0x68>)
 80030da:	429c      	cmp	r4, r3
 80030dc:	d006      	beq.n	80030ec <std+0x48>
 80030de:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80030e2:	4294      	cmp	r4, r2
 80030e4:	d002      	beq.n	80030ec <std+0x48>
 80030e6:	33d0      	adds	r3, #208	@ 0xd0
 80030e8:	429c      	cmp	r4, r3
 80030ea:	d105      	bne.n	80030f8 <std+0x54>
 80030ec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80030f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80030f4:	f000 b99a 	b.w	800342c <__retarget_lock_init_recursive>
 80030f8:	bd10      	pop	{r4, pc}
 80030fa:	bf00      	nop
 80030fc:	080032b5 	.word	0x080032b5
 8003100:	080032d7 	.word	0x080032d7
 8003104:	0800330f 	.word	0x0800330f
 8003108:	08003333 	.word	0x08003333
 800310c:	20000274 	.word	0x20000274

08003110 <stdio_exit_handler>:
 8003110:	4a02      	ldr	r2, [pc, #8]	@ (800311c <stdio_exit_handler+0xc>)
 8003112:	4903      	ldr	r1, [pc, #12]	@ (8003120 <stdio_exit_handler+0x10>)
 8003114:	4803      	ldr	r0, [pc, #12]	@ (8003124 <stdio_exit_handler+0x14>)
 8003116:	f000 b869 	b.w	80031ec <_fwalk_sglue>
 800311a:	bf00      	nop
 800311c:	2000004c 	.word	0x2000004c
 8003120:	0800302d 	.word	0x0800302d
 8003124:	2000005c 	.word	0x2000005c

08003128 <cleanup_stdio>:
 8003128:	6841      	ldr	r1, [r0, #4]
 800312a:	4b0c      	ldr	r3, [pc, #48]	@ (800315c <cleanup_stdio+0x34>)
 800312c:	b510      	push	{r4, lr}
 800312e:	4299      	cmp	r1, r3
 8003130:	4604      	mov	r4, r0
 8003132:	d001      	beq.n	8003138 <cleanup_stdio+0x10>
 8003134:	f7ff ff7a 	bl	800302c <_fflush_r>
 8003138:	68a1      	ldr	r1, [r4, #8]
 800313a:	4b09      	ldr	r3, [pc, #36]	@ (8003160 <cleanup_stdio+0x38>)
 800313c:	4299      	cmp	r1, r3
 800313e:	d002      	beq.n	8003146 <cleanup_stdio+0x1e>
 8003140:	4620      	mov	r0, r4
 8003142:	f7ff ff73 	bl	800302c <_fflush_r>
 8003146:	68e1      	ldr	r1, [r4, #12]
 8003148:	4b06      	ldr	r3, [pc, #24]	@ (8003164 <cleanup_stdio+0x3c>)
 800314a:	4299      	cmp	r1, r3
 800314c:	d004      	beq.n	8003158 <cleanup_stdio+0x30>
 800314e:	4620      	mov	r0, r4
 8003150:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003154:	f7ff bf6a 	b.w	800302c <_fflush_r>
 8003158:	bd10      	pop	{r4, pc}
 800315a:	bf00      	nop
 800315c:	20000274 	.word	0x20000274
 8003160:	200002dc 	.word	0x200002dc
 8003164:	20000344 	.word	0x20000344

08003168 <global_stdio_init.part.0>:
 8003168:	b510      	push	{r4, lr}
 800316a:	4b0b      	ldr	r3, [pc, #44]	@ (8003198 <global_stdio_init.part.0+0x30>)
 800316c:	4c0b      	ldr	r4, [pc, #44]	@ (800319c <global_stdio_init.part.0+0x34>)
 800316e:	4a0c      	ldr	r2, [pc, #48]	@ (80031a0 <global_stdio_init.part.0+0x38>)
 8003170:	4620      	mov	r0, r4
 8003172:	601a      	str	r2, [r3, #0]
 8003174:	2104      	movs	r1, #4
 8003176:	2200      	movs	r2, #0
 8003178:	f7ff ff94 	bl	80030a4 <std>
 800317c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003180:	2201      	movs	r2, #1
 8003182:	2109      	movs	r1, #9
 8003184:	f7ff ff8e 	bl	80030a4 <std>
 8003188:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800318c:	2202      	movs	r2, #2
 800318e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003192:	2112      	movs	r1, #18
 8003194:	f7ff bf86 	b.w	80030a4 <std>
 8003198:	200003ac 	.word	0x200003ac
 800319c:	20000274 	.word	0x20000274
 80031a0:	08003111 	.word	0x08003111

080031a4 <__sfp_lock_acquire>:
 80031a4:	4801      	ldr	r0, [pc, #4]	@ (80031ac <__sfp_lock_acquire+0x8>)
 80031a6:	f000 b942 	b.w	800342e <__retarget_lock_acquire_recursive>
 80031aa:	bf00      	nop
 80031ac:	200003b5 	.word	0x200003b5

080031b0 <__sfp_lock_release>:
 80031b0:	4801      	ldr	r0, [pc, #4]	@ (80031b8 <__sfp_lock_release+0x8>)
 80031b2:	f000 b93d 	b.w	8003430 <__retarget_lock_release_recursive>
 80031b6:	bf00      	nop
 80031b8:	200003b5 	.word	0x200003b5

080031bc <__sinit>:
 80031bc:	b510      	push	{r4, lr}
 80031be:	4604      	mov	r4, r0
 80031c0:	f7ff fff0 	bl	80031a4 <__sfp_lock_acquire>
 80031c4:	6a23      	ldr	r3, [r4, #32]
 80031c6:	b11b      	cbz	r3, 80031d0 <__sinit+0x14>
 80031c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80031cc:	f7ff bff0 	b.w	80031b0 <__sfp_lock_release>
 80031d0:	4b04      	ldr	r3, [pc, #16]	@ (80031e4 <__sinit+0x28>)
 80031d2:	6223      	str	r3, [r4, #32]
 80031d4:	4b04      	ldr	r3, [pc, #16]	@ (80031e8 <__sinit+0x2c>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d1f5      	bne.n	80031c8 <__sinit+0xc>
 80031dc:	f7ff ffc4 	bl	8003168 <global_stdio_init.part.0>
 80031e0:	e7f2      	b.n	80031c8 <__sinit+0xc>
 80031e2:	bf00      	nop
 80031e4:	08003129 	.word	0x08003129
 80031e8:	200003ac 	.word	0x200003ac

080031ec <_fwalk_sglue>:
 80031ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80031f0:	4607      	mov	r7, r0
 80031f2:	4688      	mov	r8, r1
 80031f4:	4614      	mov	r4, r2
 80031f6:	2600      	movs	r6, #0
 80031f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80031fc:	f1b9 0901 	subs.w	r9, r9, #1
 8003200:	d505      	bpl.n	800320e <_fwalk_sglue+0x22>
 8003202:	6824      	ldr	r4, [r4, #0]
 8003204:	2c00      	cmp	r4, #0
 8003206:	d1f7      	bne.n	80031f8 <_fwalk_sglue+0xc>
 8003208:	4630      	mov	r0, r6
 800320a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800320e:	89ab      	ldrh	r3, [r5, #12]
 8003210:	2b01      	cmp	r3, #1
 8003212:	d907      	bls.n	8003224 <_fwalk_sglue+0x38>
 8003214:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003218:	3301      	adds	r3, #1
 800321a:	d003      	beq.n	8003224 <_fwalk_sglue+0x38>
 800321c:	4629      	mov	r1, r5
 800321e:	4638      	mov	r0, r7
 8003220:	47c0      	blx	r8
 8003222:	4306      	orrs	r6, r0
 8003224:	3568      	adds	r5, #104	@ 0x68
 8003226:	e7e9      	b.n	80031fc <_fwalk_sglue+0x10>

08003228 <iprintf>:
 8003228:	b40f      	push	{r0, r1, r2, r3}
 800322a:	b507      	push	{r0, r1, r2, lr}
 800322c:	4906      	ldr	r1, [pc, #24]	@ (8003248 <iprintf+0x20>)
 800322e:	ab04      	add	r3, sp, #16
 8003230:	6808      	ldr	r0, [r1, #0]
 8003232:	f853 2b04 	ldr.w	r2, [r3], #4
 8003236:	6881      	ldr	r1, [r0, #8]
 8003238:	9301      	str	r3, [sp, #4]
 800323a:	f000 fb71 	bl	8003920 <_vfiprintf_r>
 800323e:	b003      	add	sp, #12
 8003240:	f85d eb04 	ldr.w	lr, [sp], #4
 8003244:	b004      	add	sp, #16
 8003246:	4770      	bx	lr
 8003248:	20000058 	.word	0x20000058

0800324c <sniprintf>:
 800324c:	b40c      	push	{r2, r3}
 800324e:	b530      	push	{r4, r5, lr}
 8003250:	4b17      	ldr	r3, [pc, #92]	@ (80032b0 <sniprintf+0x64>)
 8003252:	1e0c      	subs	r4, r1, #0
 8003254:	681d      	ldr	r5, [r3, #0]
 8003256:	b09d      	sub	sp, #116	@ 0x74
 8003258:	da08      	bge.n	800326c <sniprintf+0x20>
 800325a:	238b      	movs	r3, #139	@ 0x8b
 800325c:	f04f 30ff 	mov.w	r0, #4294967295
 8003260:	602b      	str	r3, [r5, #0]
 8003262:	b01d      	add	sp, #116	@ 0x74
 8003264:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003268:	b002      	add	sp, #8
 800326a:	4770      	bx	lr
 800326c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003270:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003274:	bf0c      	ite	eq
 8003276:	4623      	moveq	r3, r4
 8003278:	f104 33ff 	addne.w	r3, r4, #4294967295
 800327c:	9304      	str	r3, [sp, #16]
 800327e:	9307      	str	r3, [sp, #28]
 8003280:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003284:	9002      	str	r0, [sp, #8]
 8003286:	9006      	str	r0, [sp, #24]
 8003288:	f8ad 3016 	strh.w	r3, [sp, #22]
 800328c:	4628      	mov	r0, r5
 800328e:	ab21      	add	r3, sp, #132	@ 0x84
 8003290:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003292:	a902      	add	r1, sp, #8
 8003294:	9301      	str	r3, [sp, #4]
 8003296:	f000 fa1f 	bl	80036d8 <_svfiprintf_r>
 800329a:	1c43      	adds	r3, r0, #1
 800329c:	bfbc      	itt	lt
 800329e:	238b      	movlt	r3, #139	@ 0x8b
 80032a0:	602b      	strlt	r3, [r5, #0]
 80032a2:	2c00      	cmp	r4, #0
 80032a4:	d0dd      	beq.n	8003262 <sniprintf+0x16>
 80032a6:	2200      	movs	r2, #0
 80032a8:	9b02      	ldr	r3, [sp, #8]
 80032aa:	701a      	strb	r2, [r3, #0]
 80032ac:	e7d9      	b.n	8003262 <sniprintf+0x16>
 80032ae:	bf00      	nop
 80032b0:	20000058 	.word	0x20000058

080032b4 <__sread>:
 80032b4:	b510      	push	{r4, lr}
 80032b6:	460c      	mov	r4, r1
 80032b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032bc:	f000 f868 	bl	8003390 <_read_r>
 80032c0:	2800      	cmp	r0, #0
 80032c2:	bfab      	itete	ge
 80032c4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80032c6:	89a3      	ldrhlt	r3, [r4, #12]
 80032c8:	181b      	addge	r3, r3, r0
 80032ca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80032ce:	bfac      	ite	ge
 80032d0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80032d2:	81a3      	strhlt	r3, [r4, #12]
 80032d4:	bd10      	pop	{r4, pc}

080032d6 <__swrite>:
 80032d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032da:	461f      	mov	r7, r3
 80032dc:	898b      	ldrh	r3, [r1, #12]
 80032de:	4605      	mov	r5, r0
 80032e0:	05db      	lsls	r3, r3, #23
 80032e2:	460c      	mov	r4, r1
 80032e4:	4616      	mov	r6, r2
 80032e6:	d505      	bpl.n	80032f4 <__swrite+0x1e>
 80032e8:	2302      	movs	r3, #2
 80032ea:	2200      	movs	r2, #0
 80032ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032f0:	f000 f83c 	bl	800336c <_lseek_r>
 80032f4:	89a3      	ldrh	r3, [r4, #12]
 80032f6:	4632      	mov	r2, r6
 80032f8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80032fc:	81a3      	strh	r3, [r4, #12]
 80032fe:	4628      	mov	r0, r5
 8003300:	463b      	mov	r3, r7
 8003302:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003306:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800330a:	f000 b853 	b.w	80033b4 <_write_r>

0800330e <__sseek>:
 800330e:	b510      	push	{r4, lr}
 8003310:	460c      	mov	r4, r1
 8003312:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003316:	f000 f829 	bl	800336c <_lseek_r>
 800331a:	1c43      	adds	r3, r0, #1
 800331c:	89a3      	ldrh	r3, [r4, #12]
 800331e:	bf15      	itete	ne
 8003320:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003322:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003326:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800332a:	81a3      	strheq	r3, [r4, #12]
 800332c:	bf18      	it	ne
 800332e:	81a3      	strhne	r3, [r4, #12]
 8003330:	bd10      	pop	{r4, pc}

08003332 <__sclose>:
 8003332:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003336:	f000 b809 	b.w	800334c <_close_r>

0800333a <memset>:
 800333a:	4603      	mov	r3, r0
 800333c:	4402      	add	r2, r0
 800333e:	4293      	cmp	r3, r2
 8003340:	d100      	bne.n	8003344 <memset+0xa>
 8003342:	4770      	bx	lr
 8003344:	f803 1b01 	strb.w	r1, [r3], #1
 8003348:	e7f9      	b.n	800333e <memset+0x4>
	...

0800334c <_close_r>:
 800334c:	b538      	push	{r3, r4, r5, lr}
 800334e:	2300      	movs	r3, #0
 8003350:	4d05      	ldr	r5, [pc, #20]	@ (8003368 <_close_r+0x1c>)
 8003352:	4604      	mov	r4, r0
 8003354:	4608      	mov	r0, r1
 8003356:	602b      	str	r3, [r5, #0]
 8003358:	f7ff fc24 	bl	8002ba4 <_close>
 800335c:	1c43      	adds	r3, r0, #1
 800335e:	d102      	bne.n	8003366 <_close_r+0x1a>
 8003360:	682b      	ldr	r3, [r5, #0]
 8003362:	b103      	cbz	r3, 8003366 <_close_r+0x1a>
 8003364:	6023      	str	r3, [r4, #0]
 8003366:	bd38      	pop	{r3, r4, r5, pc}
 8003368:	200003b0 	.word	0x200003b0

0800336c <_lseek_r>:
 800336c:	b538      	push	{r3, r4, r5, lr}
 800336e:	4604      	mov	r4, r0
 8003370:	4608      	mov	r0, r1
 8003372:	4611      	mov	r1, r2
 8003374:	2200      	movs	r2, #0
 8003376:	4d05      	ldr	r5, [pc, #20]	@ (800338c <_lseek_r+0x20>)
 8003378:	602a      	str	r2, [r5, #0]
 800337a:	461a      	mov	r2, r3
 800337c:	f7ff fbd3 	bl	8002b26 <_lseek>
 8003380:	1c43      	adds	r3, r0, #1
 8003382:	d102      	bne.n	800338a <_lseek_r+0x1e>
 8003384:	682b      	ldr	r3, [r5, #0]
 8003386:	b103      	cbz	r3, 800338a <_lseek_r+0x1e>
 8003388:	6023      	str	r3, [r4, #0]
 800338a:	bd38      	pop	{r3, r4, r5, pc}
 800338c:	200003b0 	.word	0x200003b0

08003390 <_read_r>:
 8003390:	b538      	push	{r3, r4, r5, lr}
 8003392:	4604      	mov	r4, r0
 8003394:	4608      	mov	r0, r1
 8003396:	4611      	mov	r1, r2
 8003398:	2200      	movs	r2, #0
 800339a:	4d05      	ldr	r5, [pc, #20]	@ (80033b0 <_read_r+0x20>)
 800339c:	602a      	str	r2, [r5, #0]
 800339e:	461a      	mov	r2, r3
 80033a0:	f7ff fb6b 	bl	8002a7a <_read>
 80033a4:	1c43      	adds	r3, r0, #1
 80033a6:	d102      	bne.n	80033ae <_read_r+0x1e>
 80033a8:	682b      	ldr	r3, [r5, #0]
 80033aa:	b103      	cbz	r3, 80033ae <_read_r+0x1e>
 80033ac:	6023      	str	r3, [r4, #0]
 80033ae:	bd38      	pop	{r3, r4, r5, pc}
 80033b0:	200003b0 	.word	0x200003b0

080033b4 <_write_r>:
 80033b4:	b538      	push	{r3, r4, r5, lr}
 80033b6:	4604      	mov	r4, r0
 80033b8:	4608      	mov	r0, r1
 80033ba:	4611      	mov	r1, r2
 80033bc:	2200      	movs	r2, #0
 80033be:	4d05      	ldr	r5, [pc, #20]	@ (80033d4 <_write_r+0x20>)
 80033c0:	602a      	str	r2, [r5, #0]
 80033c2:	461a      	mov	r2, r3
 80033c4:	f7ff fbc1 	bl	8002b4a <_write>
 80033c8:	1c43      	adds	r3, r0, #1
 80033ca:	d102      	bne.n	80033d2 <_write_r+0x1e>
 80033cc:	682b      	ldr	r3, [r5, #0]
 80033ce:	b103      	cbz	r3, 80033d2 <_write_r+0x1e>
 80033d0:	6023      	str	r3, [r4, #0]
 80033d2:	bd38      	pop	{r3, r4, r5, pc}
 80033d4:	200003b0 	.word	0x200003b0

080033d8 <__errno>:
 80033d8:	4b01      	ldr	r3, [pc, #4]	@ (80033e0 <__errno+0x8>)
 80033da:	6818      	ldr	r0, [r3, #0]
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	20000058 	.word	0x20000058

080033e4 <__libc_init_array>:
 80033e4:	b570      	push	{r4, r5, r6, lr}
 80033e6:	2600      	movs	r6, #0
 80033e8:	4d0c      	ldr	r5, [pc, #48]	@ (800341c <__libc_init_array+0x38>)
 80033ea:	4c0d      	ldr	r4, [pc, #52]	@ (8003420 <__libc_init_array+0x3c>)
 80033ec:	1b64      	subs	r4, r4, r5
 80033ee:	10a4      	asrs	r4, r4, #2
 80033f0:	42a6      	cmp	r6, r4
 80033f2:	d109      	bne.n	8003408 <__libc_init_array+0x24>
 80033f4:	f000 fed2 	bl	800419c <_init>
 80033f8:	2600      	movs	r6, #0
 80033fa:	4d0a      	ldr	r5, [pc, #40]	@ (8003424 <__libc_init_array+0x40>)
 80033fc:	4c0a      	ldr	r4, [pc, #40]	@ (8003428 <__libc_init_array+0x44>)
 80033fe:	1b64      	subs	r4, r4, r5
 8003400:	10a4      	asrs	r4, r4, #2
 8003402:	42a6      	cmp	r6, r4
 8003404:	d105      	bne.n	8003412 <__libc_init_array+0x2e>
 8003406:	bd70      	pop	{r4, r5, r6, pc}
 8003408:	f855 3b04 	ldr.w	r3, [r5], #4
 800340c:	4798      	blx	r3
 800340e:	3601      	adds	r6, #1
 8003410:	e7ee      	b.n	80033f0 <__libc_init_array+0xc>
 8003412:	f855 3b04 	ldr.w	r3, [r5], #4
 8003416:	4798      	blx	r3
 8003418:	3601      	adds	r6, #1
 800341a:	e7f2      	b.n	8003402 <__libc_init_array+0x1e>
 800341c:	08004614 	.word	0x08004614
 8003420:	08004614 	.word	0x08004614
 8003424:	08004614 	.word	0x08004614
 8003428:	08004618 	.word	0x08004618

0800342c <__retarget_lock_init_recursive>:
 800342c:	4770      	bx	lr

0800342e <__retarget_lock_acquire_recursive>:
 800342e:	4770      	bx	lr

08003430 <__retarget_lock_release_recursive>:
 8003430:	4770      	bx	lr
	...

08003434 <_free_r>:
 8003434:	b538      	push	{r3, r4, r5, lr}
 8003436:	4605      	mov	r5, r0
 8003438:	2900      	cmp	r1, #0
 800343a:	d040      	beq.n	80034be <_free_r+0x8a>
 800343c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003440:	1f0c      	subs	r4, r1, #4
 8003442:	2b00      	cmp	r3, #0
 8003444:	bfb8      	it	lt
 8003446:	18e4      	addlt	r4, r4, r3
 8003448:	f000 f8de 	bl	8003608 <__malloc_lock>
 800344c:	4a1c      	ldr	r2, [pc, #112]	@ (80034c0 <_free_r+0x8c>)
 800344e:	6813      	ldr	r3, [r2, #0]
 8003450:	b933      	cbnz	r3, 8003460 <_free_r+0x2c>
 8003452:	6063      	str	r3, [r4, #4]
 8003454:	6014      	str	r4, [r2, #0]
 8003456:	4628      	mov	r0, r5
 8003458:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800345c:	f000 b8da 	b.w	8003614 <__malloc_unlock>
 8003460:	42a3      	cmp	r3, r4
 8003462:	d908      	bls.n	8003476 <_free_r+0x42>
 8003464:	6820      	ldr	r0, [r4, #0]
 8003466:	1821      	adds	r1, r4, r0
 8003468:	428b      	cmp	r3, r1
 800346a:	bf01      	itttt	eq
 800346c:	6819      	ldreq	r1, [r3, #0]
 800346e:	685b      	ldreq	r3, [r3, #4]
 8003470:	1809      	addeq	r1, r1, r0
 8003472:	6021      	streq	r1, [r4, #0]
 8003474:	e7ed      	b.n	8003452 <_free_r+0x1e>
 8003476:	461a      	mov	r2, r3
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	b10b      	cbz	r3, 8003480 <_free_r+0x4c>
 800347c:	42a3      	cmp	r3, r4
 800347e:	d9fa      	bls.n	8003476 <_free_r+0x42>
 8003480:	6811      	ldr	r1, [r2, #0]
 8003482:	1850      	adds	r0, r2, r1
 8003484:	42a0      	cmp	r0, r4
 8003486:	d10b      	bne.n	80034a0 <_free_r+0x6c>
 8003488:	6820      	ldr	r0, [r4, #0]
 800348a:	4401      	add	r1, r0
 800348c:	1850      	adds	r0, r2, r1
 800348e:	4283      	cmp	r3, r0
 8003490:	6011      	str	r1, [r2, #0]
 8003492:	d1e0      	bne.n	8003456 <_free_r+0x22>
 8003494:	6818      	ldr	r0, [r3, #0]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	4408      	add	r0, r1
 800349a:	6010      	str	r0, [r2, #0]
 800349c:	6053      	str	r3, [r2, #4]
 800349e:	e7da      	b.n	8003456 <_free_r+0x22>
 80034a0:	d902      	bls.n	80034a8 <_free_r+0x74>
 80034a2:	230c      	movs	r3, #12
 80034a4:	602b      	str	r3, [r5, #0]
 80034a6:	e7d6      	b.n	8003456 <_free_r+0x22>
 80034a8:	6820      	ldr	r0, [r4, #0]
 80034aa:	1821      	adds	r1, r4, r0
 80034ac:	428b      	cmp	r3, r1
 80034ae:	bf01      	itttt	eq
 80034b0:	6819      	ldreq	r1, [r3, #0]
 80034b2:	685b      	ldreq	r3, [r3, #4]
 80034b4:	1809      	addeq	r1, r1, r0
 80034b6:	6021      	streq	r1, [r4, #0]
 80034b8:	6063      	str	r3, [r4, #4]
 80034ba:	6054      	str	r4, [r2, #4]
 80034bc:	e7cb      	b.n	8003456 <_free_r+0x22>
 80034be:	bd38      	pop	{r3, r4, r5, pc}
 80034c0:	200003bc 	.word	0x200003bc

080034c4 <sbrk_aligned>:
 80034c4:	b570      	push	{r4, r5, r6, lr}
 80034c6:	4e0f      	ldr	r6, [pc, #60]	@ (8003504 <sbrk_aligned+0x40>)
 80034c8:	460c      	mov	r4, r1
 80034ca:	6831      	ldr	r1, [r6, #0]
 80034cc:	4605      	mov	r5, r0
 80034ce:	b911      	cbnz	r1, 80034d6 <sbrk_aligned+0x12>
 80034d0:	f000 fd7e 	bl	8003fd0 <_sbrk_r>
 80034d4:	6030      	str	r0, [r6, #0]
 80034d6:	4621      	mov	r1, r4
 80034d8:	4628      	mov	r0, r5
 80034da:	f000 fd79 	bl	8003fd0 <_sbrk_r>
 80034de:	1c43      	adds	r3, r0, #1
 80034e0:	d103      	bne.n	80034ea <sbrk_aligned+0x26>
 80034e2:	f04f 34ff 	mov.w	r4, #4294967295
 80034e6:	4620      	mov	r0, r4
 80034e8:	bd70      	pop	{r4, r5, r6, pc}
 80034ea:	1cc4      	adds	r4, r0, #3
 80034ec:	f024 0403 	bic.w	r4, r4, #3
 80034f0:	42a0      	cmp	r0, r4
 80034f2:	d0f8      	beq.n	80034e6 <sbrk_aligned+0x22>
 80034f4:	1a21      	subs	r1, r4, r0
 80034f6:	4628      	mov	r0, r5
 80034f8:	f000 fd6a 	bl	8003fd0 <_sbrk_r>
 80034fc:	3001      	adds	r0, #1
 80034fe:	d1f2      	bne.n	80034e6 <sbrk_aligned+0x22>
 8003500:	e7ef      	b.n	80034e2 <sbrk_aligned+0x1e>
 8003502:	bf00      	nop
 8003504:	200003b8 	.word	0x200003b8

08003508 <_malloc_r>:
 8003508:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800350c:	1ccd      	adds	r5, r1, #3
 800350e:	f025 0503 	bic.w	r5, r5, #3
 8003512:	3508      	adds	r5, #8
 8003514:	2d0c      	cmp	r5, #12
 8003516:	bf38      	it	cc
 8003518:	250c      	movcc	r5, #12
 800351a:	2d00      	cmp	r5, #0
 800351c:	4606      	mov	r6, r0
 800351e:	db01      	blt.n	8003524 <_malloc_r+0x1c>
 8003520:	42a9      	cmp	r1, r5
 8003522:	d904      	bls.n	800352e <_malloc_r+0x26>
 8003524:	230c      	movs	r3, #12
 8003526:	6033      	str	r3, [r6, #0]
 8003528:	2000      	movs	r0, #0
 800352a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800352e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003604 <_malloc_r+0xfc>
 8003532:	f000 f869 	bl	8003608 <__malloc_lock>
 8003536:	f8d8 3000 	ldr.w	r3, [r8]
 800353a:	461c      	mov	r4, r3
 800353c:	bb44      	cbnz	r4, 8003590 <_malloc_r+0x88>
 800353e:	4629      	mov	r1, r5
 8003540:	4630      	mov	r0, r6
 8003542:	f7ff ffbf 	bl	80034c4 <sbrk_aligned>
 8003546:	1c43      	adds	r3, r0, #1
 8003548:	4604      	mov	r4, r0
 800354a:	d158      	bne.n	80035fe <_malloc_r+0xf6>
 800354c:	f8d8 4000 	ldr.w	r4, [r8]
 8003550:	4627      	mov	r7, r4
 8003552:	2f00      	cmp	r7, #0
 8003554:	d143      	bne.n	80035de <_malloc_r+0xd6>
 8003556:	2c00      	cmp	r4, #0
 8003558:	d04b      	beq.n	80035f2 <_malloc_r+0xea>
 800355a:	6823      	ldr	r3, [r4, #0]
 800355c:	4639      	mov	r1, r7
 800355e:	4630      	mov	r0, r6
 8003560:	eb04 0903 	add.w	r9, r4, r3
 8003564:	f000 fd34 	bl	8003fd0 <_sbrk_r>
 8003568:	4581      	cmp	r9, r0
 800356a:	d142      	bne.n	80035f2 <_malloc_r+0xea>
 800356c:	6821      	ldr	r1, [r4, #0]
 800356e:	4630      	mov	r0, r6
 8003570:	1a6d      	subs	r5, r5, r1
 8003572:	4629      	mov	r1, r5
 8003574:	f7ff ffa6 	bl	80034c4 <sbrk_aligned>
 8003578:	3001      	adds	r0, #1
 800357a:	d03a      	beq.n	80035f2 <_malloc_r+0xea>
 800357c:	6823      	ldr	r3, [r4, #0]
 800357e:	442b      	add	r3, r5
 8003580:	6023      	str	r3, [r4, #0]
 8003582:	f8d8 3000 	ldr.w	r3, [r8]
 8003586:	685a      	ldr	r2, [r3, #4]
 8003588:	bb62      	cbnz	r2, 80035e4 <_malloc_r+0xdc>
 800358a:	f8c8 7000 	str.w	r7, [r8]
 800358e:	e00f      	b.n	80035b0 <_malloc_r+0xa8>
 8003590:	6822      	ldr	r2, [r4, #0]
 8003592:	1b52      	subs	r2, r2, r5
 8003594:	d420      	bmi.n	80035d8 <_malloc_r+0xd0>
 8003596:	2a0b      	cmp	r2, #11
 8003598:	d917      	bls.n	80035ca <_malloc_r+0xc2>
 800359a:	1961      	adds	r1, r4, r5
 800359c:	42a3      	cmp	r3, r4
 800359e:	6025      	str	r5, [r4, #0]
 80035a0:	bf18      	it	ne
 80035a2:	6059      	strne	r1, [r3, #4]
 80035a4:	6863      	ldr	r3, [r4, #4]
 80035a6:	bf08      	it	eq
 80035a8:	f8c8 1000 	streq.w	r1, [r8]
 80035ac:	5162      	str	r2, [r4, r5]
 80035ae:	604b      	str	r3, [r1, #4]
 80035b0:	4630      	mov	r0, r6
 80035b2:	f000 f82f 	bl	8003614 <__malloc_unlock>
 80035b6:	f104 000b 	add.w	r0, r4, #11
 80035ba:	1d23      	adds	r3, r4, #4
 80035bc:	f020 0007 	bic.w	r0, r0, #7
 80035c0:	1ac2      	subs	r2, r0, r3
 80035c2:	bf1c      	itt	ne
 80035c4:	1a1b      	subne	r3, r3, r0
 80035c6:	50a3      	strne	r3, [r4, r2]
 80035c8:	e7af      	b.n	800352a <_malloc_r+0x22>
 80035ca:	6862      	ldr	r2, [r4, #4]
 80035cc:	42a3      	cmp	r3, r4
 80035ce:	bf0c      	ite	eq
 80035d0:	f8c8 2000 	streq.w	r2, [r8]
 80035d4:	605a      	strne	r2, [r3, #4]
 80035d6:	e7eb      	b.n	80035b0 <_malloc_r+0xa8>
 80035d8:	4623      	mov	r3, r4
 80035da:	6864      	ldr	r4, [r4, #4]
 80035dc:	e7ae      	b.n	800353c <_malloc_r+0x34>
 80035de:	463c      	mov	r4, r7
 80035e0:	687f      	ldr	r7, [r7, #4]
 80035e2:	e7b6      	b.n	8003552 <_malloc_r+0x4a>
 80035e4:	461a      	mov	r2, r3
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	42a3      	cmp	r3, r4
 80035ea:	d1fb      	bne.n	80035e4 <_malloc_r+0xdc>
 80035ec:	2300      	movs	r3, #0
 80035ee:	6053      	str	r3, [r2, #4]
 80035f0:	e7de      	b.n	80035b0 <_malloc_r+0xa8>
 80035f2:	230c      	movs	r3, #12
 80035f4:	4630      	mov	r0, r6
 80035f6:	6033      	str	r3, [r6, #0]
 80035f8:	f000 f80c 	bl	8003614 <__malloc_unlock>
 80035fc:	e794      	b.n	8003528 <_malloc_r+0x20>
 80035fe:	6005      	str	r5, [r0, #0]
 8003600:	e7d6      	b.n	80035b0 <_malloc_r+0xa8>
 8003602:	bf00      	nop
 8003604:	200003bc 	.word	0x200003bc

08003608 <__malloc_lock>:
 8003608:	4801      	ldr	r0, [pc, #4]	@ (8003610 <__malloc_lock+0x8>)
 800360a:	f7ff bf10 	b.w	800342e <__retarget_lock_acquire_recursive>
 800360e:	bf00      	nop
 8003610:	200003b4 	.word	0x200003b4

08003614 <__malloc_unlock>:
 8003614:	4801      	ldr	r0, [pc, #4]	@ (800361c <__malloc_unlock+0x8>)
 8003616:	f7ff bf0b 	b.w	8003430 <__retarget_lock_release_recursive>
 800361a:	bf00      	nop
 800361c:	200003b4 	.word	0x200003b4

08003620 <__ssputs_r>:
 8003620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003624:	461f      	mov	r7, r3
 8003626:	688e      	ldr	r6, [r1, #8]
 8003628:	4682      	mov	sl, r0
 800362a:	42be      	cmp	r6, r7
 800362c:	460c      	mov	r4, r1
 800362e:	4690      	mov	r8, r2
 8003630:	680b      	ldr	r3, [r1, #0]
 8003632:	d82d      	bhi.n	8003690 <__ssputs_r+0x70>
 8003634:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003638:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800363c:	d026      	beq.n	800368c <__ssputs_r+0x6c>
 800363e:	6965      	ldr	r5, [r4, #20]
 8003640:	6909      	ldr	r1, [r1, #16]
 8003642:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003646:	eba3 0901 	sub.w	r9, r3, r1
 800364a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800364e:	1c7b      	adds	r3, r7, #1
 8003650:	444b      	add	r3, r9
 8003652:	106d      	asrs	r5, r5, #1
 8003654:	429d      	cmp	r5, r3
 8003656:	bf38      	it	cc
 8003658:	461d      	movcc	r5, r3
 800365a:	0553      	lsls	r3, r2, #21
 800365c:	d527      	bpl.n	80036ae <__ssputs_r+0x8e>
 800365e:	4629      	mov	r1, r5
 8003660:	f7ff ff52 	bl	8003508 <_malloc_r>
 8003664:	4606      	mov	r6, r0
 8003666:	b360      	cbz	r0, 80036c2 <__ssputs_r+0xa2>
 8003668:	464a      	mov	r2, r9
 800366a:	6921      	ldr	r1, [r4, #16]
 800366c:	f000 fcce 	bl	800400c <memcpy>
 8003670:	89a3      	ldrh	r3, [r4, #12]
 8003672:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003676:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800367a:	81a3      	strh	r3, [r4, #12]
 800367c:	6126      	str	r6, [r4, #16]
 800367e:	444e      	add	r6, r9
 8003680:	6026      	str	r6, [r4, #0]
 8003682:	463e      	mov	r6, r7
 8003684:	6165      	str	r5, [r4, #20]
 8003686:	eba5 0509 	sub.w	r5, r5, r9
 800368a:	60a5      	str	r5, [r4, #8]
 800368c:	42be      	cmp	r6, r7
 800368e:	d900      	bls.n	8003692 <__ssputs_r+0x72>
 8003690:	463e      	mov	r6, r7
 8003692:	4632      	mov	r2, r6
 8003694:	4641      	mov	r1, r8
 8003696:	6820      	ldr	r0, [r4, #0]
 8003698:	f000 fc80 	bl	8003f9c <memmove>
 800369c:	2000      	movs	r0, #0
 800369e:	68a3      	ldr	r3, [r4, #8]
 80036a0:	1b9b      	subs	r3, r3, r6
 80036a2:	60a3      	str	r3, [r4, #8]
 80036a4:	6823      	ldr	r3, [r4, #0]
 80036a6:	4433      	add	r3, r6
 80036a8:	6023      	str	r3, [r4, #0]
 80036aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036ae:	462a      	mov	r2, r5
 80036b0:	f000 fcba 	bl	8004028 <_realloc_r>
 80036b4:	4606      	mov	r6, r0
 80036b6:	2800      	cmp	r0, #0
 80036b8:	d1e0      	bne.n	800367c <__ssputs_r+0x5c>
 80036ba:	4650      	mov	r0, sl
 80036bc:	6921      	ldr	r1, [r4, #16]
 80036be:	f7ff feb9 	bl	8003434 <_free_r>
 80036c2:	230c      	movs	r3, #12
 80036c4:	f8ca 3000 	str.w	r3, [sl]
 80036c8:	89a3      	ldrh	r3, [r4, #12]
 80036ca:	f04f 30ff 	mov.w	r0, #4294967295
 80036ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80036d2:	81a3      	strh	r3, [r4, #12]
 80036d4:	e7e9      	b.n	80036aa <__ssputs_r+0x8a>
	...

080036d8 <_svfiprintf_r>:
 80036d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036dc:	4698      	mov	r8, r3
 80036de:	898b      	ldrh	r3, [r1, #12]
 80036e0:	4607      	mov	r7, r0
 80036e2:	061b      	lsls	r3, r3, #24
 80036e4:	460d      	mov	r5, r1
 80036e6:	4614      	mov	r4, r2
 80036e8:	b09d      	sub	sp, #116	@ 0x74
 80036ea:	d510      	bpl.n	800370e <_svfiprintf_r+0x36>
 80036ec:	690b      	ldr	r3, [r1, #16]
 80036ee:	b973      	cbnz	r3, 800370e <_svfiprintf_r+0x36>
 80036f0:	2140      	movs	r1, #64	@ 0x40
 80036f2:	f7ff ff09 	bl	8003508 <_malloc_r>
 80036f6:	6028      	str	r0, [r5, #0]
 80036f8:	6128      	str	r0, [r5, #16]
 80036fa:	b930      	cbnz	r0, 800370a <_svfiprintf_r+0x32>
 80036fc:	230c      	movs	r3, #12
 80036fe:	603b      	str	r3, [r7, #0]
 8003700:	f04f 30ff 	mov.w	r0, #4294967295
 8003704:	b01d      	add	sp, #116	@ 0x74
 8003706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800370a:	2340      	movs	r3, #64	@ 0x40
 800370c:	616b      	str	r3, [r5, #20]
 800370e:	2300      	movs	r3, #0
 8003710:	9309      	str	r3, [sp, #36]	@ 0x24
 8003712:	2320      	movs	r3, #32
 8003714:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003718:	2330      	movs	r3, #48	@ 0x30
 800371a:	f04f 0901 	mov.w	r9, #1
 800371e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003722:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80038bc <_svfiprintf_r+0x1e4>
 8003726:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800372a:	4623      	mov	r3, r4
 800372c:	469a      	mov	sl, r3
 800372e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003732:	b10a      	cbz	r2, 8003738 <_svfiprintf_r+0x60>
 8003734:	2a25      	cmp	r2, #37	@ 0x25
 8003736:	d1f9      	bne.n	800372c <_svfiprintf_r+0x54>
 8003738:	ebba 0b04 	subs.w	fp, sl, r4
 800373c:	d00b      	beq.n	8003756 <_svfiprintf_r+0x7e>
 800373e:	465b      	mov	r3, fp
 8003740:	4622      	mov	r2, r4
 8003742:	4629      	mov	r1, r5
 8003744:	4638      	mov	r0, r7
 8003746:	f7ff ff6b 	bl	8003620 <__ssputs_r>
 800374a:	3001      	adds	r0, #1
 800374c:	f000 80a7 	beq.w	800389e <_svfiprintf_r+0x1c6>
 8003750:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003752:	445a      	add	r2, fp
 8003754:	9209      	str	r2, [sp, #36]	@ 0x24
 8003756:	f89a 3000 	ldrb.w	r3, [sl]
 800375a:	2b00      	cmp	r3, #0
 800375c:	f000 809f 	beq.w	800389e <_svfiprintf_r+0x1c6>
 8003760:	2300      	movs	r3, #0
 8003762:	f04f 32ff 	mov.w	r2, #4294967295
 8003766:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800376a:	f10a 0a01 	add.w	sl, sl, #1
 800376e:	9304      	str	r3, [sp, #16]
 8003770:	9307      	str	r3, [sp, #28]
 8003772:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003776:	931a      	str	r3, [sp, #104]	@ 0x68
 8003778:	4654      	mov	r4, sl
 800377a:	2205      	movs	r2, #5
 800377c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003780:	484e      	ldr	r0, [pc, #312]	@ (80038bc <_svfiprintf_r+0x1e4>)
 8003782:	f000 fc35 	bl	8003ff0 <memchr>
 8003786:	9a04      	ldr	r2, [sp, #16]
 8003788:	b9d8      	cbnz	r0, 80037c2 <_svfiprintf_r+0xea>
 800378a:	06d0      	lsls	r0, r2, #27
 800378c:	bf44      	itt	mi
 800378e:	2320      	movmi	r3, #32
 8003790:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003794:	0711      	lsls	r1, r2, #28
 8003796:	bf44      	itt	mi
 8003798:	232b      	movmi	r3, #43	@ 0x2b
 800379a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800379e:	f89a 3000 	ldrb.w	r3, [sl]
 80037a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80037a4:	d015      	beq.n	80037d2 <_svfiprintf_r+0xfa>
 80037a6:	4654      	mov	r4, sl
 80037a8:	2000      	movs	r0, #0
 80037aa:	f04f 0c0a 	mov.w	ip, #10
 80037ae:	9a07      	ldr	r2, [sp, #28]
 80037b0:	4621      	mov	r1, r4
 80037b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80037b6:	3b30      	subs	r3, #48	@ 0x30
 80037b8:	2b09      	cmp	r3, #9
 80037ba:	d94b      	bls.n	8003854 <_svfiprintf_r+0x17c>
 80037bc:	b1b0      	cbz	r0, 80037ec <_svfiprintf_r+0x114>
 80037be:	9207      	str	r2, [sp, #28]
 80037c0:	e014      	b.n	80037ec <_svfiprintf_r+0x114>
 80037c2:	eba0 0308 	sub.w	r3, r0, r8
 80037c6:	fa09 f303 	lsl.w	r3, r9, r3
 80037ca:	4313      	orrs	r3, r2
 80037cc:	46a2      	mov	sl, r4
 80037ce:	9304      	str	r3, [sp, #16]
 80037d0:	e7d2      	b.n	8003778 <_svfiprintf_r+0xa0>
 80037d2:	9b03      	ldr	r3, [sp, #12]
 80037d4:	1d19      	adds	r1, r3, #4
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	9103      	str	r1, [sp, #12]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	bfbb      	ittet	lt
 80037de:	425b      	neglt	r3, r3
 80037e0:	f042 0202 	orrlt.w	r2, r2, #2
 80037e4:	9307      	strge	r3, [sp, #28]
 80037e6:	9307      	strlt	r3, [sp, #28]
 80037e8:	bfb8      	it	lt
 80037ea:	9204      	strlt	r2, [sp, #16]
 80037ec:	7823      	ldrb	r3, [r4, #0]
 80037ee:	2b2e      	cmp	r3, #46	@ 0x2e
 80037f0:	d10a      	bne.n	8003808 <_svfiprintf_r+0x130>
 80037f2:	7863      	ldrb	r3, [r4, #1]
 80037f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80037f6:	d132      	bne.n	800385e <_svfiprintf_r+0x186>
 80037f8:	9b03      	ldr	r3, [sp, #12]
 80037fa:	3402      	adds	r4, #2
 80037fc:	1d1a      	adds	r2, r3, #4
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	9203      	str	r2, [sp, #12]
 8003802:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003806:	9305      	str	r3, [sp, #20]
 8003808:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80038c0 <_svfiprintf_r+0x1e8>
 800380c:	2203      	movs	r2, #3
 800380e:	4650      	mov	r0, sl
 8003810:	7821      	ldrb	r1, [r4, #0]
 8003812:	f000 fbed 	bl	8003ff0 <memchr>
 8003816:	b138      	cbz	r0, 8003828 <_svfiprintf_r+0x150>
 8003818:	2240      	movs	r2, #64	@ 0x40
 800381a:	9b04      	ldr	r3, [sp, #16]
 800381c:	eba0 000a 	sub.w	r0, r0, sl
 8003820:	4082      	lsls	r2, r0
 8003822:	4313      	orrs	r3, r2
 8003824:	3401      	adds	r4, #1
 8003826:	9304      	str	r3, [sp, #16]
 8003828:	f814 1b01 	ldrb.w	r1, [r4], #1
 800382c:	2206      	movs	r2, #6
 800382e:	4825      	ldr	r0, [pc, #148]	@ (80038c4 <_svfiprintf_r+0x1ec>)
 8003830:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003834:	f000 fbdc 	bl	8003ff0 <memchr>
 8003838:	2800      	cmp	r0, #0
 800383a:	d036      	beq.n	80038aa <_svfiprintf_r+0x1d2>
 800383c:	4b22      	ldr	r3, [pc, #136]	@ (80038c8 <_svfiprintf_r+0x1f0>)
 800383e:	bb1b      	cbnz	r3, 8003888 <_svfiprintf_r+0x1b0>
 8003840:	9b03      	ldr	r3, [sp, #12]
 8003842:	3307      	adds	r3, #7
 8003844:	f023 0307 	bic.w	r3, r3, #7
 8003848:	3308      	adds	r3, #8
 800384a:	9303      	str	r3, [sp, #12]
 800384c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800384e:	4433      	add	r3, r6
 8003850:	9309      	str	r3, [sp, #36]	@ 0x24
 8003852:	e76a      	b.n	800372a <_svfiprintf_r+0x52>
 8003854:	460c      	mov	r4, r1
 8003856:	2001      	movs	r0, #1
 8003858:	fb0c 3202 	mla	r2, ip, r2, r3
 800385c:	e7a8      	b.n	80037b0 <_svfiprintf_r+0xd8>
 800385e:	2300      	movs	r3, #0
 8003860:	f04f 0c0a 	mov.w	ip, #10
 8003864:	4619      	mov	r1, r3
 8003866:	3401      	adds	r4, #1
 8003868:	9305      	str	r3, [sp, #20]
 800386a:	4620      	mov	r0, r4
 800386c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003870:	3a30      	subs	r2, #48	@ 0x30
 8003872:	2a09      	cmp	r2, #9
 8003874:	d903      	bls.n	800387e <_svfiprintf_r+0x1a6>
 8003876:	2b00      	cmp	r3, #0
 8003878:	d0c6      	beq.n	8003808 <_svfiprintf_r+0x130>
 800387a:	9105      	str	r1, [sp, #20]
 800387c:	e7c4      	b.n	8003808 <_svfiprintf_r+0x130>
 800387e:	4604      	mov	r4, r0
 8003880:	2301      	movs	r3, #1
 8003882:	fb0c 2101 	mla	r1, ip, r1, r2
 8003886:	e7f0      	b.n	800386a <_svfiprintf_r+0x192>
 8003888:	ab03      	add	r3, sp, #12
 800388a:	9300      	str	r3, [sp, #0]
 800388c:	462a      	mov	r2, r5
 800388e:	4638      	mov	r0, r7
 8003890:	4b0e      	ldr	r3, [pc, #56]	@ (80038cc <_svfiprintf_r+0x1f4>)
 8003892:	a904      	add	r1, sp, #16
 8003894:	f3af 8000 	nop.w
 8003898:	1c42      	adds	r2, r0, #1
 800389a:	4606      	mov	r6, r0
 800389c:	d1d6      	bne.n	800384c <_svfiprintf_r+0x174>
 800389e:	89ab      	ldrh	r3, [r5, #12]
 80038a0:	065b      	lsls	r3, r3, #25
 80038a2:	f53f af2d 	bmi.w	8003700 <_svfiprintf_r+0x28>
 80038a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80038a8:	e72c      	b.n	8003704 <_svfiprintf_r+0x2c>
 80038aa:	ab03      	add	r3, sp, #12
 80038ac:	9300      	str	r3, [sp, #0]
 80038ae:	462a      	mov	r2, r5
 80038b0:	4638      	mov	r0, r7
 80038b2:	4b06      	ldr	r3, [pc, #24]	@ (80038cc <_svfiprintf_r+0x1f4>)
 80038b4:	a904      	add	r1, sp, #16
 80038b6:	f000 f9bd 	bl	8003c34 <_printf_i>
 80038ba:	e7ed      	b.n	8003898 <_svfiprintf_r+0x1c0>
 80038bc:	080045d6 	.word	0x080045d6
 80038c0:	080045dc 	.word	0x080045dc
 80038c4:	080045e0 	.word	0x080045e0
 80038c8:	00000000 	.word	0x00000000
 80038cc:	08003621 	.word	0x08003621

080038d0 <__sfputc_r>:
 80038d0:	6893      	ldr	r3, [r2, #8]
 80038d2:	b410      	push	{r4}
 80038d4:	3b01      	subs	r3, #1
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	6093      	str	r3, [r2, #8]
 80038da:	da07      	bge.n	80038ec <__sfputc_r+0x1c>
 80038dc:	6994      	ldr	r4, [r2, #24]
 80038de:	42a3      	cmp	r3, r4
 80038e0:	db01      	blt.n	80038e6 <__sfputc_r+0x16>
 80038e2:	290a      	cmp	r1, #10
 80038e4:	d102      	bne.n	80038ec <__sfputc_r+0x1c>
 80038e6:	bc10      	pop	{r4}
 80038e8:	f000 bac4 	b.w	8003e74 <__swbuf_r>
 80038ec:	6813      	ldr	r3, [r2, #0]
 80038ee:	1c58      	adds	r0, r3, #1
 80038f0:	6010      	str	r0, [r2, #0]
 80038f2:	7019      	strb	r1, [r3, #0]
 80038f4:	4608      	mov	r0, r1
 80038f6:	bc10      	pop	{r4}
 80038f8:	4770      	bx	lr

080038fa <__sfputs_r>:
 80038fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038fc:	4606      	mov	r6, r0
 80038fe:	460f      	mov	r7, r1
 8003900:	4614      	mov	r4, r2
 8003902:	18d5      	adds	r5, r2, r3
 8003904:	42ac      	cmp	r4, r5
 8003906:	d101      	bne.n	800390c <__sfputs_r+0x12>
 8003908:	2000      	movs	r0, #0
 800390a:	e007      	b.n	800391c <__sfputs_r+0x22>
 800390c:	463a      	mov	r2, r7
 800390e:	4630      	mov	r0, r6
 8003910:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003914:	f7ff ffdc 	bl	80038d0 <__sfputc_r>
 8003918:	1c43      	adds	r3, r0, #1
 800391a:	d1f3      	bne.n	8003904 <__sfputs_r+0xa>
 800391c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003920 <_vfiprintf_r>:
 8003920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003924:	460d      	mov	r5, r1
 8003926:	4614      	mov	r4, r2
 8003928:	4698      	mov	r8, r3
 800392a:	4606      	mov	r6, r0
 800392c:	b09d      	sub	sp, #116	@ 0x74
 800392e:	b118      	cbz	r0, 8003938 <_vfiprintf_r+0x18>
 8003930:	6a03      	ldr	r3, [r0, #32]
 8003932:	b90b      	cbnz	r3, 8003938 <_vfiprintf_r+0x18>
 8003934:	f7ff fc42 	bl	80031bc <__sinit>
 8003938:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800393a:	07d9      	lsls	r1, r3, #31
 800393c:	d405      	bmi.n	800394a <_vfiprintf_r+0x2a>
 800393e:	89ab      	ldrh	r3, [r5, #12]
 8003940:	059a      	lsls	r2, r3, #22
 8003942:	d402      	bmi.n	800394a <_vfiprintf_r+0x2a>
 8003944:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003946:	f7ff fd72 	bl	800342e <__retarget_lock_acquire_recursive>
 800394a:	89ab      	ldrh	r3, [r5, #12]
 800394c:	071b      	lsls	r3, r3, #28
 800394e:	d501      	bpl.n	8003954 <_vfiprintf_r+0x34>
 8003950:	692b      	ldr	r3, [r5, #16]
 8003952:	b99b      	cbnz	r3, 800397c <_vfiprintf_r+0x5c>
 8003954:	4629      	mov	r1, r5
 8003956:	4630      	mov	r0, r6
 8003958:	f000 faca 	bl	8003ef0 <__swsetup_r>
 800395c:	b170      	cbz	r0, 800397c <_vfiprintf_r+0x5c>
 800395e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003960:	07dc      	lsls	r4, r3, #31
 8003962:	d504      	bpl.n	800396e <_vfiprintf_r+0x4e>
 8003964:	f04f 30ff 	mov.w	r0, #4294967295
 8003968:	b01d      	add	sp, #116	@ 0x74
 800396a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800396e:	89ab      	ldrh	r3, [r5, #12]
 8003970:	0598      	lsls	r0, r3, #22
 8003972:	d4f7      	bmi.n	8003964 <_vfiprintf_r+0x44>
 8003974:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003976:	f7ff fd5b 	bl	8003430 <__retarget_lock_release_recursive>
 800397a:	e7f3      	b.n	8003964 <_vfiprintf_r+0x44>
 800397c:	2300      	movs	r3, #0
 800397e:	9309      	str	r3, [sp, #36]	@ 0x24
 8003980:	2320      	movs	r3, #32
 8003982:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003986:	2330      	movs	r3, #48	@ 0x30
 8003988:	f04f 0901 	mov.w	r9, #1
 800398c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003990:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8003b3c <_vfiprintf_r+0x21c>
 8003994:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003998:	4623      	mov	r3, r4
 800399a:	469a      	mov	sl, r3
 800399c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80039a0:	b10a      	cbz	r2, 80039a6 <_vfiprintf_r+0x86>
 80039a2:	2a25      	cmp	r2, #37	@ 0x25
 80039a4:	d1f9      	bne.n	800399a <_vfiprintf_r+0x7a>
 80039a6:	ebba 0b04 	subs.w	fp, sl, r4
 80039aa:	d00b      	beq.n	80039c4 <_vfiprintf_r+0xa4>
 80039ac:	465b      	mov	r3, fp
 80039ae:	4622      	mov	r2, r4
 80039b0:	4629      	mov	r1, r5
 80039b2:	4630      	mov	r0, r6
 80039b4:	f7ff ffa1 	bl	80038fa <__sfputs_r>
 80039b8:	3001      	adds	r0, #1
 80039ba:	f000 80a7 	beq.w	8003b0c <_vfiprintf_r+0x1ec>
 80039be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80039c0:	445a      	add	r2, fp
 80039c2:	9209      	str	r2, [sp, #36]	@ 0x24
 80039c4:	f89a 3000 	ldrb.w	r3, [sl]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	f000 809f 	beq.w	8003b0c <_vfiprintf_r+0x1ec>
 80039ce:	2300      	movs	r3, #0
 80039d0:	f04f 32ff 	mov.w	r2, #4294967295
 80039d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80039d8:	f10a 0a01 	add.w	sl, sl, #1
 80039dc:	9304      	str	r3, [sp, #16]
 80039de:	9307      	str	r3, [sp, #28]
 80039e0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80039e4:	931a      	str	r3, [sp, #104]	@ 0x68
 80039e6:	4654      	mov	r4, sl
 80039e8:	2205      	movs	r2, #5
 80039ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039ee:	4853      	ldr	r0, [pc, #332]	@ (8003b3c <_vfiprintf_r+0x21c>)
 80039f0:	f000 fafe 	bl	8003ff0 <memchr>
 80039f4:	9a04      	ldr	r2, [sp, #16]
 80039f6:	b9d8      	cbnz	r0, 8003a30 <_vfiprintf_r+0x110>
 80039f8:	06d1      	lsls	r1, r2, #27
 80039fa:	bf44      	itt	mi
 80039fc:	2320      	movmi	r3, #32
 80039fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003a02:	0713      	lsls	r3, r2, #28
 8003a04:	bf44      	itt	mi
 8003a06:	232b      	movmi	r3, #43	@ 0x2b
 8003a08:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003a0c:	f89a 3000 	ldrb.w	r3, [sl]
 8003a10:	2b2a      	cmp	r3, #42	@ 0x2a
 8003a12:	d015      	beq.n	8003a40 <_vfiprintf_r+0x120>
 8003a14:	4654      	mov	r4, sl
 8003a16:	2000      	movs	r0, #0
 8003a18:	f04f 0c0a 	mov.w	ip, #10
 8003a1c:	9a07      	ldr	r2, [sp, #28]
 8003a1e:	4621      	mov	r1, r4
 8003a20:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a24:	3b30      	subs	r3, #48	@ 0x30
 8003a26:	2b09      	cmp	r3, #9
 8003a28:	d94b      	bls.n	8003ac2 <_vfiprintf_r+0x1a2>
 8003a2a:	b1b0      	cbz	r0, 8003a5a <_vfiprintf_r+0x13a>
 8003a2c:	9207      	str	r2, [sp, #28]
 8003a2e:	e014      	b.n	8003a5a <_vfiprintf_r+0x13a>
 8003a30:	eba0 0308 	sub.w	r3, r0, r8
 8003a34:	fa09 f303 	lsl.w	r3, r9, r3
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	46a2      	mov	sl, r4
 8003a3c:	9304      	str	r3, [sp, #16]
 8003a3e:	e7d2      	b.n	80039e6 <_vfiprintf_r+0xc6>
 8003a40:	9b03      	ldr	r3, [sp, #12]
 8003a42:	1d19      	adds	r1, r3, #4
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	9103      	str	r1, [sp, #12]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	bfbb      	ittet	lt
 8003a4c:	425b      	neglt	r3, r3
 8003a4e:	f042 0202 	orrlt.w	r2, r2, #2
 8003a52:	9307      	strge	r3, [sp, #28]
 8003a54:	9307      	strlt	r3, [sp, #28]
 8003a56:	bfb8      	it	lt
 8003a58:	9204      	strlt	r2, [sp, #16]
 8003a5a:	7823      	ldrb	r3, [r4, #0]
 8003a5c:	2b2e      	cmp	r3, #46	@ 0x2e
 8003a5e:	d10a      	bne.n	8003a76 <_vfiprintf_r+0x156>
 8003a60:	7863      	ldrb	r3, [r4, #1]
 8003a62:	2b2a      	cmp	r3, #42	@ 0x2a
 8003a64:	d132      	bne.n	8003acc <_vfiprintf_r+0x1ac>
 8003a66:	9b03      	ldr	r3, [sp, #12]
 8003a68:	3402      	adds	r4, #2
 8003a6a:	1d1a      	adds	r2, r3, #4
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	9203      	str	r2, [sp, #12]
 8003a70:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003a74:	9305      	str	r3, [sp, #20]
 8003a76:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8003b40 <_vfiprintf_r+0x220>
 8003a7a:	2203      	movs	r2, #3
 8003a7c:	4650      	mov	r0, sl
 8003a7e:	7821      	ldrb	r1, [r4, #0]
 8003a80:	f000 fab6 	bl	8003ff0 <memchr>
 8003a84:	b138      	cbz	r0, 8003a96 <_vfiprintf_r+0x176>
 8003a86:	2240      	movs	r2, #64	@ 0x40
 8003a88:	9b04      	ldr	r3, [sp, #16]
 8003a8a:	eba0 000a 	sub.w	r0, r0, sl
 8003a8e:	4082      	lsls	r2, r0
 8003a90:	4313      	orrs	r3, r2
 8003a92:	3401      	adds	r4, #1
 8003a94:	9304      	str	r3, [sp, #16]
 8003a96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a9a:	2206      	movs	r2, #6
 8003a9c:	4829      	ldr	r0, [pc, #164]	@ (8003b44 <_vfiprintf_r+0x224>)
 8003a9e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003aa2:	f000 faa5 	bl	8003ff0 <memchr>
 8003aa6:	2800      	cmp	r0, #0
 8003aa8:	d03f      	beq.n	8003b2a <_vfiprintf_r+0x20a>
 8003aaa:	4b27      	ldr	r3, [pc, #156]	@ (8003b48 <_vfiprintf_r+0x228>)
 8003aac:	bb1b      	cbnz	r3, 8003af6 <_vfiprintf_r+0x1d6>
 8003aae:	9b03      	ldr	r3, [sp, #12]
 8003ab0:	3307      	adds	r3, #7
 8003ab2:	f023 0307 	bic.w	r3, r3, #7
 8003ab6:	3308      	adds	r3, #8
 8003ab8:	9303      	str	r3, [sp, #12]
 8003aba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003abc:	443b      	add	r3, r7
 8003abe:	9309      	str	r3, [sp, #36]	@ 0x24
 8003ac0:	e76a      	b.n	8003998 <_vfiprintf_r+0x78>
 8003ac2:	460c      	mov	r4, r1
 8003ac4:	2001      	movs	r0, #1
 8003ac6:	fb0c 3202 	mla	r2, ip, r2, r3
 8003aca:	e7a8      	b.n	8003a1e <_vfiprintf_r+0xfe>
 8003acc:	2300      	movs	r3, #0
 8003ace:	f04f 0c0a 	mov.w	ip, #10
 8003ad2:	4619      	mov	r1, r3
 8003ad4:	3401      	adds	r4, #1
 8003ad6:	9305      	str	r3, [sp, #20]
 8003ad8:	4620      	mov	r0, r4
 8003ada:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003ade:	3a30      	subs	r2, #48	@ 0x30
 8003ae0:	2a09      	cmp	r2, #9
 8003ae2:	d903      	bls.n	8003aec <_vfiprintf_r+0x1cc>
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d0c6      	beq.n	8003a76 <_vfiprintf_r+0x156>
 8003ae8:	9105      	str	r1, [sp, #20]
 8003aea:	e7c4      	b.n	8003a76 <_vfiprintf_r+0x156>
 8003aec:	4604      	mov	r4, r0
 8003aee:	2301      	movs	r3, #1
 8003af0:	fb0c 2101 	mla	r1, ip, r1, r2
 8003af4:	e7f0      	b.n	8003ad8 <_vfiprintf_r+0x1b8>
 8003af6:	ab03      	add	r3, sp, #12
 8003af8:	9300      	str	r3, [sp, #0]
 8003afa:	462a      	mov	r2, r5
 8003afc:	4630      	mov	r0, r6
 8003afe:	4b13      	ldr	r3, [pc, #76]	@ (8003b4c <_vfiprintf_r+0x22c>)
 8003b00:	a904      	add	r1, sp, #16
 8003b02:	f3af 8000 	nop.w
 8003b06:	4607      	mov	r7, r0
 8003b08:	1c78      	adds	r0, r7, #1
 8003b0a:	d1d6      	bne.n	8003aba <_vfiprintf_r+0x19a>
 8003b0c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003b0e:	07d9      	lsls	r1, r3, #31
 8003b10:	d405      	bmi.n	8003b1e <_vfiprintf_r+0x1fe>
 8003b12:	89ab      	ldrh	r3, [r5, #12]
 8003b14:	059a      	lsls	r2, r3, #22
 8003b16:	d402      	bmi.n	8003b1e <_vfiprintf_r+0x1fe>
 8003b18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003b1a:	f7ff fc89 	bl	8003430 <__retarget_lock_release_recursive>
 8003b1e:	89ab      	ldrh	r3, [r5, #12]
 8003b20:	065b      	lsls	r3, r3, #25
 8003b22:	f53f af1f 	bmi.w	8003964 <_vfiprintf_r+0x44>
 8003b26:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003b28:	e71e      	b.n	8003968 <_vfiprintf_r+0x48>
 8003b2a:	ab03      	add	r3, sp, #12
 8003b2c:	9300      	str	r3, [sp, #0]
 8003b2e:	462a      	mov	r2, r5
 8003b30:	4630      	mov	r0, r6
 8003b32:	4b06      	ldr	r3, [pc, #24]	@ (8003b4c <_vfiprintf_r+0x22c>)
 8003b34:	a904      	add	r1, sp, #16
 8003b36:	f000 f87d 	bl	8003c34 <_printf_i>
 8003b3a:	e7e4      	b.n	8003b06 <_vfiprintf_r+0x1e6>
 8003b3c:	080045d6 	.word	0x080045d6
 8003b40:	080045dc 	.word	0x080045dc
 8003b44:	080045e0 	.word	0x080045e0
 8003b48:	00000000 	.word	0x00000000
 8003b4c:	080038fb 	.word	0x080038fb

08003b50 <_printf_common>:
 8003b50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b54:	4616      	mov	r6, r2
 8003b56:	4698      	mov	r8, r3
 8003b58:	688a      	ldr	r2, [r1, #8]
 8003b5a:	690b      	ldr	r3, [r1, #16]
 8003b5c:	4607      	mov	r7, r0
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	bfb8      	it	lt
 8003b62:	4613      	movlt	r3, r2
 8003b64:	6033      	str	r3, [r6, #0]
 8003b66:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003b6a:	460c      	mov	r4, r1
 8003b6c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003b70:	b10a      	cbz	r2, 8003b76 <_printf_common+0x26>
 8003b72:	3301      	adds	r3, #1
 8003b74:	6033      	str	r3, [r6, #0]
 8003b76:	6823      	ldr	r3, [r4, #0]
 8003b78:	0699      	lsls	r1, r3, #26
 8003b7a:	bf42      	ittt	mi
 8003b7c:	6833      	ldrmi	r3, [r6, #0]
 8003b7e:	3302      	addmi	r3, #2
 8003b80:	6033      	strmi	r3, [r6, #0]
 8003b82:	6825      	ldr	r5, [r4, #0]
 8003b84:	f015 0506 	ands.w	r5, r5, #6
 8003b88:	d106      	bne.n	8003b98 <_printf_common+0x48>
 8003b8a:	f104 0a19 	add.w	sl, r4, #25
 8003b8e:	68e3      	ldr	r3, [r4, #12]
 8003b90:	6832      	ldr	r2, [r6, #0]
 8003b92:	1a9b      	subs	r3, r3, r2
 8003b94:	42ab      	cmp	r3, r5
 8003b96:	dc2b      	bgt.n	8003bf0 <_printf_common+0xa0>
 8003b98:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003b9c:	6822      	ldr	r2, [r4, #0]
 8003b9e:	3b00      	subs	r3, #0
 8003ba0:	bf18      	it	ne
 8003ba2:	2301      	movne	r3, #1
 8003ba4:	0692      	lsls	r2, r2, #26
 8003ba6:	d430      	bmi.n	8003c0a <_printf_common+0xba>
 8003ba8:	4641      	mov	r1, r8
 8003baa:	4638      	mov	r0, r7
 8003bac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003bb0:	47c8      	blx	r9
 8003bb2:	3001      	adds	r0, #1
 8003bb4:	d023      	beq.n	8003bfe <_printf_common+0xae>
 8003bb6:	6823      	ldr	r3, [r4, #0]
 8003bb8:	6922      	ldr	r2, [r4, #16]
 8003bba:	f003 0306 	and.w	r3, r3, #6
 8003bbe:	2b04      	cmp	r3, #4
 8003bc0:	bf14      	ite	ne
 8003bc2:	2500      	movne	r5, #0
 8003bc4:	6833      	ldreq	r3, [r6, #0]
 8003bc6:	f04f 0600 	mov.w	r6, #0
 8003bca:	bf08      	it	eq
 8003bcc:	68e5      	ldreq	r5, [r4, #12]
 8003bce:	f104 041a 	add.w	r4, r4, #26
 8003bd2:	bf08      	it	eq
 8003bd4:	1aed      	subeq	r5, r5, r3
 8003bd6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003bda:	bf08      	it	eq
 8003bdc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003be0:	4293      	cmp	r3, r2
 8003be2:	bfc4      	itt	gt
 8003be4:	1a9b      	subgt	r3, r3, r2
 8003be6:	18ed      	addgt	r5, r5, r3
 8003be8:	42b5      	cmp	r5, r6
 8003bea:	d11a      	bne.n	8003c22 <_printf_common+0xd2>
 8003bec:	2000      	movs	r0, #0
 8003bee:	e008      	b.n	8003c02 <_printf_common+0xb2>
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	4652      	mov	r2, sl
 8003bf4:	4641      	mov	r1, r8
 8003bf6:	4638      	mov	r0, r7
 8003bf8:	47c8      	blx	r9
 8003bfa:	3001      	adds	r0, #1
 8003bfc:	d103      	bne.n	8003c06 <_printf_common+0xb6>
 8003bfe:	f04f 30ff 	mov.w	r0, #4294967295
 8003c02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c06:	3501      	adds	r5, #1
 8003c08:	e7c1      	b.n	8003b8e <_printf_common+0x3e>
 8003c0a:	2030      	movs	r0, #48	@ 0x30
 8003c0c:	18e1      	adds	r1, r4, r3
 8003c0e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003c12:	1c5a      	adds	r2, r3, #1
 8003c14:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003c18:	4422      	add	r2, r4
 8003c1a:	3302      	adds	r3, #2
 8003c1c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003c20:	e7c2      	b.n	8003ba8 <_printf_common+0x58>
 8003c22:	2301      	movs	r3, #1
 8003c24:	4622      	mov	r2, r4
 8003c26:	4641      	mov	r1, r8
 8003c28:	4638      	mov	r0, r7
 8003c2a:	47c8      	blx	r9
 8003c2c:	3001      	adds	r0, #1
 8003c2e:	d0e6      	beq.n	8003bfe <_printf_common+0xae>
 8003c30:	3601      	adds	r6, #1
 8003c32:	e7d9      	b.n	8003be8 <_printf_common+0x98>

08003c34 <_printf_i>:
 8003c34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c38:	7e0f      	ldrb	r7, [r1, #24]
 8003c3a:	4691      	mov	r9, r2
 8003c3c:	2f78      	cmp	r7, #120	@ 0x78
 8003c3e:	4680      	mov	r8, r0
 8003c40:	460c      	mov	r4, r1
 8003c42:	469a      	mov	sl, r3
 8003c44:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003c46:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003c4a:	d807      	bhi.n	8003c5c <_printf_i+0x28>
 8003c4c:	2f62      	cmp	r7, #98	@ 0x62
 8003c4e:	d80a      	bhi.n	8003c66 <_printf_i+0x32>
 8003c50:	2f00      	cmp	r7, #0
 8003c52:	f000 80d3 	beq.w	8003dfc <_printf_i+0x1c8>
 8003c56:	2f58      	cmp	r7, #88	@ 0x58
 8003c58:	f000 80ba 	beq.w	8003dd0 <_printf_i+0x19c>
 8003c5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003c60:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003c64:	e03a      	b.n	8003cdc <_printf_i+0xa8>
 8003c66:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003c6a:	2b15      	cmp	r3, #21
 8003c6c:	d8f6      	bhi.n	8003c5c <_printf_i+0x28>
 8003c6e:	a101      	add	r1, pc, #4	@ (adr r1, 8003c74 <_printf_i+0x40>)
 8003c70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003c74:	08003ccd 	.word	0x08003ccd
 8003c78:	08003ce1 	.word	0x08003ce1
 8003c7c:	08003c5d 	.word	0x08003c5d
 8003c80:	08003c5d 	.word	0x08003c5d
 8003c84:	08003c5d 	.word	0x08003c5d
 8003c88:	08003c5d 	.word	0x08003c5d
 8003c8c:	08003ce1 	.word	0x08003ce1
 8003c90:	08003c5d 	.word	0x08003c5d
 8003c94:	08003c5d 	.word	0x08003c5d
 8003c98:	08003c5d 	.word	0x08003c5d
 8003c9c:	08003c5d 	.word	0x08003c5d
 8003ca0:	08003de3 	.word	0x08003de3
 8003ca4:	08003d0b 	.word	0x08003d0b
 8003ca8:	08003d9d 	.word	0x08003d9d
 8003cac:	08003c5d 	.word	0x08003c5d
 8003cb0:	08003c5d 	.word	0x08003c5d
 8003cb4:	08003e05 	.word	0x08003e05
 8003cb8:	08003c5d 	.word	0x08003c5d
 8003cbc:	08003d0b 	.word	0x08003d0b
 8003cc0:	08003c5d 	.word	0x08003c5d
 8003cc4:	08003c5d 	.word	0x08003c5d
 8003cc8:	08003da5 	.word	0x08003da5
 8003ccc:	6833      	ldr	r3, [r6, #0]
 8003cce:	1d1a      	adds	r2, r3, #4
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	6032      	str	r2, [r6, #0]
 8003cd4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003cd8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e09e      	b.n	8003e1e <_printf_i+0x1ea>
 8003ce0:	6833      	ldr	r3, [r6, #0]
 8003ce2:	6820      	ldr	r0, [r4, #0]
 8003ce4:	1d19      	adds	r1, r3, #4
 8003ce6:	6031      	str	r1, [r6, #0]
 8003ce8:	0606      	lsls	r6, r0, #24
 8003cea:	d501      	bpl.n	8003cf0 <_printf_i+0xbc>
 8003cec:	681d      	ldr	r5, [r3, #0]
 8003cee:	e003      	b.n	8003cf8 <_printf_i+0xc4>
 8003cf0:	0645      	lsls	r5, r0, #25
 8003cf2:	d5fb      	bpl.n	8003cec <_printf_i+0xb8>
 8003cf4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003cf8:	2d00      	cmp	r5, #0
 8003cfa:	da03      	bge.n	8003d04 <_printf_i+0xd0>
 8003cfc:	232d      	movs	r3, #45	@ 0x2d
 8003cfe:	426d      	negs	r5, r5
 8003d00:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003d04:	230a      	movs	r3, #10
 8003d06:	4859      	ldr	r0, [pc, #356]	@ (8003e6c <_printf_i+0x238>)
 8003d08:	e011      	b.n	8003d2e <_printf_i+0xfa>
 8003d0a:	6821      	ldr	r1, [r4, #0]
 8003d0c:	6833      	ldr	r3, [r6, #0]
 8003d0e:	0608      	lsls	r0, r1, #24
 8003d10:	f853 5b04 	ldr.w	r5, [r3], #4
 8003d14:	d402      	bmi.n	8003d1c <_printf_i+0xe8>
 8003d16:	0649      	lsls	r1, r1, #25
 8003d18:	bf48      	it	mi
 8003d1a:	b2ad      	uxthmi	r5, r5
 8003d1c:	2f6f      	cmp	r7, #111	@ 0x6f
 8003d1e:	6033      	str	r3, [r6, #0]
 8003d20:	bf14      	ite	ne
 8003d22:	230a      	movne	r3, #10
 8003d24:	2308      	moveq	r3, #8
 8003d26:	4851      	ldr	r0, [pc, #324]	@ (8003e6c <_printf_i+0x238>)
 8003d28:	2100      	movs	r1, #0
 8003d2a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003d2e:	6866      	ldr	r6, [r4, #4]
 8003d30:	2e00      	cmp	r6, #0
 8003d32:	bfa8      	it	ge
 8003d34:	6821      	ldrge	r1, [r4, #0]
 8003d36:	60a6      	str	r6, [r4, #8]
 8003d38:	bfa4      	itt	ge
 8003d3a:	f021 0104 	bicge.w	r1, r1, #4
 8003d3e:	6021      	strge	r1, [r4, #0]
 8003d40:	b90d      	cbnz	r5, 8003d46 <_printf_i+0x112>
 8003d42:	2e00      	cmp	r6, #0
 8003d44:	d04b      	beq.n	8003dde <_printf_i+0x1aa>
 8003d46:	4616      	mov	r6, r2
 8003d48:	fbb5 f1f3 	udiv	r1, r5, r3
 8003d4c:	fb03 5711 	mls	r7, r3, r1, r5
 8003d50:	5dc7      	ldrb	r7, [r0, r7]
 8003d52:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003d56:	462f      	mov	r7, r5
 8003d58:	42bb      	cmp	r3, r7
 8003d5a:	460d      	mov	r5, r1
 8003d5c:	d9f4      	bls.n	8003d48 <_printf_i+0x114>
 8003d5e:	2b08      	cmp	r3, #8
 8003d60:	d10b      	bne.n	8003d7a <_printf_i+0x146>
 8003d62:	6823      	ldr	r3, [r4, #0]
 8003d64:	07df      	lsls	r7, r3, #31
 8003d66:	d508      	bpl.n	8003d7a <_printf_i+0x146>
 8003d68:	6923      	ldr	r3, [r4, #16]
 8003d6a:	6861      	ldr	r1, [r4, #4]
 8003d6c:	4299      	cmp	r1, r3
 8003d6e:	bfde      	ittt	le
 8003d70:	2330      	movle	r3, #48	@ 0x30
 8003d72:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003d76:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003d7a:	1b92      	subs	r2, r2, r6
 8003d7c:	6122      	str	r2, [r4, #16]
 8003d7e:	464b      	mov	r3, r9
 8003d80:	4621      	mov	r1, r4
 8003d82:	4640      	mov	r0, r8
 8003d84:	f8cd a000 	str.w	sl, [sp]
 8003d88:	aa03      	add	r2, sp, #12
 8003d8a:	f7ff fee1 	bl	8003b50 <_printf_common>
 8003d8e:	3001      	adds	r0, #1
 8003d90:	d14a      	bne.n	8003e28 <_printf_i+0x1f4>
 8003d92:	f04f 30ff 	mov.w	r0, #4294967295
 8003d96:	b004      	add	sp, #16
 8003d98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d9c:	6823      	ldr	r3, [r4, #0]
 8003d9e:	f043 0320 	orr.w	r3, r3, #32
 8003da2:	6023      	str	r3, [r4, #0]
 8003da4:	2778      	movs	r7, #120	@ 0x78
 8003da6:	4832      	ldr	r0, [pc, #200]	@ (8003e70 <_printf_i+0x23c>)
 8003da8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003dac:	6823      	ldr	r3, [r4, #0]
 8003dae:	6831      	ldr	r1, [r6, #0]
 8003db0:	061f      	lsls	r7, r3, #24
 8003db2:	f851 5b04 	ldr.w	r5, [r1], #4
 8003db6:	d402      	bmi.n	8003dbe <_printf_i+0x18a>
 8003db8:	065f      	lsls	r7, r3, #25
 8003dba:	bf48      	it	mi
 8003dbc:	b2ad      	uxthmi	r5, r5
 8003dbe:	6031      	str	r1, [r6, #0]
 8003dc0:	07d9      	lsls	r1, r3, #31
 8003dc2:	bf44      	itt	mi
 8003dc4:	f043 0320 	orrmi.w	r3, r3, #32
 8003dc8:	6023      	strmi	r3, [r4, #0]
 8003dca:	b11d      	cbz	r5, 8003dd4 <_printf_i+0x1a0>
 8003dcc:	2310      	movs	r3, #16
 8003dce:	e7ab      	b.n	8003d28 <_printf_i+0xf4>
 8003dd0:	4826      	ldr	r0, [pc, #152]	@ (8003e6c <_printf_i+0x238>)
 8003dd2:	e7e9      	b.n	8003da8 <_printf_i+0x174>
 8003dd4:	6823      	ldr	r3, [r4, #0]
 8003dd6:	f023 0320 	bic.w	r3, r3, #32
 8003dda:	6023      	str	r3, [r4, #0]
 8003ddc:	e7f6      	b.n	8003dcc <_printf_i+0x198>
 8003dde:	4616      	mov	r6, r2
 8003de0:	e7bd      	b.n	8003d5e <_printf_i+0x12a>
 8003de2:	6833      	ldr	r3, [r6, #0]
 8003de4:	6825      	ldr	r5, [r4, #0]
 8003de6:	1d18      	adds	r0, r3, #4
 8003de8:	6961      	ldr	r1, [r4, #20]
 8003dea:	6030      	str	r0, [r6, #0]
 8003dec:	062e      	lsls	r6, r5, #24
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	d501      	bpl.n	8003df6 <_printf_i+0x1c2>
 8003df2:	6019      	str	r1, [r3, #0]
 8003df4:	e002      	b.n	8003dfc <_printf_i+0x1c8>
 8003df6:	0668      	lsls	r0, r5, #25
 8003df8:	d5fb      	bpl.n	8003df2 <_printf_i+0x1be>
 8003dfa:	8019      	strh	r1, [r3, #0]
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	4616      	mov	r6, r2
 8003e00:	6123      	str	r3, [r4, #16]
 8003e02:	e7bc      	b.n	8003d7e <_printf_i+0x14a>
 8003e04:	6833      	ldr	r3, [r6, #0]
 8003e06:	2100      	movs	r1, #0
 8003e08:	1d1a      	adds	r2, r3, #4
 8003e0a:	6032      	str	r2, [r6, #0]
 8003e0c:	681e      	ldr	r6, [r3, #0]
 8003e0e:	6862      	ldr	r2, [r4, #4]
 8003e10:	4630      	mov	r0, r6
 8003e12:	f000 f8ed 	bl	8003ff0 <memchr>
 8003e16:	b108      	cbz	r0, 8003e1c <_printf_i+0x1e8>
 8003e18:	1b80      	subs	r0, r0, r6
 8003e1a:	6060      	str	r0, [r4, #4]
 8003e1c:	6863      	ldr	r3, [r4, #4]
 8003e1e:	6123      	str	r3, [r4, #16]
 8003e20:	2300      	movs	r3, #0
 8003e22:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003e26:	e7aa      	b.n	8003d7e <_printf_i+0x14a>
 8003e28:	4632      	mov	r2, r6
 8003e2a:	4649      	mov	r1, r9
 8003e2c:	4640      	mov	r0, r8
 8003e2e:	6923      	ldr	r3, [r4, #16]
 8003e30:	47d0      	blx	sl
 8003e32:	3001      	adds	r0, #1
 8003e34:	d0ad      	beq.n	8003d92 <_printf_i+0x15e>
 8003e36:	6823      	ldr	r3, [r4, #0]
 8003e38:	079b      	lsls	r3, r3, #30
 8003e3a:	d413      	bmi.n	8003e64 <_printf_i+0x230>
 8003e3c:	68e0      	ldr	r0, [r4, #12]
 8003e3e:	9b03      	ldr	r3, [sp, #12]
 8003e40:	4298      	cmp	r0, r3
 8003e42:	bfb8      	it	lt
 8003e44:	4618      	movlt	r0, r3
 8003e46:	e7a6      	b.n	8003d96 <_printf_i+0x162>
 8003e48:	2301      	movs	r3, #1
 8003e4a:	4632      	mov	r2, r6
 8003e4c:	4649      	mov	r1, r9
 8003e4e:	4640      	mov	r0, r8
 8003e50:	47d0      	blx	sl
 8003e52:	3001      	adds	r0, #1
 8003e54:	d09d      	beq.n	8003d92 <_printf_i+0x15e>
 8003e56:	3501      	adds	r5, #1
 8003e58:	68e3      	ldr	r3, [r4, #12]
 8003e5a:	9903      	ldr	r1, [sp, #12]
 8003e5c:	1a5b      	subs	r3, r3, r1
 8003e5e:	42ab      	cmp	r3, r5
 8003e60:	dcf2      	bgt.n	8003e48 <_printf_i+0x214>
 8003e62:	e7eb      	b.n	8003e3c <_printf_i+0x208>
 8003e64:	2500      	movs	r5, #0
 8003e66:	f104 0619 	add.w	r6, r4, #25
 8003e6a:	e7f5      	b.n	8003e58 <_printf_i+0x224>
 8003e6c:	080045e7 	.word	0x080045e7
 8003e70:	080045f8 	.word	0x080045f8

08003e74 <__swbuf_r>:
 8003e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e76:	460e      	mov	r6, r1
 8003e78:	4614      	mov	r4, r2
 8003e7a:	4605      	mov	r5, r0
 8003e7c:	b118      	cbz	r0, 8003e86 <__swbuf_r+0x12>
 8003e7e:	6a03      	ldr	r3, [r0, #32]
 8003e80:	b90b      	cbnz	r3, 8003e86 <__swbuf_r+0x12>
 8003e82:	f7ff f99b 	bl	80031bc <__sinit>
 8003e86:	69a3      	ldr	r3, [r4, #24]
 8003e88:	60a3      	str	r3, [r4, #8]
 8003e8a:	89a3      	ldrh	r3, [r4, #12]
 8003e8c:	071a      	lsls	r2, r3, #28
 8003e8e:	d501      	bpl.n	8003e94 <__swbuf_r+0x20>
 8003e90:	6923      	ldr	r3, [r4, #16]
 8003e92:	b943      	cbnz	r3, 8003ea6 <__swbuf_r+0x32>
 8003e94:	4621      	mov	r1, r4
 8003e96:	4628      	mov	r0, r5
 8003e98:	f000 f82a 	bl	8003ef0 <__swsetup_r>
 8003e9c:	b118      	cbz	r0, 8003ea6 <__swbuf_r+0x32>
 8003e9e:	f04f 37ff 	mov.w	r7, #4294967295
 8003ea2:	4638      	mov	r0, r7
 8003ea4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ea6:	6823      	ldr	r3, [r4, #0]
 8003ea8:	6922      	ldr	r2, [r4, #16]
 8003eaa:	b2f6      	uxtb	r6, r6
 8003eac:	1a98      	subs	r0, r3, r2
 8003eae:	6963      	ldr	r3, [r4, #20]
 8003eb0:	4637      	mov	r7, r6
 8003eb2:	4283      	cmp	r3, r0
 8003eb4:	dc05      	bgt.n	8003ec2 <__swbuf_r+0x4e>
 8003eb6:	4621      	mov	r1, r4
 8003eb8:	4628      	mov	r0, r5
 8003eba:	f7ff f8b7 	bl	800302c <_fflush_r>
 8003ebe:	2800      	cmp	r0, #0
 8003ec0:	d1ed      	bne.n	8003e9e <__swbuf_r+0x2a>
 8003ec2:	68a3      	ldr	r3, [r4, #8]
 8003ec4:	3b01      	subs	r3, #1
 8003ec6:	60a3      	str	r3, [r4, #8]
 8003ec8:	6823      	ldr	r3, [r4, #0]
 8003eca:	1c5a      	adds	r2, r3, #1
 8003ecc:	6022      	str	r2, [r4, #0]
 8003ece:	701e      	strb	r6, [r3, #0]
 8003ed0:	6962      	ldr	r2, [r4, #20]
 8003ed2:	1c43      	adds	r3, r0, #1
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d004      	beq.n	8003ee2 <__swbuf_r+0x6e>
 8003ed8:	89a3      	ldrh	r3, [r4, #12]
 8003eda:	07db      	lsls	r3, r3, #31
 8003edc:	d5e1      	bpl.n	8003ea2 <__swbuf_r+0x2e>
 8003ede:	2e0a      	cmp	r6, #10
 8003ee0:	d1df      	bne.n	8003ea2 <__swbuf_r+0x2e>
 8003ee2:	4621      	mov	r1, r4
 8003ee4:	4628      	mov	r0, r5
 8003ee6:	f7ff f8a1 	bl	800302c <_fflush_r>
 8003eea:	2800      	cmp	r0, #0
 8003eec:	d0d9      	beq.n	8003ea2 <__swbuf_r+0x2e>
 8003eee:	e7d6      	b.n	8003e9e <__swbuf_r+0x2a>

08003ef0 <__swsetup_r>:
 8003ef0:	b538      	push	{r3, r4, r5, lr}
 8003ef2:	4b29      	ldr	r3, [pc, #164]	@ (8003f98 <__swsetup_r+0xa8>)
 8003ef4:	4605      	mov	r5, r0
 8003ef6:	6818      	ldr	r0, [r3, #0]
 8003ef8:	460c      	mov	r4, r1
 8003efa:	b118      	cbz	r0, 8003f04 <__swsetup_r+0x14>
 8003efc:	6a03      	ldr	r3, [r0, #32]
 8003efe:	b90b      	cbnz	r3, 8003f04 <__swsetup_r+0x14>
 8003f00:	f7ff f95c 	bl	80031bc <__sinit>
 8003f04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f08:	0719      	lsls	r1, r3, #28
 8003f0a:	d422      	bmi.n	8003f52 <__swsetup_r+0x62>
 8003f0c:	06da      	lsls	r2, r3, #27
 8003f0e:	d407      	bmi.n	8003f20 <__swsetup_r+0x30>
 8003f10:	2209      	movs	r2, #9
 8003f12:	602a      	str	r2, [r5, #0]
 8003f14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003f18:	f04f 30ff 	mov.w	r0, #4294967295
 8003f1c:	81a3      	strh	r3, [r4, #12]
 8003f1e:	e033      	b.n	8003f88 <__swsetup_r+0x98>
 8003f20:	0758      	lsls	r0, r3, #29
 8003f22:	d512      	bpl.n	8003f4a <__swsetup_r+0x5a>
 8003f24:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003f26:	b141      	cbz	r1, 8003f3a <__swsetup_r+0x4a>
 8003f28:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003f2c:	4299      	cmp	r1, r3
 8003f2e:	d002      	beq.n	8003f36 <__swsetup_r+0x46>
 8003f30:	4628      	mov	r0, r5
 8003f32:	f7ff fa7f 	bl	8003434 <_free_r>
 8003f36:	2300      	movs	r3, #0
 8003f38:	6363      	str	r3, [r4, #52]	@ 0x34
 8003f3a:	89a3      	ldrh	r3, [r4, #12]
 8003f3c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003f40:	81a3      	strh	r3, [r4, #12]
 8003f42:	2300      	movs	r3, #0
 8003f44:	6063      	str	r3, [r4, #4]
 8003f46:	6923      	ldr	r3, [r4, #16]
 8003f48:	6023      	str	r3, [r4, #0]
 8003f4a:	89a3      	ldrh	r3, [r4, #12]
 8003f4c:	f043 0308 	orr.w	r3, r3, #8
 8003f50:	81a3      	strh	r3, [r4, #12]
 8003f52:	6923      	ldr	r3, [r4, #16]
 8003f54:	b94b      	cbnz	r3, 8003f6a <__swsetup_r+0x7a>
 8003f56:	89a3      	ldrh	r3, [r4, #12]
 8003f58:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003f5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f60:	d003      	beq.n	8003f6a <__swsetup_r+0x7a>
 8003f62:	4621      	mov	r1, r4
 8003f64:	4628      	mov	r0, r5
 8003f66:	f000 f8b2 	bl	80040ce <__smakebuf_r>
 8003f6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f6e:	f013 0201 	ands.w	r2, r3, #1
 8003f72:	d00a      	beq.n	8003f8a <__swsetup_r+0x9a>
 8003f74:	2200      	movs	r2, #0
 8003f76:	60a2      	str	r2, [r4, #8]
 8003f78:	6962      	ldr	r2, [r4, #20]
 8003f7a:	4252      	negs	r2, r2
 8003f7c:	61a2      	str	r2, [r4, #24]
 8003f7e:	6922      	ldr	r2, [r4, #16]
 8003f80:	b942      	cbnz	r2, 8003f94 <__swsetup_r+0xa4>
 8003f82:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003f86:	d1c5      	bne.n	8003f14 <__swsetup_r+0x24>
 8003f88:	bd38      	pop	{r3, r4, r5, pc}
 8003f8a:	0799      	lsls	r1, r3, #30
 8003f8c:	bf58      	it	pl
 8003f8e:	6962      	ldrpl	r2, [r4, #20]
 8003f90:	60a2      	str	r2, [r4, #8]
 8003f92:	e7f4      	b.n	8003f7e <__swsetup_r+0x8e>
 8003f94:	2000      	movs	r0, #0
 8003f96:	e7f7      	b.n	8003f88 <__swsetup_r+0x98>
 8003f98:	20000058 	.word	0x20000058

08003f9c <memmove>:
 8003f9c:	4288      	cmp	r0, r1
 8003f9e:	b510      	push	{r4, lr}
 8003fa0:	eb01 0402 	add.w	r4, r1, r2
 8003fa4:	d902      	bls.n	8003fac <memmove+0x10>
 8003fa6:	4284      	cmp	r4, r0
 8003fa8:	4623      	mov	r3, r4
 8003faa:	d807      	bhi.n	8003fbc <memmove+0x20>
 8003fac:	1e43      	subs	r3, r0, #1
 8003fae:	42a1      	cmp	r1, r4
 8003fb0:	d008      	beq.n	8003fc4 <memmove+0x28>
 8003fb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003fb6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003fba:	e7f8      	b.n	8003fae <memmove+0x12>
 8003fbc:	4601      	mov	r1, r0
 8003fbe:	4402      	add	r2, r0
 8003fc0:	428a      	cmp	r2, r1
 8003fc2:	d100      	bne.n	8003fc6 <memmove+0x2a>
 8003fc4:	bd10      	pop	{r4, pc}
 8003fc6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003fca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003fce:	e7f7      	b.n	8003fc0 <memmove+0x24>

08003fd0 <_sbrk_r>:
 8003fd0:	b538      	push	{r3, r4, r5, lr}
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	4d05      	ldr	r5, [pc, #20]	@ (8003fec <_sbrk_r+0x1c>)
 8003fd6:	4604      	mov	r4, r0
 8003fd8:	4608      	mov	r0, r1
 8003fda:	602b      	str	r3, [r5, #0]
 8003fdc:	f7fc fa66 	bl	80004ac <_sbrk>
 8003fe0:	1c43      	adds	r3, r0, #1
 8003fe2:	d102      	bne.n	8003fea <_sbrk_r+0x1a>
 8003fe4:	682b      	ldr	r3, [r5, #0]
 8003fe6:	b103      	cbz	r3, 8003fea <_sbrk_r+0x1a>
 8003fe8:	6023      	str	r3, [r4, #0]
 8003fea:	bd38      	pop	{r3, r4, r5, pc}
 8003fec:	200003b0 	.word	0x200003b0

08003ff0 <memchr>:
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	b510      	push	{r4, lr}
 8003ff4:	b2c9      	uxtb	r1, r1
 8003ff6:	4402      	add	r2, r0
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	d101      	bne.n	8004002 <memchr+0x12>
 8003ffe:	2000      	movs	r0, #0
 8004000:	e003      	b.n	800400a <memchr+0x1a>
 8004002:	7804      	ldrb	r4, [r0, #0]
 8004004:	3301      	adds	r3, #1
 8004006:	428c      	cmp	r4, r1
 8004008:	d1f6      	bne.n	8003ff8 <memchr+0x8>
 800400a:	bd10      	pop	{r4, pc}

0800400c <memcpy>:
 800400c:	440a      	add	r2, r1
 800400e:	4291      	cmp	r1, r2
 8004010:	f100 33ff 	add.w	r3, r0, #4294967295
 8004014:	d100      	bne.n	8004018 <memcpy+0xc>
 8004016:	4770      	bx	lr
 8004018:	b510      	push	{r4, lr}
 800401a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800401e:	4291      	cmp	r1, r2
 8004020:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004024:	d1f9      	bne.n	800401a <memcpy+0xe>
 8004026:	bd10      	pop	{r4, pc}

08004028 <_realloc_r>:
 8004028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800402c:	4680      	mov	r8, r0
 800402e:	4615      	mov	r5, r2
 8004030:	460c      	mov	r4, r1
 8004032:	b921      	cbnz	r1, 800403e <_realloc_r+0x16>
 8004034:	4611      	mov	r1, r2
 8004036:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800403a:	f7ff ba65 	b.w	8003508 <_malloc_r>
 800403e:	b92a      	cbnz	r2, 800404c <_realloc_r+0x24>
 8004040:	f7ff f9f8 	bl	8003434 <_free_r>
 8004044:	2400      	movs	r4, #0
 8004046:	4620      	mov	r0, r4
 8004048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800404c:	f000 f89e 	bl	800418c <_malloc_usable_size_r>
 8004050:	4285      	cmp	r5, r0
 8004052:	4606      	mov	r6, r0
 8004054:	d802      	bhi.n	800405c <_realloc_r+0x34>
 8004056:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800405a:	d8f4      	bhi.n	8004046 <_realloc_r+0x1e>
 800405c:	4629      	mov	r1, r5
 800405e:	4640      	mov	r0, r8
 8004060:	f7ff fa52 	bl	8003508 <_malloc_r>
 8004064:	4607      	mov	r7, r0
 8004066:	2800      	cmp	r0, #0
 8004068:	d0ec      	beq.n	8004044 <_realloc_r+0x1c>
 800406a:	42b5      	cmp	r5, r6
 800406c:	462a      	mov	r2, r5
 800406e:	4621      	mov	r1, r4
 8004070:	bf28      	it	cs
 8004072:	4632      	movcs	r2, r6
 8004074:	f7ff ffca 	bl	800400c <memcpy>
 8004078:	4621      	mov	r1, r4
 800407a:	4640      	mov	r0, r8
 800407c:	f7ff f9da 	bl	8003434 <_free_r>
 8004080:	463c      	mov	r4, r7
 8004082:	e7e0      	b.n	8004046 <_realloc_r+0x1e>

08004084 <__swhatbuf_r>:
 8004084:	b570      	push	{r4, r5, r6, lr}
 8004086:	460c      	mov	r4, r1
 8004088:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800408c:	4615      	mov	r5, r2
 800408e:	2900      	cmp	r1, #0
 8004090:	461e      	mov	r6, r3
 8004092:	b096      	sub	sp, #88	@ 0x58
 8004094:	da0c      	bge.n	80040b0 <__swhatbuf_r+0x2c>
 8004096:	89a3      	ldrh	r3, [r4, #12]
 8004098:	2100      	movs	r1, #0
 800409a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800409e:	bf14      	ite	ne
 80040a0:	2340      	movne	r3, #64	@ 0x40
 80040a2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80040a6:	2000      	movs	r0, #0
 80040a8:	6031      	str	r1, [r6, #0]
 80040aa:	602b      	str	r3, [r5, #0]
 80040ac:	b016      	add	sp, #88	@ 0x58
 80040ae:	bd70      	pop	{r4, r5, r6, pc}
 80040b0:	466a      	mov	r2, sp
 80040b2:	f000 f849 	bl	8004148 <_fstat_r>
 80040b6:	2800      	cmp	r0, #0
 80040b8:	dbed      	blt.n	8004096 <__swhatbuf_r+0x12>
 80040ba:	9901      	ldr	r1, [sp, #4]
 80040bc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80040c0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80040c4:	4259      	negs	r1, r3
 80040c6:	4159      	adcs	r1, r3
 80040c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80040cc:	e7eb      	b.n	80040a6 <__swhatbuf_r+0x22>

080040ce <__smakebuf_r>:
 80040ce:	898b      	ldrh	r3, [r1, #12]
 80040d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80040d2:	079d      	lsls	r5, r3, #30
 80040d4:	4606      	mov	r6, r0
 80040d6:	460c      	mov	r4, r1
 80040d8:	d507      	bpl.n	80040ea <__smakebuf_r+0x1c>
 80040da:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80040de:	6023      	str	r3, [r4, #0]
 80040e0:	6123      	str	r3, [r4, #16]
 80040e2:	2301      	movs	r3, #1
 80040e4:	6163      	str	r3, [r4, #20]
 80040e6:	b003      	add	sp, #12
 80040e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040ea:	466a      	mov	r2, sp
 80040ec:	ab01      	add	r3, sp, #4
 80040ee:	f7ff ffc9 	bl	8004084 <__swhatbuf_r>
 80040f2:	9f00      	ldr	r7, [sp, #0]
 80040f4:	4605      	mov	r5, r0
 80040f6:	4639      	mov	r1, r7
 80040f8:	4630      	mov	r0, r6
 80040fa:	f7ff fa05 	bl	8003508 <_malloc_r>
 80040fe:	b948      	cbnz	r0, 8004114 <__smakebuf_r+0x46>
 8004100:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004104:	059a      	lsls	r2, r3, #22
 8004106:	d4ee      	bmi.n	80040e6 <__smakebuf_r+0x18>
 8004108:	f023 0303 	bic.w	r3, r3, #3
 800410c:	f043 0302 	orr.w	r3, r3, #2
 8004110:	81a3      	strh	r3, [r4, #12]
 8004112:	e7e2      	b.n	80040da <__smakebuf_r+0xc>
 8004114:	89a3      	ldrh	r3, [r4, #12]
 8004116:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800411a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800411e:	81a3      	strh	r3, [r4, #12]
 8004120:	9b01      	ldr	r3, [sp, #4]
 8004122:	6020      	str	r0, [r4, #0]
 8004124:	b15b      	cbz	r3, 800413e <__smakebuf_r+0x70>
 8004126:	4630      	mov	r0, r6
 8004128:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800412c:	f000 f81e 	bl	800416c <_isatty_r>
 8004130:	b128      	cbz	r0, 800413e <__smakebuf_r+0x70>
 8004132:	89a3      	ldrh	r3, [r4, #12]
 8004134:	f023 0303 	bic.w	r3, r3, #3
 8004138:	f043 0301 	orr.w	r3, r3, #1
 800413c:	81a3      	strh	r3, [r4, #12]
 800413e:	89a3      	ldrh	r3, [r4, #12]
 8004140:	431d      	orrs	r5, r3
 8004142:	81a5      	strh	r5, [r4, #12]
 8004144:	e7cf      	b.n	80040e6 <__smakebuf_r+0x18>
	...

08004148 <_fstat_r>:
 8004148:	b538      	push	{r3, r4, r5, lr}
 800414a:	2300      	movs	r3, #0
 800414c:	4d06      	ldr	r5, [pc, #24]	@ (8004168 <_fstat_r+0x20>)
 800414e:	4604      	mov	r4, r0
 8004150:	4608      	mov	r0, r1
 8004152:	4611      	mov	r1, r2
 8004154:	602b      	str	r3, [r5, #0]
 8004156:	f7fe fd68 	bl	8002c2a <_fstat>
 800415a:	1c43      	adds	r3, r0, #1
 800415c:	d102      	bne.n	8004164 <_fstat_r+0x1c>
 800415e:	682b      	ldr	r3, [r5, #0]
 8004160:	b103      	cbz	r3, 8004164 <_fstat_r+0x1c>
 8004162:	6023      	str	r3, [r4, #0]
 8004164:	bd38      	pop	{r3, r4, r5, pc}
 8004166:	bf00      	nop
 8004168:	200003b0 	.word	0x200003b0

0800416c <_isatty_r>:
 800416c:	b538      	push	{r3, r4, r5, lr}
 800416e:	2300      	movs	r3, #0
 8004170:	4d05      	ldr	r5, [pc, #20]	@ (8004188 <_isatty_r+0x1c>)
 8004172:	4604      	mov	r4, r0
 8004174:	4608      	mov	r0, r1
 8004176:	602b      	str	r3, [r5, #0]
 8004178:	f7fe feba 	bl	8002ef0 <_isatty>
 800417c:	1c43      	adds	r3, r0, #1
 800417e:	d102      	bne.n	8004186 <_isatty_r+0x1a>
 8004180:	682b      	ldr	r3, [r5, #0]
 8004182:	b103      	cbz	r3, 8004186 <_isatty_r+0x1a>
 8004184:	6023      	str	r3, [r4, #0]
 8004186:	bd38      	pop	{r3, r4, r5, pc}
 8004188:	200003b0 	.word	0x200003b0

0800418c <_malloc_usable_size_r>:
 800418c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004190:	1f18      	subs	r0, r3, #4
 8004192:	2b00      	cmp	r3, #0
 8004194:	bfbc      	itt	lt
 8004196:	580b      	ldrlt	r3, [r1, r0]
 8004198:	18c0      	addlt	r0, r0, r3
 800419a:	4770      	bx	lr

0800419c <_init>:
 800419c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800419e:	bf00      	nop
 80041a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041a2:	bc08      	pop	{r3}
 80041a4:	469e      	mov	lr, r3
 80041a6:	4770      	bx	lr

080041a8 <_fini>:
 80041a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041aa:	bf00      	nop
 80041ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041ae:	bc08      	pop	{r3}
 80041b0:	469e      	mov	lr, r3
 80041b2:	4770      	bx	lr
